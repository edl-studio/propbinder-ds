{
    "pipes": [],
    "interfaces": [
        {
            "name": "DrawerStoryProps",
            "id": "interface-DrawerStoryProps-405649f75badacbf2597158ded1b4d5d8e56dcc1674927e9f9f22c37c6b404cbab721662a353a32459cb3da8dc248278c57051263f593410efff0c13cbcf51ed",
            "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\r\nimport { DsDrawerComponent } from './ds-drawer';\r\nimport { DsButtonComponent } from '../button/ds-button';\r\nimport { NgpDialogTrigger, NgpDialogOverlay, NgpDialog } from 'ng-primitives/dialog';\r\n\r\ninterface DrawerStoryProps {\r\n  position: 'left' | 'right';\r\n}\r\n\r\nconst meta: Meta<DrawerStoryProps> = {\r\n  title: 'Primitives/Drawer',\r\n  component: DsDrawerComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDrawerComponent, DsButtonComponent, NgpDialogTrigger, NgpDialogOverlay, NgpDialog],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    position: {\r\n      control: 'select',\r\n      options: ['left', 'right'],\r\n      description: 'Position of the drawer',\r\n      defaultValue: 'right'\r\n    }\r\n  }\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DrawerStoryProps>;\r\n\r\nconst Template: Story['render'] = (args) => ({\r\n  props: args,\r\n  template: `\r\n    <div style=\"padding: 20px;\">\r\n      <ds-button [ngpDialogTrigger]=\"drawer\" variant=\"primary\">Open Drawer</ds-button>\r\n      <p>This is the main page content. When you open the drawer, it should overlay this content with a semi-transparent background.</p>\r\n    </div>\r\n\r\n    <ng-template #drawer let-close=\"close\">\r\n      <div ngpDialogOverlay class=\"ds-drawer-overlay\">\r\n        <ds-drawer ngpDialog [position]=\"position\">\r\n          <h2 slot=\"header\" class=\"tw-text-xl tw-font-semibold\">Drawer Title</h2>\r\n          <div slot=\"content\">\r\n            <p class=\"tw-text-neutral-700 tw-mb-4\">This is the main content of the drawer.</p>\r\n            <p class=\"tw-text-neutral-600 tw-mb-4\">You can put any content here including forms, lists, or other components.</p>\r\n            <div class=\"tw-p-4 tw-bg-gray-50 tw-rounded-lg\">\r\n              <h3 class=\"tw-font-medium tw-mb-2\">Example Content</h3>\r\n              <p class=\"tw-text-sm tw-text-gray-600\">This drawer should slide in from the {{ position }} side of the screen.</p>\r\n            </div>\r\n          </div>\r\n          <div slot=\"footer\">\r\n            <ds-button variant=\"ghost\" (click)=\"close()\">Cancel</ds-button>\r\n            <ds-button variant=\"primary\" (click)=\"close()\">Save Changes</ds-button>\r\n          </div>\r\n        </ds-drawer>\r\n      </div>\r\n    </ng-template>\r\n  `\r\n});\r\n\r\nexport const RightDrawer: Story = {\r\n  args: {\r\n    position: 'right'\r\n  },\r\n  render: Template\r\n};\r\n\r\nexport const LeftDrawer: Story = {\r\n  args: {\r\n    position: 'left'\r\n  },\r\n  render: Template\r\n};",
            "properties": [
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "ExampleOption",
            "id": "interface-ExampleOption-7249a15e33e8564c540ed55bd22dc3f27fc1dbd6c44a6de4c1d190dc79f42ab50d07f4321c3a07f98cfbf1277a098670e842c67a444ee127f989e78702509030",
            "file": "src/app/components/ui/select/ds-select.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata, componentWrapperDecorator } from '@storybook/angular';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DsSelectComponent, DsSelectOption } from './ds-select';\r\n\r\ninterface ExampleOption {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nconst meta: Meta<DsSelectComponent> = {\r\n  title: 'Primitives/Select',\r\n  component: DsSelectComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormsModule],\r\n    }),\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'error', 'warning', 'success'],\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    required: {\r\n      control: 'boolean',\r\n    },\r\n    ghost: {\r\n      control: 'boolean',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsSelectComponent>;\r\n\r\nconst simpleOptions: DsSelectOption[] = [\r\n  { id: '1', label: 'Option 1', value: 1 },\r\n  { id: '2', label: 'Option 2', value: 2 },\r\n  { id: '3', label: 'Option 3', value: 3 },\r\n  { id: '4', label: 'Option 4', value: 4 },\r\n];\r\n\r\nconst groupedOptions: DsSelectOption[] = [\r\n  { id: '1', label: 'Apple', value: 'apple', group: 'Fruits' },\r\n  { id: '2', label: 'Banana', value: 'banana', group: 'Fruits' },\r\n  { id: '3', label: 'Orange', value: 'orange', group: 'Fruits' },\r\n  { id: '4', label: 'Carrot', value: 'carrot', group: 'Vegetables' },\r\n  { id: '5', label: 'Broccoli', value: 'broccoli', group: 'Vegetables' },\r\n  { id: '6', label: 'Potato', value: 'potato', group: 'Vegetables' },\r\n];\r\n\r\nexport const Default: Story = {\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'default',\r\n    disabled: false,\r\n    required: false,\r\n    ghost: false,\r\n  },\r\n};\r\n\r\nexport const WithGroups: Story = {\r\n  args: {\r\n    options: groupedOptions,\r\n    placeholder: 'Select food',\r\n    variant: 'default',\r\n  },\r\n};\r\n\r\nexport const Disabled: Story = {\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    disabled: true,\r\n  },\r\n};\r\n\r\nexport const Error: Story = {\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'error',\r\n  },\r\n};\r\n\r\nexport const Warning: Story = {\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'warning',\r\n  },\r\n};\r\n\r\nexport const Success: Story = {\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'success',\r\n  },\r\n};\r\n\r\nexport const WithDisabledOptions: Story = {\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Option 1', value: 1 },\r\n      { id: '2', label: 'Option 2', value: 2, disabled: true },\r\n      { id: '3', label: 'Option 3', value: 3 },\r\n      { id: '4', label: 'Option 4', value: 4, disabled: true },\r\n    ],\r\n    placeholder: 'Select an option',\r\n  },\r\n};\r\n\r\nexport const Ghost: Story = {\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Ghost select',\r\n    ghost: true,\r\n  },\r\n};\r\n\r\nexport const GhostWithGroups: Story = {\r\n  args: {\r\n    options: groupedOptions,\r\n    placeholder: 'Ghost select with groups',\r\n    ghost: true,\r\n  },\r\n};\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "InvoiceLine",
            "id": "interface-InvoiceLine-3c1729e4fe260f889e0178f3e0ade52fbf31cd071c26acb51c2b5154b2dbe36b6cda526af454c116d311f63afec57f54c175c13b1d2aebdc90c8259dfa5126ea",
            "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\r\nimport { signal } from '@angular/core';\r\nimport { DsEditableTableComponent, type DsEditableTableColumnMeta } from './ds-editable-table';\r\nimport { editableTextCell, editableNumberCell, editableSelectCell } from './editable-cell-helpers';\r\nimport { provideIcons } from '@ng-icons/core';\r\nimport { \r\n  remixAddLine,\r\n  remixDeleteBinLine,\r\n  remixDraggable,\r\n  remixInboxLine,\r\n  remixArrowUpLine,\r\n  remixArrowDownLine,\r\n} from '@ng-icons/remixicon';\r\nimport type { ColumnDef } from '@tanstack/angular-table';\r\n\r\n// Sample data types\r\ninterface InvoiceLine {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  discount: number;\r\n  total: number;\r\n}\r\n\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  sku: string;\r\n  category: string;\r\n  price: number;\r\n  stock: number;\r\n}\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  assignee: string;\r\n  priority: string;\r\n  status: string;\r\n  dueDate: string;\r\n}\r\n\r\n// Sample data\r\nconst sampleInvoiceLines: InvoiceLine[] = [\r\n  { \r\n    id: '1', \r\n    name: 'Administration fee', \r\n    description: 'Covers handling and coordination', \r\n    quantity: 1, \r\n    unitPrice: 500, \r\n    discount: 0, \r\n    total: 500 \r\n  },\r\n  { \r\n    id: '2', \r\n    name: 'Miscellaneous', \r\n    description: 'Various small items', \r\n    quantity: 2, \r\n    unitPrice: 400, \r\n    discount: 0, \r\n    total: 800 \r\n  },\r\n  { \r\n    id: '3', \r\n    name: 'Technical Manager', \r\n    description: 'Consulting services', \r\n    quantity: 6.5, \r\n    unitPrice: 800, \r\n    discount: 0, \r\n    total: 5200 \r\n  },\r\n];\r\n\r\nconst sampleProducts: Product[] = [\r\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\r\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\r\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\r\n];\r\n\r\nconst sampleTasks: Task[] = [\r\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\r\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\r\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\r\n];\r\n\r\n// Priority options for select\r\nconst priorityOptions = [\r\n  { id: 'low', label: 'Low', value: 'Low' },\r\n  { id: 'medium', label: 'Medium', value: 'Medium' },\r\n  { id: 'high', label: 'High', value: 'High' },\r\n];\r\n\r\n// Status options for select\r\nconst statusOptions = [\r\n  { id: 'todo', label: 'To Do', value: 'To Do' },\r\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\r\n  { id: 'done', label: 'Done', value: 'Done' },\r\n];\r\n\r\n// Category options for select\r\nconst categoryOptions = [\r\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\r\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\r\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\r\n  { id: 'office', label: 'Office', value: 'Office' },\r\n];\r\n\r\n// Column definitions\r\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'description',\r\n    header: 'Description',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Add description...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n        maxWidth: 'xl',\r\n        truncate: true,\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'quantity',\r\n    header: 'Quantity',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.5,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'unitPrice',\r\n    header: 'Unit Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'discount',\r\n    header: 'Discount',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'total',\r\n    header: 'Total',\r\n    cell: (info) => info.getValue(),\r\n    enableSorting: true,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst productColumns: ColumnDef<Product>[] = [\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter product name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'sku',\r\n    header: 'SKU',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'SKU-000'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: categoryOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 1,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst taskColumns: ColumnDef<Task>[] = [\r\n  {\r\n    accessorKey: 'title',\r\n    header: 'Task',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter task title...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'assignee',\r\n    header: 'Assignee',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Assign to...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'priority',\r\n    header: 'Priority',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: priorityOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: statusOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'dueDate',\r\n    header: 'Due Date',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst meta: Meta<DsEditableTableComponent> = {\r\n  title: 'Primitives/Editable Table',\r\n  component: DsEditableTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixDeleteBinLine,\r\n          remixDraggable,\r\n          remixInboxLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display and edit (two-way binding)',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    reorderable: {\r\n      control: 'boolean',\r\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\r\n    },\r\n    allowAddRow: {\r\n      control: 'boolean',\r\n      description: 'Allow adding new rows',\r\n    },\r\n    allowDeleteRow: {\r\n      control: 'boolean',\r\n      description: 'Allow deleting rows',\r\n    },\r\n    showDragHandle: {\r\n      control: 'boolean',\r\n      description: 'Show drag handle column (only when reorderable is true)',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    addRowButtonText: {\r\n      control: 'text',\r\n      description: 'Text for add row button',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsEditableTableComponent>;\r\n\r\nexport const InvoiceLinesReorderable: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceData: signal([...sampleInvoiceLines]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: 'Add description',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"invoiceData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [showDragHandle]=\"true\"\r\n        [addRowButtonText]=\"'Add invoice line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ProductsSortable: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      productData: signal([...sampleProducts]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        sku: '',\r\n        category: 'Electronics',\r\n        price: 0,\r\n        stock: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onSortingChanged: (sorting: any) => {\r\n        console.log('Sorting changed:', sorting);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"productData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add product'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (sortingChanged)=\"onSortingChanged($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const TasksWithSelects: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      taskData: signal([...sampleTasks]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        title: '',\r\n        assignee: '',\r\n        priority: 'Medium',\r\n        status: 'To Do',\r\n        dueDate: ''\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"taskData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add task'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: taskColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const EmptyState: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      emptyData: signal([]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: '',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('First row added:', row);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"emptyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [emptyMessage]=\"'No invoice lines yet'\"\r\n        [addRowButtonText]=\"'Add first line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const NoDeleteAllowed: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      lockedData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"lockedData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"false\"\r\n        [addRowButtonText]=\"'Add line'\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const NoDragHandle: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      noDragData: signal([...sampleProducts]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"noDragData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [showDragHandle]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ReadOnlyMode: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      readOnlyData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"readOnlyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"false\"\r\n        [allowDeleteRow]=\"false\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "InvoiceLine",
            "id": "interface-InvoiceLine-d3166897ab7a6ba94bd28d03e8e37e3cf1b89d021be1aeb7ab7d6b73f5f5266f86d1e384ca3d90eedc18ba2325bf3276c8ddf3fea617ead54a0c69430cde10f5-1",
            "file": "src/app/components/ui/tile/ds-tile.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig, moduleMetadata } from '@storybook/angular';\r\nimport { DsTileComponent } from './ds-tile';\r\nimport { DsTileSectionComponent } from './ds-tile-section';\r\nimport { TileHeaderComponent } from './tile-header';\r\nimport { DsButtonComponent } from '../button/ds-button';\r\nimport { DsIconButtonComponent } from '../button/ds-icon-button';\r\nimport { DsIconComponent } from '../icon/ds-icon';\r\nimport { DsAvatarComponent } from '../avatar/ds-avatar';\r\nimport { DsDataTableComponent } from '../data-table/ds-data-table';\r\nimport { DsBadgeComponent } from '../badge/ds-badge';\r\nimport { DsDataItemComponent } from '../data-item/ds-data-item';\r\nimport { DsMetadataItemComponent } from '../metadata-item/ds-metadata-item';\r\nimport { provideIcons } from '@ng-icons/core';\r\nimport {\r\n  remixAddLine,\r\n  remixEditLine,\r\n  remixMoreLine,\r\n  remixFileList3Line,\r\n  remixUserLine,\r\n  remixDownloadLine,\r\n  remixFilterLine,\r\n  remixSearchLine,\r\n  remixLayoutColumnLine,\r\n  remixCloseLine,\r\n  remixArrowUpLine,\r\n  remixArrowDownLine,\r\n  remixInboxLine,\r\n  remixArrowLeftSLine,\r\n  remixArrowRightSLine,\r\n} from '@ng-icons/remixicon';\r\nimport type { ColumnDef } from '@tanstack/angular-table';\r\n\r\ninterface InvoiceLine {\r\n  id: number;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  total: number;\r\n}\r\n\r\nconst sampleInvoiceLines: InvoiceLine[] = [\r\n  { id: 1, description: 'Professional Services - Consulting', quantity: 10, unitPrice: 150.00, total: 1500.00 },\r\n  { id: 2, description: 'Software License - Annual', quantity: 5, unitPrice: 299.99, total: 1499.95 },\r\n  { id: 3, description: 'Cloud Hosting - Monthly', quantity: 12, unitPrice: 49.99, total: 599.88 },\r\n  { id: 4, description: 'Support & Maintenance', quantity: 1, unitPrice: 999.00, total: 999.00 },\r\n];\r\n\r\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\r\n  { accessorKey: 'id', header: 'ID' },\r\n  { accessorKey: 'description', header: 'Description' },\r\n  { accessorKey: 'quantity', header: 'Qty' },\r\n  { accessorKey: 'unitPrice', header: 'Unit Price', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\r\n  { accessorKey: 'total', header: 'Total', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\r\n];\r\n\r\nconst meta: Meta<DsTileComponent> = {\r\n  title: 'Primitives/Tile',\r\n  component: DsTileComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixEditLine,\r\n          remixMoreLine,\r\n          remixFileList3Line,\r\n          remixUserLine,\r\n          remixDownloadLine,\r\n          remixFilterLine,\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n        }),\r\n      ],\r\n    }),\r\n    moduleMetadata({\r\n      imports: [\r\n        DsTileSectionComponent,\r\n        TileHeaderComponent,\r\n        DsButtonComponent,\r\n        DsIconButtonComponent,\r\n        DsIconComponent,\r\n        DsAvatarComponent,\r\n        DsDataTableComponent,\r\n        DsBadgeComponent,\r\n        DsDataItemComponent,\r\n        DsMetadataItemComponent,\r\n      ],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    orientation: {\r\n      control: 'select',\r\n      options: ['vertical', 'horizontal'],\r\n      description: 'Layout orientation of tile sections',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsTileComponent>;\r\n\r\n// Basic Examples\r\nexport const Default: Story = {\r\n  args: {\r\n    orientation: 'vertical',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-tile [orientation]=\"orientation\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Section Title</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\">Action</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">This is a simple tile section with a header and some content.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const WithDataTable: Story = {\r\n  args: {\r\n    orientation: 'vertical',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceLines: sampleInvoiceLines,\r\n      invoiceColumns: invoiceColumns,\r\n    },\r\n    template: `\r\n      <ds-tile [orientation]=\"orientation\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Invoice Lines</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">Add line</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n        </ds-tile-section>\r\n        <ds-tile-section [padding]=\"false\">\r\n          <ds-data-table \r\n            [data]=\"invoiceLines\" \r\n            [columns]=\"invoiceColumns\"\r\n            [searchable]=\"false\"\r\n            [showColumnVisibility]=\"false\"\r\n            [paginated]=\"false\">\r\n          </ds-data-table>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const WithTitleAndAvatar: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>\r\n              <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\" />\r\n              User Profile\r\n            </header-title>\r\n            <header-actions>\r\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Name\" value=\"John Doe\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Email\" value=\"john.doe@example.com\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Role\" value=\"Administrator\" layout=\"horizontal\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const WithTitleAndIcon: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>\r\n              <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\r\n              Invoice Details\r\n            </header-title>\r\n            <header-actions>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item icon=\"remixFileTextLine\" value=\"Invoice #12345\" />\r\n            <ds-metadata-item icon=\"remixCalendarLine\" value=\"Due Date: 2024-03-15\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const MultipleActions: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Document Manager</header-title>\r\n            <header-actions>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixFilterLine\">Filter</ds-button>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">New</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">Manage your documents with multiple action options.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const MultipleSectionsVertical: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Personal Information</header-title>\r\n            <header-actions>\r\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Name\" value=\"Jane Smith\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Email\" value=\"jane.smith@example.com\" layout=\"horizontal\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Account Settings</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Plan\" value=\"Professional\" layout=\"horizontal\" />\r\n            <ds-data-item \r\n              label=\"Status\" \r\n              value=\"Active\" \r\n              valueType=\"badge\"\r\n              layout=\"horizontal\"\r\n              badgeVariant=\"success\"\r\n              badgeContent=\"Active\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Preferences</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\" variant=\"ghost\">Reset</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">Configure your application preferences here.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const MultipleSectionsHorizontal: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"horizontal\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Overview</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\r\n            <ds-data-item \r\n              label=\"Total Revenue\" \r\n              value=\"$45,231\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-lg'\" />\r\n            <ds-data-item \r\n              label=\"Growth\" \r\n              value=\"+20.1%\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-md tw-text-success-strong'\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Activity</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\r\n            <ds-data-item \r\n              label=\"New Users\" \r\n              value=\"1,234\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-lg'\" />\r\n            <ds-data-item \r\n              label=\"Conversion\" \r\n              value=\"3.2%\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-md'\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const SectionWithoutHeader: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <p style=\"margin: 0;\">This section has no header, just content with default padding.</p>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Section with Header</header-title>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">This section has a header for comparison.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const SectionWithoutPadding: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>With Padding (Default)</header-title>\r\n          </tile-header>\r\n          <div style=\"background: #f0f0f0; padding: 8px; border-radius: 4px;\">\r\n            This content has the default 20px padding around it.\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section [padding]=\"false\">\r\n          <div style=\"background: #f0f0f0; padding: 20px;\">\r\n            This content has no section padding. The gray box extends to the edges.\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const ComplexExample: Story = {\r\n  render: () => ({\r\n    props: {\r\n      invoiceLines: sampleInvoiceLines,\r\n      invoiceColumns: invoiceColumns,\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <ds-tile orientation=\"vertical\">\r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>\r\n                <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\r\n                Invoice #INV-2024-001\r\n              </header-title>\r\n              <header-actions>\r\n                <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Download</ds-button>\r\n                <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\r\n              <ds-data-item label=\"Client\" value=\"Acme Corporation\" layout=\"vertical\" />\r\n              <ds-data-item label=\"Issue Date\" value=\"2024-03-01\" layout=\"vertical\" />\r\n              <ds-data-item label=\"Due Date\" value=\"2024-03-31\" layout=\"vertical\" />\r\n              <ds-data-item \r\n                label=\"Status\" \r\n                value=\"Pending\" \r\n                valueType=\"badge\"\r\n                layout=\"vertical\"\r\n                badgeVariant=\"warning\"\r\n                badgeContent=\"Pending\" />\r\n            </div>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section [padding]=\"false\">\r\n            <ds-data-table \r\n              [data]=\"invoiceLines\" \r\n              [columns]=\"invoiceColumns\"\r\n              [searchable]=\"false\"\r\n              [showColumnVisibility]=\"false\"\r\n              [paginated]=\"false\">\r\n            </ds-data-table>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section>\r\n            <div style=\"display: flex; justify-content: flex-end; gap: 8px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Subtotal\" \r\n                  value=\"$4,598.83\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'ui-xs-regular'\"\r\n                  [valueClassName]=\"'ui-lg-medium'\" />\r\n              </div>\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Tax (10%)\" \r\n                  value=\"$459.88\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'ui-xs-regular'\"\r\n                  [valueClassName]=\"'ui-lg-medium'\" />\r\n              </div>\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Total\" \r\n                  value=\"$5,058.71\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'body-sm-semibold'\"\r\n                  [valueClassName]=\"'ui-lg-medium tw-text-brand'\" />\r\n              </div>\r\n            </div>\r\n          </ds-tile-section>\r\n        </ds-tile>\r\n      </div>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const ResponsiveLayout: Story = {\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <p style=\"margin: 0; font-size: 14px; color: var(--text-color-default-secondary);\">\r\n          Resize your browser to see the responsive behavior. Horizontal tiles stack vertically on mobile, \r\n          and section headers stack their title and actions.\r\n        </p>\r\n        \r\n        <ds-tile orientation=\"horizontal\">\r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>Left Section</header-title>\r\n              <header-actions>\r\n                <ds-button size=\"sm\" variant=\"ghost\">Action</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <p style=\"margin: 0;\">This section is on the left on desktop and stacks on top on mobile.</p>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>Right Section</header-title>\r\n              <header-actions>\r\n                <ds-button size=\"sm\">Action</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <p style=\"margin: 0;\">This section is on the right on desktop and stacks below on mobile.</p>\r\n          </ds-tile-section>\r\n        </ds-tile>\r\n      </div>\r\n    `,\r\n  }),\r\n};\r\n\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "InvoiceLine-1"
        },
        {
            "name": "Product",
            "id": "interface-Product-c544befa7572faec55bd047213889d68dbe11173174b7b884da88613e69de99c1e25137a3c14106e96938d849814fe5a923bdd593c83b7ff1afc4a721802deab",
            "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\r\nimport { DsDataTableComponent, type DsDataTableColumnMeta } from './ds-data-table';\r\nimport { DsBadgeComponent } from '../badge/ds-badge';\r\nimport { provideIcons } from '@ng-icons/core';\r\nimport { \r\n  remixSearchLine,\r\n  remixLayoutColumnLine,\r\n  remixCloseLine,\r\n  remixArrowUpLine,\r\n  remixArrowDownLine,\r\n  remixArrowUpDownLine,\r\n  remixInboxLine,\r\n  remixArrowLeftSLine,\r\n  remixArrowRightSLine,\r\n  remixEyeLine,\r\n  remixEditLine,\r\n  remixDeleteBinLine,\r\n  remixLoader4Line,\r\n} from '@ng-icons/remixicon';\r\nimport type { ColumnDef } from '@tanstack/angular-table';\r\nimport { signal } from '@angular/core';\r\n\r\n// Sample data types\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  status: 'active' | 'inactive' | 'pending';\r\n  joinDate: string;\r\n}\r\n\r\ninterface Product {\r\n  id: number;\r\n  name: string;\r\n  category: string;\r\n  price: number;\r\n  stock: number;\r\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\r\n}\r\n\r\n// Sample data\r\nconst sampleUsers: User[] = [\r\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\r\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\r\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\r\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\r\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\r\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\r\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\r\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\r\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\r\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\r\n];\r\n\r\nconst sampleProducts: Product[] = [\r\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\r\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\r\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\r\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\r\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\r\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\r\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\r\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\r\n];\r\n\r\n// Column definitions\r\nconst userColumns: ColumnDef<User>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px\r\n        maxWidth: 'lg',  // 256px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        active: 'success',\r\n        inactive: 'grey',\r\n        pending: 'warning',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst productColumns: ColumnDef<Product>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const price = info.getValue() as number;\r\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const stock = info.getValue() as number;\r\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\r\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        in_stock: 'success',\r\n        low_stock: 'warning',\r\n        out_of_stock: 'destructive',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      const label = status.replace('_', ' ').toUpperCase();\r\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\r\n    },\r\n  },\r\n];\r\n\r\n// Columns with actions\r\nconst userColumnsWithActions: ColumnDef<User>[] = [\r\n  ...userColumns,\r\n  {\r\n    id: 'actions',\r\n    header: 'Actions',\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      return `\r\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\r\n            title=\"Edit\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n            </svg>\r\n          </button>\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\r\n            title=\"Delete\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\r\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      `;\r\n    },\r\n  },\r\n];\r\n\r\nconst meta: Meta<DsDataTableComponent> = {\r\n  title: 'Primitives/Data Table',\r\n  component: DsDataTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixArrowUpDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n          remixEyeLine,\r\n          remixEditLine,\r\n          remixDeleteBinLine,\r\n          remixLoader4Line,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display in the table',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    searchable: {\r\n      control: 'boolean',\r\n      description: 'Enable global search functionality',\r\n    },\r\n    searchPlaceholder: {\r\n      control: 'text',\r\n      description: 'Placeholder text for search input',\r\n    },\r\n    paginated: {\r\n      control: 'boolean',\r\n      description: 'Enable pagination',\r\n    },\r\n    pageSize: {\r\n      control: 'number',\r\n      description: 'Number of rows per page',\r\n    },\r\n    showColumnVisibility: {\r\n      control: 'boolean',\r\n      description: 'Show column visibility toggle',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    rowClickable: {\r\n      control: 'boolean',\r\n      description: 'Make rows clickable',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsDataTableComponent>;\r\n\r\nexport const Default: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const Products: Story = {\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    searchPlaceholder: 'Search products...',\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const WithActions: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n    rowClickable: false,\r\n  },\r\n};\r\n\r\nexport const WithoutSearch: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: false,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n};\r\n\r\nexport const WithoutPagination: Story = {\r\n  args: {\r\n    data: sampleUsers.slice(0, 5),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n};\r\n\r\nexport const LargeDataset: Story = {\r\n  args: {\r\n    data: Array.from({ length: 100 }, (_, i) => ({\r\n      id: i + 1,\r\n      name: `User ${i + 1}`,\r\n      email: `user${i + 1}@example.com`,\r\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\r\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\r\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\r\n    })),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    pageSizeOptions: [10, 25, 50, 100],\r\n    showColumnVisibility: true,\r\n  },\r\n};\r\n\r\nexport const EmptyState: Story = {\r\n  args: {\r\n    data: [],\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    emptyMessage: 'No users found',\r\n  },\r\n};\r\n\r\nexport const ClickableRows: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    rowClickable: true,\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      onRowClicked: (row: User) => {\r\n        alert(`Clicked on: ${row.name}`);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-data-table\r\n        [data]=\"data\"\r\n        [columns]=\"columns\"\r\n        [searchable]=\"searchable\"\r\n        [paginated]=\"paginated\"\r\n        [pageSize]=\"pageSize\"\r\n        [rowClickable]=\"rowClickable\"\r\n        (rowClicked)=\"onRowClicked($event)\"\r\n      />\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const CompactView: Story = {\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    showColumnVisibility: false,\r\n  },\r\n};\r\n\r\n// Column sizing example\r\nconst userColumnsWithSizing: ColumnDef<User>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px - narrow fixed width\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px minimum\r\n        maxWidth: 'lg',  // 256px maximum\r\n        truncate: true,  // Show ellipsis\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email Address (Very Long Header Name)',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: '300px', // Custom pixel value\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'xs',\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',\r\n        maxWidth: 'md',\r\n        truncate: false, // Allow wrapping instead of truncating\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const statusColors: Record<string, string> = {\r\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n      };\r\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n];\r\n\r\nexport const WithColumnSizing: Story = {\r\n  args: {\r\n    data: [\r\n      ...sampleUsers.slice(0, 3),\r\n      // Add some users with very long content to demonstrate truncation\r\n      {\r\n        id: 11,\r\n        name: 'Alexandra Maximillian Constantine',\r\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\r\n        role: 'SuperAdmin',\r\n        status: 'active' as const,\r\n        joinDate: '2023-11-01',\r\n      },\r\n      {\r\n        id: 12,\r\n        name: 'Benjamin Christopher Wellington',\r\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\r\n        role: 'Editor',\r\n        status: 'pending' as const,\r\n        joinDate: '2023-12-15',\r\n      },\r\n    ],\r\n    columns: userColumnsWithSizing,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Advanced column sizing demonstration showing:\r\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\r\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\r\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\r\n- **Text truncation** with ellipsis (default when maxWidth is set)\r\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\r\n\r\nTry resizing the browser to see how columns behave with long content.`,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const WithColumnManagement: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 8,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\r\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\r\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\r\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\r\n- **Persistent State**: Selected columns are reflected with checkmarks\r\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\r\n\r\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"in_stock\" | \"low_stock\" | \"out_of_stock\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "Product",
            "id": "interface-Product-3c1729e4fe260f889e0178f3e0ade52fbf31cd071c26acb51c2b5154b2dbe36b6cda526af454c116d311f63afec57f54c175c13b1d2aebdc90c8259dfa5126ea-1",
            "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\r\nimport { signal } from '@angular/core';\r\nimport { DsEditableTableComponent, type DsEditableTableColumnMeta } from './ds-editable-table';\r\nimport { editableTextCell, editableNumberCell, editableSelectCell } from './editable-cell-helpers';\r\nimport { provideIcons } from '@ng-icons/core';\r\nimport { \r\n  remixAddLine,\r\n  remixDeleteBinLine,\r\n  remixDraggable,\r\n  remixInboxLine,\r\n  remixArrowUpLine,\r\n  remixArrowDownLine,\r\n} from '@ng-icons/remixicon';\r\nimport type { ColumnDef } from '@tanstack/angular-table';\r\n\r\n// Sample data types\r\ninterface InvoiceLine {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  discount: number;\r\n  total: number;\r\n}\r\n\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  sku: string;\r\n  category: string;\r\n  price: number;\r\n  stock: number;\r\n}\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  assignee: string;\r\n  priority: string;\r\n  status: string;\r\n  dueDate: string;\r\n}\r\n\r\n// Sample data\r\nconst sampleInvoiceLines: InvoiceLine[] = [\r\n  { \r\n    id: '1', \r\n    name: 'Administration fee', \r\n    description: 'Covers handling and coordination', \r\n    quantity: 1, \r\n    unitPrice: 500, \r\n    discount: 0, \r\n    total: 500 \r\n  },\r\n  { \r\n    id: '2', \r\n    name: 'Miscellaneous', \r\n    description: 'Various small items', \r\n    quantity: 2, \r\n    unitPrice: 400, \r\n    discount: 0, \r\n    total: 800 \r\n  },\r\n  { \r\n    id: '3', \r\n    name: 'Technical Manager', \r\n    description: 'Consulting services', \r\n    quantity: 6.5, \r\n    unitPrice: 800, \r\n    discount: 0, \r\n    total: 5200 \r\n  },\r\n];\r\n\r\nconst sampleProducts: Product[] = [\r\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\r\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\r\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\r\n];\r\n\r\nconst sampleTasks: Task[] = [\r\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\r\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\r\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\r\n];\r\n\r\n// Priority options for select\r\nconst priorityOptions = [\r\n  { id: 'low', label: 'Low', value: 'Low' },\r\n  { id: 'medium', label: 'Medium', value: 'Medium' },\r\n  { id: 'high', label: 'High', value: 'High' },\r\n];\r\n\r\n// Status options for select\r\nconst statusOptions = [\r\n  { id: 'todo', label: 'To Do', value: 'To Do' },\r\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\r\n  { id: 'done', label: 'Done', value: 'Done' },\r\n];\r\n\r\n// Category options for select\r\nconst categoryOptions = [\r\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\r\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\r\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\r\n  { id: 'office', label: 'Office', value: 'Office' },\r\n];\r\n\r\n// Column definitions\r\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'description',\r\n    header: 'Description',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Add description...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n        maxWidth: 'xl',\r\n        truncate: true,\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'quantity',\r\n    header: 'Quantity',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.5,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'unitPrice',\r\n    header: 'Unit Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'discount',\r\n    header: 'Discount',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'total',\r\n    header: 'Total',\r\n    cell: (info) => info.getValue(),\r\n    enableSorting: true,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst productColumns: ColumnDef<Product>[] = [\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter product name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'sku',\r\n    header: 'SKU',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'SKU-000'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: categoryOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 1,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst taskColumns: ColumnDef<Task>[] = [\r\n  {\r\n    accessorKey: 'title',\r\n    header: 'Task',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter task title...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'assignee',\r\n    header: 'Assignee',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Assign to...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'priority',\r\n    header: 'Priority',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: priorityOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: statusOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'dueDate',\r\n    header: 'Due Date',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst meta: Meta<DsEditableTableComponent> = {\r\n  title: 'Primitives/Editable Table',\r\n  component: DsEditableTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixDeleteBinLine,\r\n          remixDraggable,\r\n          remixInboxLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display and edit (two-way binding)',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    reorderable: {\r\n      control: 'boolean',\r\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\r\n    },\r\n    allowAddRow: {\r\n      control: 'boolean',\r\n      description: 'Allow adding new rows',\r\n    },\r\n    allowDeleteRow: {\r\n      control: 'boolean',\r\n      description: 'Allow deleting rows',\r\n    },\r\n    showDragHandle: {\r\n      control: 'boolean',\r\n      description: 'Show drag handle column (only when reorderable is true)',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    addRowButtonText: {\r\n      control: 'text',\r\n      description: 'Text for add row button',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsEditableTableComponent>;\r\n\r\nexport const InvoiceLinesReorderable: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceData: signal([...sampleInvoiceLines]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: 'Add description',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"invoiceData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [showDragHandle]=\"true\"\r\n        [addRowButtonText]=\"'Add invoice line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ProductsSortable: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      productData: signal([...sampleProducts]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        sku: '',\r\n        category: 'Electronics',\r\n        price: 0,\r\n        stock: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onSortingChanged: (sorting: any) => {\r\n        console.log('Sorting changed:', sorting);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"productData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add product'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (sortingChanged)=\"onSortingChanged($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const TasksWithSelects: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      taskData: signal([...sampleTasks]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        title: '',\r\n        assignee: '',\r\n        priority: 'Medium',\r\n        status: 'To Do',\r\n        dueDate: ''\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"taskData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add task'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: taskColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const EmptyState: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      emptyData: signal([]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: '',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('First row added:', row);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"emptyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [emptyMessage]=\"'No invoice lines yet'\"\r\n        [addRowButtonText]=\"'Add first line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const NoDeleteAllowed: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      lockedData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"lockedData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"false\"\r\n        [addRowButtonText]=\"'Add line'\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const NoDragHandle: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      noDragData: signal([...sampleProducts]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"noDragData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [showDragHandle]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ReadOnlyMode: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      readOnlyData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"readOnlyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"false\"\r\n        [allowDeleteRow]=\"false\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Product-1"
        },
        {
            "name": "Task",
            "id": "interface-Task-3c1729e4fe260f889e0178f3e0ade52fbf31cd071c26acb51c2b5154b2dbe36b6cda526af454c116d311f63afec57f54c175c13b1d2aebdc90c8259dfa5126ea",
            "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\r\nimport { signal } from '@angular/core';\r\nimport { DsEditableTableComponent, type DsEditableTableColumnMeta } from './ds-editable-table';\r\nimport { editableTextCell, editableNumberCell, editableSelectCell } from './editable-cell-helpers';\r\nimport { provideIcons } from '@ng-icons/core';\r\nimport { \r\n  remixAddLine,\r\n  remixDeleteBinLine,\r\n  remixDraggable,\r\n  remixInboxLine,\r\n  remixArrowUpLine,\r\n  remixArrowDownLine,\r\n} from '@ng-icons/remixicon';\r\nimport type { ColumnDef } from '@tanstack/angular-table';\r\n\r\n// Sample data types\r\ninterface InvoiceLine {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  discount: number;\r\n  total: number;\r\n}\r\n\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  sku: string;\r\n  category: string;\r\n  price: number;\r\n  stock: number;\r\n}\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  assignee: string;\r\n  priority: string;\r\n  status: string;\r\n  dueDate: string;\r\n}\r\n\r\n// Sample data\r\nconst sampleInvoiceLines: InvoiceLine[] = [\r\n  { \r\n    id: '1', \r\n    name: 'Administration fee', \r\n    description: 'Covers handling and coordination', \r\n    quantity: 1, \r\n    unitPrice: 500, \r\n    discount: 0, \r\n    total: 500 \r\n  },\r\n  { \r\n    id: '2', \r\n    name: 'Miscellaneous', \r\n    description: 'Various small items', \r\n    quantity: 2, \r\n    unitPrice: 400, \r\n    discount: 0, \r\n    total: 800 \r\n  },\r\n  { \r\n    id: '3', \r\n    name: 'Technical Manager', \r\n    description: 'Consulting services', \r\n    quantity: 6.5, \r\n    unitPrice: 800, \r\n    discount: 0, \r\n    total: 5200 \r\n  },\r\n];\r\n\r\nconst sampleProducts: Product[] = [\r\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\r\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\r\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\r\n];\r\n\r\nconst sampleTasks: Task[] = [\r\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\r\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\r\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\r\n];\r\n\r\n// Priority options for select\r\nconst priorityOptions = [\r\n  { id: 'low', label: 'Low', value: 'Low' },\r\n  { id: 'medium', label: 'Medium', value: 'Medium' },\r\n  { id: 'high', label: 'High', value: 'High' },\r\n];\r\n\r\n// Status options for select\r\nconst statusOptions = [\r\n  { id: 'todo', label: 'To Do', value: 'To Do' },\r\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\r\n  { id: 'done', label: 'Done', value: 'Done' },\r\n];\r\n\r\n// Category options for select\r\nconst categoryOptions = [\r\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\r\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\r\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\r\n  { id: 'office', label: 'Office', value: 'Office' },\r\n];\r\n\r\n// Column definitions\r\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'description',\r\n    header: 'Description',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Add description...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n        maxWidth: 'xl',\r\n        truncate: true,\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'quantity',\r\n    header: 'Quantity',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.5,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'unitPrice',\r\n    header: 'Unit Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'discount',\r\n    header: 'Discount',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'total',\r\n    header: 'Total',\r\n    cell: (info) => info.getValue(),\r\n    enableSorting: true,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst productColumns: ColumnDef<Product>[] = [\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter product name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'sku',\r\n    header: 'SKU',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'SKU-000'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: categoryOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 1,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst taskColumns: ColumnDef<Task>[] = [\r\n  {\r\n    accessorKey: 'title',\r\n    header: 'Task',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter task title...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'assignee',\r\n    header: 'Assignee',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Assign to...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'priority',\r\n    header: 'Priority',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: priorityOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: statusOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'dueDate',\r\n    header: 'Due Date',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst meta: Meta<DsEditableTableComponent> = {\r\n  title: 'Primitives/Editable Table',\r\n  component: DsEditableTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixDeleteBinLine,\r\n          remixDraggable,\r\n          remixInboxLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display and edit (two-way binding)',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    reorderable: {\r\n      control: 'boolean',\r\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\r\n    },\r\n    allowAddRow: {\r\n      control: 'boolean',\r\n      description: 'Allow adding new rows',\r\n    },\r\n    allowDeleteRow: {\r\n      control: 'boolean',\r\n      description: 'Allow deleting rows',\r\n    },\r\n    showDragHandle: {\r\n      control: 'boolean',\r\n      description: 'Show drag handle column (only when reorderable is true)',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    addRowButtonText: {\r\n      control: 'text',\r\n      description: 'Text for add row button',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsEditableTableComponent>;\r\n\r\nexport const InvoiceLinesReorderable: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceData: signal([...sampleInvoiceLines]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: 'Add description',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"invoiceData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [showDragHandle]=\"true\"\r\n        [addRowButtonText]=\"'Add invoice line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ProductsSortable: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      productData: signal([...sampleProducts]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        sku: '',\r\n        category: 'Electronics',\r\n        price: 0,\r\n        stock: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onSortingChanged: (sorting: any) => {\r\n        console.log('Sorting changed:', sorting);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"productData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add product'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (sortingChanged)=\"onSortingChanged($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const TasksWithSelects: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      taskData: signal([...sampleTasks]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        title: '',\r\n        assignee: '',\r\n        priority: 'Medium',\r\n        status: 'To Do',\r\n        dueDate: ''\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"taskData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add task'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: taskColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const EmptyState: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      emptyData: signal([]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: '',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('First row added:', row);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"emptyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [emptyMessage]=\"'No invoice lines yet'\"\r\n        [addRowButtonText]=\"'Add first line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const NoDeleteAllowed: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      lockedData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"lockedData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"false\"\r\n        [addRowButtonText]=\"'Add line'\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const NoDragHandle: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      noDragData: signal([...sampleProducts]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"noDragData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [showDragHandle]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ReadOnlyMode: Story = {\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      readOnlyData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"readOnlyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"false\"\r\n        [allowDeleteRow]=\"false\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n",
            "properties": [
                {
                    "name": "assignee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-c544befa7572faec55bd047213889d68dbe11173174b7b884da88613e69de99c1e25137a3c14106e96938d849814fe5a923bdd593c83b7ff1afc4a721802deab",
            "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\r\nimport { DsDataTableComponent, type DsDataTableColumnMeta } from './ds-data-table';\r\nimport { DsBadgeComponent } from '../badge/ds-badge';\r\nimport { provideIcons } from '@ng-icons/core';\r\nimport { \r\n  remixSearchLine,\r\n  remixLayoutColumnLine,\r\n  remixCloseLine,\r\n  remixArrowUpLine,\r\n  remixArrowDownLine,\r\n  remixArrowUpDownLine,\r\n  remixInboxLine,\r\n  remixArrowLeftSLine,\r\n  remixArrowRightSLine,\r\n  remixEyeLine,\r\n  remixEditLine,\r\n  remixDeleteBinLine,\r\n  remixLoader4Line,\r\n} from '@ng-icons/remixicon';\r\nimport type { ColumnDef } from '@tanstack/angular-table';\r\nimport { signal } from '@angular/core';\r\n\r\n// Sample data types\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  status: 'active' | 'inactive' | 'pending';\r\n  joinDate: string;\r\n}\r\n\r\ninterface Product {\r\n  id: number;\r\n  name: string;\r\n  category: string;\r\n  price: number;\r\n  stock: number;\r\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\r\n}\r\n\r\n// Sample data\r\nconst sampleUsers: User[] = [\r\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\r\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\r\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\r\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\r\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\r\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\r\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\r\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\r\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\r\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\r\n];\r\n\r\nconst sampleProducts: Product[] = [\r\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\r\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\r\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\r\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\r\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\r\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\r\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\r\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\r\n];\r\n\r\n// Column definitions\r\nconst userColumns: ColumnDef<User>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px\r\n        maxWidth: 'lg',  // 256px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        active: 'success',\r\n        inactive: 'grey',\r\n        pending: 'warning',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n];\r\n\r\nconst productColumns: ColumnDef<Product>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const price = info.getValue() as number;\r\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const stock = info.getValue() as number;\r\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\r\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        in_stock: 'success',\r\n        low_stock: 'warning',\r\n        out_of_stock: 'destructive',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      const label = status.replace('_', ' ').toUpperCase();\r\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\r\n    },\r\n  },\r\n];\r\n\r\n// Columns with actions\r\nconst userColumnsWithActions: ColumnDef<User>[] = [\r\n  ...userColumns,\r\n  {\r\n    id: 'actions',\r\n    header: 'Actions',\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      return `\r\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\r\n            title=\"Edit\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n            </svg>\r\n          </button>\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\r\n            title=\"Delete\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\r\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      `;\r\n    },\r\n  },\r\n];\r\n\r\nconst meta: Meta<DsDataTableComponent> = {\r\n  title: 'Primitives/Data Table',\r\n  component: DsDataTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixArrowUpDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n          remixEyeLine,\r\n          remixEditLine,\r\n          remixDeleteBinLine,\r\n          remixLoader4Line,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display in the table',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    searchable: {\r\n      control: 'boolean',\r\n      description: 'Enable global search functionality',\r\n    },\r\n    searchPlaceholder: {\r\n      control: 'text',\r\n      description: 'Placeholder text for search input',\r\n    },\r\n    paginated: {\r\n      control: 'boolean',\r\n      description: 'Enable pagination',\r\n    },\r\n    pageSize: {\r\n      control: 'number',\r\n      description: 'Number of rows per page',\r\n    },\r\n    showColumnVisibility: {\r\n      control: 'boolean',\r\n      description: 'Show column visibility toggle',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    rowClickable: {\r\n      control: 'boolean',\r\n      description: 'Make rows clickable',\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsDataTableComponent>;\r\n\r\nexport const Default: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const Products: Story = {\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    searchPlaceholder: 'Search products...',\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const WithActions: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n    rowClickable: false,\r\n  },\r\n};\r\n\r\nexport const WithoutSearch: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: false,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n};\r\n\r\nexport const WithoutPagination: Story = {\r\n  args: {\r\n    data: sampleUsers.slice(0, 5),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n};\r\n\r\nexport const LargeDataset: Story = {\r\n  args: {\r\n    data: Array.from({ length: 100 }, (_, i) => ({\r\n      id: i + 1,\r\n      name: `User ${i + 1}`,\r\n      email: `user${i + 1}@example.com`,\r\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\r\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\r\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\r\n    })),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    pageSizeOptions: [10, 25, 50, 100],\r\n    showColumnVisibility: true,\r\n  },\r\n};\r\n\r\nexport const EmptyState: Story = {\r\n  args: {\r\n    data: [],\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    emptyMessage: 'No users found',\r\n  },\r\n};\r\n\r\nexport const ClickableRows: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    rowClickable: true,\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      onRowClicked: (row: User) => {\r\n        alert(`Clicked on: ${row.name}`);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-data-table\r\n        [data]=\"data\"\r\n        [columns]=\"columns\"\r\n        [searchable]=\"searchable\"\r\n        [paginated]=\"paginated\"\r\n        [pageSize]=\"pageSize\"\r\n        [rowClickable]=\"rowClickable\"\r\n        (rowClicked)=\"onRowClicked($event)\"\r\n      />\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const CompactView: Story = {\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    showColumnVisibility: false,\r\n  },\r\n};\r\n\r\n// Column sizing example\r\nconst userColumnsWithSizing: ColumnDef<User>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px - narrow fixed width\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px minimum\r\n        maxWidth: 'lg',  // 256px maximum\r\n        truncate: true,  // Show ellipsis\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email Address (Very Long Header Name)',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: '300px', // Custom pixel value\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'xs',\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',\r\n        maxWidth: 'md',\r\n        truncate: false, // Allow wrapping instead of truncating\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const statusColors: Record<string, string> = {\r\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n      };\r\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n];\r\n\r\nexport const WithColumnSizing: Story = {\r\n  args: {\r\n    data: [\r\n      ...sampleUsers.slice(0, 3),\r\n      // Add some users with very long content to demonstrate truncation\r\n      {\r\n        id: 11,\r\n        name: 'Alexandra Maximillian Constantine',\r\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\r\n        role: 'SuperAdmin',\r\n        status: 'active' as const,\r\n        joinDate: '2023-11-01',\r\n      },\r\n      {\r\n        id: 12,\r\n        name: 'Benjamin Christopher Wellington',\r\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\r\n        role: 'Editor',\r\n        status: 'pending' as const,\r\n        joinDate: '2023-12-15',\r\n      },\r\n    ],\r\n    columns: userColumnsWithSizing,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Advanced column sizing demonstration showing:\r\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\r\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\r\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\r\n- **Text truncation** with ellipsis (default when maxWidth is set)\r\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\r\n\r\nTry resizing the browser to see how columns behave with long content.`,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const WithColumnManagement: Story = {\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 8,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\r\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\r\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\r\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\r\n- **Persistent State**: Selected columns are reflected with checkmarks\r\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\r\n\r\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"active\" | \"inactive\" | \"pending\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "DebugWrapperComponent",
            "id": "component-DebugWrapperComponent-4a76acdce0fd4360aaa2786d59ae6536ca083f6c2ea7cf2ae8ad6f7ab25a3c82354a9eb74c14407bd54db760a77991a43e813012ca321e5ad768f20c9014152f",
            "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ds-debug-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [isMobileOverride]=\"isMobileOverride\"\n  [isSidebarCollapsed]=\"isSidebarCollapsed\"\n  [pageTitle]=\"'Page Title'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n  [showFirstAction]=\"true\"\n  [firstActionIcon]=\"'remixNotification3Line'\"\n  [firstActionLabel]=\"'Notifications'\"\n  [showSecondAction]=\"true\"\n  [secondActionIcon]=\"'remixSettings3Line'\"\n  [secondActionLabel]=\"'Settings'\"\n  (menuOpenChange)=\"handleMenuOpenChange($event)\"\n  (collapsedChange)=\"handleCollapsedChange($event)\"\n>\n  <div style=\"padding: 24px;\">\n    <div style=\"max-width: 64rem; margin: 0 auto;\">\n      <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Main Content Area</h2>\n      <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This is where your main content would go. The layout handles the responsive behavior automatically.</p>\n\n      <div style=\"margin-bottom: 48px;\">\n        <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n          <span class=\"ui-sm-medium\">Debug Information</span>\n          <div style=\"margin-top: 16px;\">\n            <ds-data-item\n              [label]=\"'Window width'\"\n              [value]=\"windowWidth + 'px'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n            <ds-data-item\n              [label]=\"'Is Mobile'\"\n              [value]=\"isMobile() ? 'True' : 'False'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n            <ds-data-item\n              [label]=\"'Menu Open'\"\n              [value]=\"menuOpen ? 'True' : 'False'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n            <ds-data-item\n              [label]=\"'Sidebar Collapsed'\"\n              [value]=\"isSidebarCollapsed ? 'True' : 'False'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ds-app-layout>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isMobile",
                    "defaultValue": "computed(() => this.viewportService.isMobile())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "isMobileOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isSidebarCollapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "resizeTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidebarGroups",
                    "defaultValue": "demoGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "windowWidth",
                    "defaultValue": "typeof window !== 'undefined' ? window.innerWidth : 0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCollapsedChange",
                    "args": [
                        {
                            "name": "isCollapsed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isCollapsed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMenuOpenChange",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize'"
                        }
                    ],
                    "modifierKind": [
                        171
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "DsAppLayoutComponent",
                    "type": "component"
                },
                {
                    "name": "DsDataItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\r\nimport { Component, HostListener, OnDestroy, computed } from '@angular/core';\r\nimport { DsAppLayoutComponent } from './ds-app-layout';\r\nimport { DsDataItemComponent } from '../data-item/ds-data-item';\r\nimport { ViewportService } from '../../../lib/viewport.service';\r\nimport { demoGroups } from '../sidebar/demo-data';\r\n\r\n@Component({\r\n  selector: 'ds-debug-wrapper',\r\n  standalone: true,\r\n  imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n  // ViewportService is now provided at the module level\r\n  template: `\r\n    <ds-app-layout\r\n      [sidebarGroups]=\"sidebarGroups\"\r\n      [isMobileOverride]=\"isMobileOverride\"\r\n      [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n      [pageTitle]=\"'Page Title'\"\r\n      [iconName]=\"'remixHome4Line'\"\r\n      [userInitials]=\"'JD'\"\r\n      [showFirstAction]=\"true\"\r\n      [firstActionIcon]=\"'remixNotification3Line'\"\r\n      [firstActionLabel]=\"'Notifications'\"\r\n      [showSecondAction]=\"true\"\r\n      [secondActionIcon]=\"'remixSettings3Line'\"\r\n      [secondActionLabel]=\"'Settings'\"\r\n      (menuOpenChange)=\"handleMenuOpenChange($event)\"\r\n      (collapsedChange)=\"handleCollapsedChange($event)\"\r\n    >\r\n      <div style=\"padding: 24px;\">\r\n        <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n          <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Main Content Area</h2>\r\n          <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This is where your main content would go. The layout handles the responsive behavior automatically.</p>\r\n          \r\n          <div style=\"margin-bottom: 48px;\">\r\n            <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n              <span class=\"ui-sm-medium\">Debug Information</span>\r\n              <div style=\"margin-top: 16px;\">\r\n                <ds-data-item \r\n                  [label]=\"'Window width'\" \r\n                  [value]=\"windowWidth + 'px'\" \r\n                  [layout]=\"'horizontal'\" \r\n                  [valueType]=\"'text'\"\r\n                ></ds-data-item>\r\n                <ds-data-item \r\n                  [label]=\"'Is Mobile'\" \r\n                  [value]=\"isMobile() ? 'True' : 'False'\" \r\n                  [layout]=\"'horizontal'\" \r\n                  [valueType]=\"'text'\"\r\n                ></ds-data-item>\r\n                <ds-data-item \r\n                  [label]=\"'Menu Open'\" \r\n                  [value]=\"menuOpen ? 'True' : 'False'\" \r\n                  [layout]=\"'horizontal'\" \r\n                  [valueType]=\"'text'\"\r\n                ></ds-data-item>\r\n                <ds-data-item \r\n                  [label]=\"'Sidebar Collapsed'\" \r\n                  [value]=\"isSidebarCollapsed ? 'True' : 'False'\" \r\n                  [layout]=\"'horizontal'\" \r\n                  [valueType]=\"'text'\"\r\n                ></ds-data-item>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ds-app-layout>\r\n  `\r\n})\r\nclass DebugWrapperComponent implements OnDestroy {\r\n  sidebarGroups = demoGroups;\r\n  isMobileOverride?: boolean;\r\n  isSidebarCollapsed = false;\r\n  windowWidth = typeof window !== 'undefined' ? window.innerWidth : 0;\r\n  menuOpen = false;\r\n\r\n  constructor(private viewportService: ViewportService) {}\r\n\r\n  isMobile = computed(() => this.viewportService.isMobile());\r\n\r\n  private resizeTimeout: any;\r\n\r\n  @HostListener('window:resize')\r\n  onResize() {\r\n    // Debounce resize updates\r\n    if (this.resizeTimeout) {\r\n      clearTimeout(this.resizeTimeout);\r\n    }\r\n    this.resizeTimeout = setTimeout(() => {\r\n      this.windowWidth = window.innerWidth;\r\n    }, 100);\r\n  }\r\n\r\n  handleMenuOpenChange(isOpen: boolean) {\r\n    this.menuOpen = isOpen;\r\n  }\r\n\r\n  handleCollapsedChange(isCollapsed: boolean) {\r\n    this.isSidebarCollapsed = isCollapsed;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.resizeTimeout) {\r\n      clearTimeout(this.resizeTimeout);\r\n    }\r\n  }\r\n}\r\n\r\nconst meta: Meta<DsAppLayoutComponent> = {\r\n  title: 'Application shell/App Layout',\r\n  component: DsAppLayoutComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DebugWrapperComponent],\r\n      providers: [ViewportService]\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe main application layout component that provides a responsive shell with sidebar navigation, topbar, and content area. Automatically adapts between mobile and desktop modes based on viewport size.\r\n\r\n## Features\r\n\r\n- **Responsive Design**: Automatically switches between mobile drawer and desktop sidebar at 992px breakpoint\r\n- **Collapsible Sidebar**: Desktop sidebar can be collapsed from 256px to 80px width\r\n- **Mobile Drawer**: Slide-in navigation drawer with overlay on mobile devices\r\n- **Sticky Topbar**: Page header remains visible while scrolling content\r\n- **Integrated Subcomponents**: Both sidebar and topbar are automatically rendered and configured via props\r\n- **Content Projection**: Default slot for main page content\r\n- **Smooth Transitions**: Animated sidebar collapse/expand and mobile drawer\r\n- **Viewport Service**: Automatic mobile detection or manual override for testing\r\n\r\n## Architecture\r\n\r\nThe component automatically renders both **sidebar** and **topbar** - you don't need to project them as children. Just configure them via props and project your main content.\r\n\r\n### Built-in Subcomponents\r\n\r\n1. **Sidebar** - Navigation component (always rendered)\r\n2. **Topbar** - Page header component (always rendered)\r\n3. **Main Content** - Your page content (via default slot)\r\n\r\n## Content Projection\r\n\r\nThe component has a **single default slot** for main page content:\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"groups\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n  [iconName]=\"'remixHome4Line'\"\r\n  [userInitials]=\"'JD'\"\r\n>\r\n  <!-- Your main content goes here -->\r\n  <div class=\"content-container\">\r\n    <h1>Page Content</h1>\r\n  </div>\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n## Props\r\n\r\n### Sidebar Configuration\r\n- \\`sidebarGroups\\`: Array of navigation groups with items\r\n- \\`isSidebarCollapsed\\`: Control collapsed state (desktop only)\r\n- \\`activeItemId\\`: Currently active navigation item\r\n\r\n**Group Structure:**\r\n\\`\\`\\`typescript\r\n{\r\n  id: 'group-id',\r\n  label: 'GROUP LABEL',\r\n  items: [\r\n    { \r\n      id: 'item-id', \r\n      label: 'Item Label', \r\n      icon: 'remixIconName',\r\n      badgeText?: '5' // Optional badge\r\n    }\r\n  ]\r\n}\r\n\\`\\`\\`\r\n\r\n### Topbar Configuration\r\n- \\`pageTitle\\`: The page title text\r\n- \\`iconName\\`: Icon to display next to the title\r\n- \\`userInitials\\`: User avatar initials\r\n- \\`showBreadcrumbs\\`: Enable breadcrumb navigation (default: false)\r\n- \\`breadcrumbItems\\`: Array of breadcrumb items\r\n- \\`showFirstAction\\`: Show first action button (default: true)\r\n- \\`firstActionIcon\\`: Icon for first action (default: 'remixNotification3Line')\r\n- \\`firstActionLabel\\`: Aria label for first action (default: 'Notifications')\r\n- \\`showSecondAction\\`: Show second action button (default: true)\r\n- \\`secondActionIcon\\`: Icon for second action (default: 'remixSettings3Line')\r\n- \\`secondActionLabel\\`: Aria label for second action (default: 'Settings')\r\n\r\n### Layout Configuration\r\n- \\`isMobileOverride\\`: Override automatic mobile detection for testing\r\n\r\n## Events\r\n\r\n- \\`(collapsedChange)\\`: Emits when desktop sidebar is collapsed/expanded\r\n- \\`(menuOpenChange)\\`: Emits when mobile drawer is opened/closed\r\n\r\n## Layout Behavior\r\n\r\n### Desktop Mode (≥ 992px)\r\n- Persistent sidebar on the left (256px expanded, 80px collapsed)\r\n- Grid layout: \\`auto minmax(0, 1fr)\\`\r\n- Sidebar collapse toggle available\r\n- Main content adjusts width automatically\r\n\r\n### Mobile Mode (< 992px)\r\n- Minimized sidebar header (64px height) at the top\r\n- Hamburger menu button to open drawer\r\n- Full sidebar appears as overlay drawer from left\r\n- Semi-transparent backdrop overlay\r\n- Body scroll locked when drawer is open\r\n\r\n## Usage Example\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"sidebarGroups\"\r\n  [isSidebarCollapsed]=\"isSidebarCollapsed()\"\r\n  [activeItemId]=\"'dashboard'\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n  [iconName]=\"'remixHome4Line'\"\r\n  [userInitials]=\"'JD'\"\r\n  [showFirstAction]=\"true\"\r\n  [firstActionIcon]=\"'remixNotification3Line'\"\r\n  [showSecondAction]=\"true\"\r\n  [secondActionIcon]=\"'remixSettings3Line'\"\r\n  (collapsedChange)=\"isSidebarCollapsed.set($event)\"\r\n>\r\n  <!-- Main Content -->\r\n  <div class=\"content-container\">\r\n    <h1>Page Content</h1>\r\n    <p>Your content goes here...</p>\r\n  </div>\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n### With Breadcrumbs\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"sidebarGroups\"\r\n  [pageTitle]=\"'Property Details'\"\r\n  [iconName]=\"'remixBuilding2Line'\"\r\n  [showBreadcrumbs]=\"true\"\r\n  [breadcrumbItems]=\"[\r\n    { label: 'Properties', path: '/properties', isLast: false },\r\n    { label: 'Fælledgården Hub', path: '', isLast: true }\r\n  ]\"\r\n  [userInitials]=\"'JD'\"\r\n>\r\n  <!-- Content here -->\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n## Viewport Testing\r\n\r\nUse the viewport toolbar above to test different screen sizes, or use the \\`isMobileOverride\\` prop to force mobile/desktop mode:\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [isMobileOverride]=\"false\"  <!-- Force desktop mode -->\r\n  [sidebarGroups]=\"groups\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n    layout: 'fullscreen',\r\n    // Add viewport toolbar to allow easy resizing\r\n    viewport: {\r\n      defaultViewport: 'desktop',\r\n      viewports: {\r\n        mobile: {\r\n          name: 'Mobile',\r\n          styles: {\r\n            width: '375px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        tablet: {\r\n          name: 'Tablet',\r\n          styles: {\r\n            width: '768px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        desktop: {\r\n          name: 'Desktop',\r\n          styles: {\r\n            width: '1024px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        'large-desktop': {\r\n          name: 'Large Desktop',\r\n          styles: {\r\n            width: '1440px',\r\n            height: '100%',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<DsAppLayoutComponent>;\r\n\r\nexport const Default: Story = {\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isSidebarCollapsed: false,\r\n  },\r\n  render: () => ({\r\n    template: '<ds-debug-wrapper></ds-debug-wrapper>'\r\n  })\r\n};\r\n\r\nexport const InitiallyCollapsed: Story = {\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isMobileOverride: false, // Force desktop mode\r\n    isSidebarCollapsed: true,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Initially Collapsed'\"\r\n        [iconName]=\"'remixHome4Line'\"\r\n        [userInitials]=\"'JD'\"\r\n        [showFirstAction]=\"true\"\r\n        [firstActionIcon]=\"'remixNotification3Line'\"\r\n        [firstActionLabel]=\"'Notifications'\"\r\n        [showSecondAction]=\"true\"\r\n        [secondActionIcon]=\"'remixSettings3Line'\"\r\n        [secondActionLabel]=\"'Settings'\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Initially Collapsed Sidebar</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story demonstrates the sidebar starting in a collapsed state on desktop. Users can expand it using the collapse toggle button.</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Is Mobile'\" \r\n                    [value]=\"'False (Desktop mode forced)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Sidebar Collapsed'\" \r\n                    [value]=\"'True'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Note'\" \r\n                    [value]=\"'Click the collapse toggle to expand the sidebar'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n};\r\n\r\n// Debug story to test topbar in isolation\r\nexport const AutoResponsive: Story = {\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    // No isMobileOverride - let ViewportService handle automatic detection\r\n    isSidebarCollapsed: false,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Auto Responsive'\"\r\n        [iconName]=\"'remixSmartphoneLine'\"\r\n        [userInitials]=\"'AR'\"\r\n        [showFirstAction]=\"true\"\r\n        [firstActionIcon]=\"'remixNotification3Line'\"\r\n        [firstActionLabel]=\"'Notifications'\"\r\n        [showSecondAction]=\"true\"\r\n        [secondActionIcon]=\"'remixSettings3Line'\"\r\n        [secondActionLabel]=\"'Settings'\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Auto-Responsive Layout</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This layout automatically detects your viewport size and switches between mobile and desktop modes at 992px breakpoint. Try resizing your browser window or using the viewport toolbar!</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Breakpoint'\" \r\n                    [value]=\"'992px'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Mobile Mode'\" \r\n                    [value]=\"'≤ 991px (drawer menu)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Desktop Mode'\" \r\n                    [value]=\"'≥ 992px (persistent sidebar)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Detection'\" \r\n                    [value]=\"'Automatic via ViewportService'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n};\r\n\r\nexport const TopbarDebug: Story = {\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isMobileOverride: false, // Force desktop mode\r\n    isSidebarCollapsed: false,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Debug Page'\"\r\n        [iconName]=\"'remixHome4Line'\"\r\n        [userInitials]=\"'DB'\"\r\n        [showFirstAction]=\"false\"\r\n        [showSecondAction]=\"false\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Topbar Debug</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story tests the topbar component with minimal props to ensure it renders correctly in the app layout.</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Topbar Slot'\" \r\n                    [value]=\"'Using slot=topbar attribute'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'First Action'\" \r\n                    [value]=\"'Hidden (showFirstAction=false)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Second Action'\" \r\n                    [value]=\"'Hidden (showSecondAction=false)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n};",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewportService",
                        "type": "ViewportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "viewportService",
                        "type": "ViewportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ]
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "ActionMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    items: [\r\n      { id: '1', label: 'View Details', icon: 'remixEyeLine' },\r\n      { id: '2', label: 'Edit Properties', icon: 'remixEditLine' },\r\n      { id: 'sep1', label: '', separator: true },\r\n      { id: '3', label: 'Make a Copy', icon: 'remixFileCopyLine' },\r\n      { id: '4', label: 'Move to...', icon: 'remixFolderTransferLine' },\r\n      { id: '5', label: 'Add to Favorites', icon: 'remixStarLine' },\r\n      { id: 'sep2', label: '', separator: true },\r\n      { id: '6', label: 'Remove', icon: 'remixDeleteBinLine', destructive: true },\r\n    ],\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-icon-button icon=\"remixMore2Line\" variant=\"ghost\" ariaLabel=\"Item actions\" />\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsIconButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "ActiveItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    activeItemId: 'inbox' \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [activeItemId]=\"activeItemId\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AIProcessing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Training AI model',\r\n      'Processing historical data',\r\n      'Generating predictions',\r\n      'Optimizing results',\r\n    ],\r\n    styleClass: 'body-sm-regular',\r\n  },\r\n}"
            },
            {
                "name": "AIVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\r\n          <span>Generate suggestions</span>\r\n        </ds-button>\r\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\r\n          <span>Generate suggestions</span>\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AllColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\r\n        <ds-spinner color=\"primary\" />\r\n        <ds-spinner color=\"secondary\" />\r\n        <ds-spinner color=\"tertiary\" />\r\n        <ds-spinner color=\"brand\" />\r\n        <ds-spinner color=\"success\" />\r\n        <ds-spinner color=\"warning\" />\r\n        <ds-spinner color=\"destructive\" />\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "AllColorVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <h3 style=\"margin: 0; font-size: 16px; font-weight: 600;\">All Badge Color Variants</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; max-width: 600px;\">\r\n          <ds-badge content=\"Default\" variant=\"default\"></ds-badge>\r\n          <ds-badge content=\"Brand\" variant=\"brand\"></ds-badge>\r\n          <ds-badge content=\"Success\" variant=\"success\"></ds-badge>\r\n          <ds-badge content=\"Warning\" variant=\"warning\"></ds-badge>\r\n          <ds-badge content=\"Destructive\" variant=\"destructive\"></ds-badge>\r\n          <ds-badge content=\"Blue\" variant=\"blue\"></ds-badge>\r\n          <ds-badge content=\"Light Purple\" variant=\"light-purple\"></ds-badge>\r\n          <ds-badge content=\"Pink\" variant=\"pink\"></ds-badge>\r\n          <ds-badge content=\"Salmon Orange\" variant=\"salmon-orange\"></ds-badge>\r\n          <ds-badge content=\"Orange\" variant=\"orange\"></ds-badge>\r\n          <ds-badge content=\"Lime Green\" variant=\"lime-green\"></ds-badge>\r\n          <ds-badge content=\"Grey\" variant=\"grey\"></ds-badge>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AllShapes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Shape Variants (8x8px)</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\" label=\"Stage tags\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"triangle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"pentagon\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AllSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\r\n        <ds-spinner size=\"12px\" />\r\n        <ds-spinner size=\"16px\" />\r\n        <ds-spinner size=\"20px\" />\r\n        <ds-spinner size=\"24px\" />\r\n        <ds-spinner size=\"32px\" />\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "AllSizesAndVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 24px;\">\r\n        <div>\r\n          <h4>Small Size</h4>\r\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\r\n            <ds-checkbox size=\"sm\" variant=\"default\" label=\"Default small\"></ds-checkbox>\r\n            <ds-checkbox size=\"sm\" variant=\"success\" label=\"Success small\"></ds-checkbox>\r\n            <ds-checkbox size=\"sm\" variant=\"warning\" label=\"Warning small\"></ds-checkbox>\r\n            <ds-checkbox size=\"sm\" variant=\"error\" label=\"Error small\"></ds-checkbox>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h4>Medium Size</h4>\r\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\r\n            <ds-checkbox size=\"md\" variant=\"default\" label=\"Default medium\"></ds-checkbox>\r\n            <ds-checkbox size=\"md\" variant=\"success\" label=\"Success medium\"></ds-checkbox>\r\n            <ds-checkbox size=\"md\" variant=\"warning\" label=\"Warning medium\"></ds-checkbox>\r\n            <ds-checkbox size=\"md\" variant=\"error\" label=\"Error medium\"></ds-checkbox>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h4>Large Size</h4>\r\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\r\n            <ds-checkbox size=\"lg\" variant=\"default\" label=\"Default large\"></ds-checkbox>\r\n            <ds-checkbox size=\"lg\" variant=\"success\" label=\"Success large\"></ds-checkbox>\r\n            <ds-checkbox size=\"lg\" variant=\"warning\" label=\"Warning large\"></ds-checkbox>\r\n            <ds-checkbox size=\"lg\" variant=\"error\" label=\"Error large\"></ds-checkbox>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AllTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 2rem; align-items: start; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Initials (Always Round)</h3>\r\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\r\n            <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\r\n            <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\r\n            <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\r\n            <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Photo (Always Round)</h3>\r\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"sm\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"md\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"lg\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"xl\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Icon (Brand Background + Depth)</h3>\r\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\r\n            <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n            <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n            <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n            <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          </div>\r\n          <div style=\"font-size: 12px; color: var(--text-color-default-secondary);\">\r\n            6px → 8px → 12px → 16px radius<br/>\r\n            depth-sm → depth-sm → depth-md → depth-lg\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AllVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 600px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Success\">\r\n          A short description\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"error\" title=\"Error\">\r\n          A short description\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"warning\" title=\"Warning\">\r\n          A short description\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"information\" title=\"Information\">\r\n          A short description\r\n        </ds-inline-message>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "AutoResponsive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    // No isMobileOverride - let ViewportService handle automatic detection\r\n    isSidebarCollapsed: false,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Auto Responsive'\"\r\n        [iconName]=\"'remixSmartphoneLine'\"\r\n        [userInitials]=\"'AR'\"\r\n        [showFirstAction]=\"true\"\r\n        [firstActionIcon]=\"'remixNotification3Line'\"\r\n        [firstActionLabel]=\"'Notifications'\"\r\n        [showSecondAction]=\"true\"\r\n        [secondActionIcon]=\"'remixSettings3Line'\"\r\n        [secondActionLabel]=\"'Settings'\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Auto-Responsive Layout</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This layout automatically detects your viewport size and switches between mobile and desktop modes at 992px breakpoint. Try resizing your browser window or using the viewport toolbar!</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Breakpoint'\" \r\n                    [value]=\"'992px'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Mobile Mode'\" \r\n                    [value]=\"'≤ 991px (drawer menu)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Desktop Mode'\" \r\n                    [value]=\"'≥ 992px (persistent sidebar)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Detection'\" \r\n                    [value]=\"'Automatic via ViewportService'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list/ds-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-list>\r\n        <ds-list-item title=\"Review documentation changes\">\r\n          <div slot=\"metadata\">\r\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n            <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\r\n          </div>\r\n        </ds-list-item>\r\n        <ds-list-item title=\"Update user settings\">\r\n          <div slot=\"metadata\">\r\n            <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to you\" />\r\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"1 day ago\" />\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n            <ds-button variant=\"primary\" size=\"sm\">Update</ds-button>\r\n          </div>\r\n        </ds-list-item>\r\n        <ds-list-item title=\"Deploy new features\">\r\n          <div slot=\"metadata\">\r\n            <ds-metadata-item icon=\"remixRocketLine\" value=\"Release\" variant=\"success\" />\r\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n            <ds-button variant=\"primary\" size=\"sm\">Deploy</ds-button>\r\n          </div>\r\n        </ds-list-item>\r\n      </ds-list>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    title: 'Review documentation changes',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    icon: 'remixTimeLine',\r\n    value: '4 hours ago',\r\n  },\r\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      value: signal('tab1'),\r\n    },\r\n    template: `\r\n      <ds-tabs [(value)]=\"value\">\r\n        <ds-tab value=\"tab1\" label=\"First Tab\">\r\n          <p>Content for first tab</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"tab2\" label=\"Second Tab\">\r\n          <p>Content for second tab</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"tab3\" label=\"Third Tab\">\r\n          <p>Content for third tab</p>\r\n        </ds-tab>\r\n      </ds-tabs>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "basicMenuItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsMenuItem[]",
                "defaultValue": "[\r\n  { id: '1', label: 'Edit', action: () => console.log('Edit clicked') },\r\n  { id: '2', label: 'Duplicate', action: () => console.log('Duplicate clicked') },\r\n  { id: '3', label: 'Archive', action: () => console.log('Archive clicked') },\r\n  { id: 'sep1', label: '', separator: true },\r\n  { id: '4', label: 'Delete', destructive: true, action: () => console.log('Delete clicked') },\r\n]"
            },
            {
                "name": "ButtonSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-tooltip text=\"Small button tooltip\">\r\n          <ds-button size=\"sm\" variant=\"primary\">Small</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Medium button tooltip\">\r\n          <ds-button size=\"md\" variant=\"secondary\">Medium</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Large button tooltip\">\r\n          <ds-button size=\"lg\" variant=\"ghost\">Large</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "categoryOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\r\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\r\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\r\n  { id: 'office', label: 'Office', value: 'Office' },\r\n]"
            },
            {
                "name": "Circle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    shape: 'circle',\r\n    variant: 'brand',\r\n    label: 'Received',\r\n  },\r\n}"
            },
            {
                "name": "Clearable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { clearable: true, placeholder: 'Type to see clear button' },\r\n}"
            },
            {
                "name": "ClickableRows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    rowClickable: true,\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      onRowClicked: (row: User) => {\r\n        alert(`Clicked on: ${row.name}`);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-data-table\r\n        [data]=\"data\"\r\n        [columns]=\"columns\"\r\n        [searchable]=\"searchable\"\r\n        [paginated]=\"paginated\"\r\n        [pageSize]=\"pageSize\"\r\n        [rowClickable]=\"rowClickable\"\r\n        (rowClicked)=\"onRowClicked($event)\"\r\n      />\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Collapsed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    collapsed: true \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [collapsed]=\"collapsed\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "CollapsedWithGlobalAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    collapsed: true, \r\n    showGlobalAction: true, \r\n    globalActionLabel: 'Create New', \r\n    globalActionIcon: 'remixAddLine' \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar \r\n          [groups]=\"groups\" \r\n          [collapsed]=\"collapsed\" \r\n          [showGlobalAction]=\"showGlobalAction\" \r\n          [globalActionLabel]=\"globalActionLabel\" \r\n          [globalActionIcon]=\"globalActionIcon\" \r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Colors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n        <div style=\"display: flex; align-items: center; gap: 16px;\">\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"primary\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"secondary\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"tertiary\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"brand\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"success\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"warning\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"destructive\"></ds-icon>\r\n        </div>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "ColorTest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px; padding: 20px;\">\r\n        <!-- Test 1: Hardcoded colors for reference -->\r\n        <div>\r\n          <h4>Reference Colors (hardcoded)</h4>\r\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\r\n            <div style=\"color: #202227;\">■ primary (#202227)</div>\r\n            <div style=\"color: #545B66;\">■ secondary (#545B66)</div>\r\n            <div style=\"color: #626B78;\">■ tertiary (#626B78)</div>\r\n            <div style=\"color: #6B5FF5;\">■ brand (#6B5FF5)</div>\r\n            <div style=\"color: #158452;\">■ success (#158452)</div>\r\n            <div style=\"color: #d97706;\">■ warning (#d97706)</div>\r\n            <div style=\"color: #dc2626;\">■ destructive (#dc2626)</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Test 2: Our icon component -->\r\n        <div>\r\n          <h4>Icon Component Colors</h4>\r\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"primary\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"secondary\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"tertiary\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"brand\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"success\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"warning\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"destructive\"></ds-icon>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Test 3: Custom colors that bypass CSS classes -->\r\n        <div>\r\n          <h4>Custom Colors (bypass CSS)</h4>\r\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#202227\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#545B66\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#626B78\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#6B5FF5\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#158452\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#d97706\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#dc2626\"></ds-icon>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "ColorVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Color Variants</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center; max-width: 600px;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"default\" label=\"Default\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Brand\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"success\" label=\"Success\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"warning\" label=\"Warning\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"destructive\" label=\"Destructive\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Blue\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"light-purple\" label=\"Light Purple\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"pink\" label=\"Pink\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"salmon-orange\" label=\"Salmon Orange\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"orange\" label=\"Orange\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"lime-green\" label=\"Lime Green\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"grey\" label=\"Grey\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "ColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Name', value: 'name' },\r\n      { id: '2', label: 'Email', value: 'email' },\r\n      { id: '3', label: 'Role', value: 'role' },\r\n      { id: '4', label: 'Status', value: 'status' },\r\n      { id: '5', label: 'Join Date', value: 'joinDate' },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-icon-button icon=\"remixSettings3Line\" variant=\"ghost\" ariaLabel=\"Select columns\" />\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "CommonUseCases",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <!-- Status indicators -->\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Status Indicators</h3>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item\r\n              icon=\"remixSparklingFill\"\r\n              value=\"Important\"\r\n              tooltip=\"High priority item\"\r\n            />\r\n            <ds-metadata-item\r\n              icon=\"remixCheckLine\"\r\n              value=\"Verified\"\r\n              tooltip=\"Verified by system\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Time-related -->\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Time Information</h3>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item\r\n              icon=\"remixTimeLine\"\r\n              value=\"4 hours ago\"\r\n            />\r\n            <ds-metadata-item\r\n              icon=\"remixCalendarLine\"\r\n              value=\"Due tomorrow\"\r\n              tooltip=\"Due on March 15, 2024\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Data sources -->\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Data Sources</h3>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item\r\n              icon=\"remixSurveyLine\"\r\n              value=\"Based on 12 inquiries\"\r\n              tooltip=\"Data from recent customer interactions\"\r\n            />\r\n            <ds-metadata-item\r\n              icon=\"remixDatabaseLine\"\r\n              value=\"System generated\"\r\n              tooltip=\"Generated by AI analysis\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
            },
            {
                "name": "CompactView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    showColumnVisibility: false,\r\n  },\r\n}"
            },
            {
                "name": "Complete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    title: 'Inspect for signs of leaks or dampness',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixAlertLine\" value=\"Important\" variant=\"warning\" />\r\n          <ds-metadata-item icon=\"remixTeamLine\" value=\"Based on 12 inquiries\" />\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\r\n        </div>\r\n        <div slot=\"actions\">\r\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n          <ds-button variant=\"primary\" size=\"sm\">Create task</ds-button>\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "ComplexExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      invoiceLines: sampleInvoiceLines,\r\n      invoiceColumns: invoiceColumns,\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <ds-tile orientation=\"vertical\">\r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>\r\n                <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\r\n                Invoice #INV-2024-001\r\n              </header-title>\r\n              <header-actions>\r\n                <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Download</ds-button>\r\n                <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\r\n              <ds-data-item label=\"Client\" value=\"Acme Corporation\" layout=\"vertical\" />\r\n              <ds-data-item label=\"Issue Date\" value=\"2024-03-01\" layout=\"vertical\" />\r\n              <ds-data-item label=\"Due Date\" value=\"2024-03-31\" layout=\"vertical\" />\r\n              <ds-data-item \r\n                label=\"Status\" \r\n                value=\"Pending\" \r\n                valueType=\"badge\"\r\n                layout=\"vertical\"\r\n                badgeVariant=\"warning\"\r\n                badgeContent=\"Pending\" />\r\n            </div>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section [padding]=\"false\">\r\n            <ds-data-table \r\n              [data]=\"invoiceLines\" \r\n              [columns]=\"invoiceColumns\"\r\n              [searchable]=\"false\"\r\n              [showColumnVisibility]=\"false\"\r\n              [paginated]=\"false\">\r\n            </ds-data-table>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section>\r\n            <div style=\"display: flex; justify-content: flex-end; gap: 8px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Subtotal\" \r\n                  value=\"$4,598.83\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'ui-xs-regular'\"\r\n                  [valueClassName]=\"'ui-lg-medium'\" />\r\n              </div>\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Tax (10%)\" \r\n                  value=\"$459.88\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'ui-xs-regular'\"\r\n                  [valueClassName]=\"'ui-lg-medium'\" />\r\n              </div>\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Total\" \r\n                  value=\"$5,058.71\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'body-sm-semibold'\"\r\n                  [valueClassName]=\"'ui-lg-medium tw-text-brand'\" />\r\n              </div>\r\n            </div>\r\n          </ds-tile-section>\r\n        </ds-tile>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "ContentTypeComparison",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Text Only</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n            <ds-badge content=\"Default\" contentType=\"text\" variant=\"default\"></ds-badge>\r\n            <ds-badge content=\"Brand\" contentType=\"text\" variant=\"brand\"></ds-badge>\r\n            <ds-badge content=\"Success\" contentType=\"text\" variant=\"success\"></ds-badge>\r\n            <ds-badge content=\"Warning\" contentType=\"text\" variant=\"warning\"></ds-badge>\r\n            <ds-badge content=\"Destructive\" contentType=\"text\" variant=\"destructive\"></ds-badge>\r\n            <ds-badge content=\"Blue\" contentType=\"text\" variant=\"blue\"></ds-badge>\r\n            <ds-badge content=\"Light Purple\" contentType=\"text\" variant=\"light-purple\"></ds-badge>\r\n            <ds-badge content=\"Pink\" contentType=\"text\" variant=\"pink\"></ds-badge>\r\n            <ds-badge content=\"Salmon Orange\" contentType=\"text\" variant=\"salmon-orange\"></ds-badge>\r\n            <ds-badge content=\"Orange\" contentType=\"text\" variant=\"orange\"></ds-badge>\r\n            <ds-badge content=\"Lime Green\" contentType=\"text\" variant=\"lime-green\"></ds-badge>\r\n            <ds-badge content=\"Grey\" contentType=\"text\" variant=\"grey\"></ds-badge>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icon + Text</h3>\r\n          <div style=\"display: flex; gap: 8px;\">\r\n            <ds-badge content=\"Feature\" contentType=\"icon-text\" leadingIcon=\"remixStarLine\" variant=\"default\"></ds-badge>\r\n            <ds-badge content=\"Premium\" contentType=\"icon-text\" leadingIcon=\"remixStarFill\" variant=\"brand\"></ds-badge>\r\n            <ds-badge content=\"Verified\" contentType=\"icon-text\" leadingIcon=\"remixCheckboxCircleFill\" variant=\"success\"></ds-badge>\r\n            <ds-badge content=\"Alert\" contentType=\"icon-text\" leadingIcon=\"remixAlertFill\" variant=\"warning\"></ds-badge>\r\n            <ds-badge content=\"Error\" contentType=\"icon-text\" leadingIcon=\"remixErrorWarningFill\" variant=\"destructive\"></ds-badge>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Indicator + Text (Always white background)</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n            <ds-badge content=\"Default\" contentType=\"indicator-text\" variant=\"default\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Brand\" contentType=\"indicator-text\" variant=\"brand\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Success\" contentType=\"indicator-text\" variant=\"success\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Warning\" contentType=\"indicator-text\" variant=\"warning\" indicatorShape=\"triangle\"></ds-badge>\r\n            <ds-badge content=\"Destructive\" contentType=\"indicator-text\" variant=\"destructive\" indicatorShape=\"square\"></ds-badge>\r\n            <ds-badge content=\"Blue\" contentType=\"indicator-text\" variant=\"blue\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Light Purple\" contentType=\"indicator-text\" variant=\"light-purple\" indicatorShape=\"diamond\"></ds-badge>\r\n            <ds-badge content=\"Pink\" contentType=\"indicator-text\" variant=\"pink\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Salmon Orange\" contentType=\"indicator-text\" variant=\"salmon-orange\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Orange\" contentType=\"indicator-text\" variant=\"orange\" indicatorShape=\"triangle\"></ds-badge>\r\n            <ds-badge content=\"Lime Green\" contentType=\"indicator-text\" variant=\"lime-green\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Grey\" contentType=\"indicator-text\" variant=\"grey\" indicatorShape=\"circle\"></ds-badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "CustomContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    ariaLabel: 'Star item'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-icon-button [variant]=\"variant\" [size]=\"size\" [ariaLabel]=\"ariaLabel\">\r\n        <ds-icon name=\"remixStarFill\" />\r\n      </ds-icon-button>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsIconComponent]\r\n    }\r\n  })\r\n}"
            },
            {
                "name": "CustomSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    name: 'remixSearchLine',\r\n    size: '48px',\r\n    color: 'brand'\r\n  }\r\n}"
            },
            {
                "name": "CustomWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Short', value: 1 },\r\n      { id: '2', label: 'Medium Length Option', value: 2 },\r\n      { id: '3', label: 'Very Long Option Name Here', value: 3 },\r\n    ],\r\n    multiple: false,\r\n    disabled: false,\r\n    width: '300px',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"secondary\">Custom Width</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Badge',\r\n    contentType: 'text',\r\n    variant: 'default',\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isSidebarCollapsed: false,\r\n  },\r\n  render: () => ({\r\n    template: '<ds-debug-wrapper></ds-debug-wrapper>'\r\n  })\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'initials',\r\n    size: 'md',\r\n    initials: 'JD',\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    disabled: false,\r\n    loading: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<ds-button [variant]=\"variant\" [size]=\"size\" [disabled]=\"disabled\" [loading]=\"loading\">Default Button</ds-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Select an option'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    template: `\r\n      <ds-datepicker [variant]=\"variant\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n    props: args,\r\n  }),\r\n  args: {\r\n    variant: 'default',\r\n    disabled: false,\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Basic header details example with a primary action and more actions menu. This demonstrates the typical layout for an entity detail page.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Woods Augusthus',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Follow',\r\n    primaryActionIcon: 'remixUserFollowLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: false,\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"User name\"\r\n            value=\"Woods Augusthus\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"WA\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Company name\"\r\n            value=\"Propbinder Inc.\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"PI\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    name: 'remixHomeLine',\r\n    size: '20px'\r\n  }\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"width: 360px;\">\r\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\r\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\r\n        </ds-form-field>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    className: '',\r\n    size: 'md',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args\r\n    },\r\n    styles: [`\r\n      :host {\r\n        display: block;\r\n        padding: 1rem;\r\n        background: white;\r\n      }\r\n    `],\r\n    template: `\r\n      <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\r\n        Label Text\r\n      </ds-label>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'This is a link',\r\n    href: '#',\r\n    showIcon: false,\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Reviewing tenant inquiries',\r\n      'Summarising maintenance patterns',\r\n      'Updating your recommendations',\r\n      'Analyzing property data',\r\n    ],\r\n    styleClass: 'body-sm-regular',\r\n    useShimmer: true,\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    items: basicMenuItems,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-button variant=\"secondary\">Actions</ds-button>\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'default',\r\n    disabled: false,\r\n    required: false,\r\n    ghost: false,\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    ariaLabel: 'Main navigation',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [ariaLabel]=\"ariaLabel\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div class=\"tw-flex\">\r\n        <ds-spinner size=\"20px\" color=\"tertiary\" />\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    orientation: 'vertical',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-tile [orientation]=\"orientation\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Section Title</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\">Action</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">This is a simple tile section with a header and some content.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'This is a helpful tooltip',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-tooltip [text]=\"text\">\r\n        <ds-button variant=\"primary\">Hover me</ds-button>\r\n      </ds-tooltip>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Diamond",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    shape: 'diamond',\r\n    variant: 'brand',\r\n    label: 'Contact',\r\n  },\r\n}"
            },
            {
                "name": "DifferentPlacements",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 4rem; padding: 4rem; place-items: center;\">\r\n        <ds-tooltip text=\"Tooltip on top\">\r\n          <ds-button>Top</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Tooltip on right\">\r\n          <ds-button>Right</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Tooltip on bottom\">\r\n          <ds-button>Bottom</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Tooltip on left\">\r\n          <ds-button>Left</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Auto placement\">\r\n          <ds-button>Auto</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Another tooltip\">\r\n          <ds-button>Center</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "DifferentWidths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n        <div style=\"max-width: 300px;\">\r\n          <ds-inline-message variant=\"success\" title=\"Narrow\">\r\n            This message is in a narrow container.\r\n          </ds-inline-message>\r\n        </div>\r\n        \r\n        <div style=\"max-width: 600px;\">\r\n          <ds-inline-message variant=\"information\" title=\"Medium\">\r\n            This message is in a medium-width container.\r\n          </ds-inline-message>\r\n        </div>\r\n        \r\n        <div>\r\n          <ds-inline-message variant=\"warning\" title=\"Full Width\">\r\n            This message takes up the full width of its container.\r\n          </ds-inline-message>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    icon: 'remixDeleteBinLine',\r\n    variant: 'destructive',\r\n    size: 'md',\r\n    disabled: true,\r\n    ariaLabel: 'Delete item',\r\n    tooltip: 'Cannot delete this item'\r\n  }\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { disabled: true },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Disabled'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker [disabled]=\"true\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { disabled: true, placeholder: 'Disabled input' },\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    multiple: false,\r\n    disabled: true,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Disabled Listbox</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    disabled: true,\r\n  },\r\n}"
            },
            {
                "name": "EmptyState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: [],\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    emptyMessage: 'No users found',\r\n  },\r\n}"
            },
            {
                "name": "EmptyState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      emptyData: signal([]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: '',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('First row added:', row);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"emptyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [emptyMessage]=\"'No invoice lines yet'\"\r\n        [addRowButtonText]=\"'Add first line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { variant: 'error', placeholder: 'Error state' },\r\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'error',\r\n  },\r\n}"
            },
            {
                "name": "ErrorMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'error',\r\n    title: 'Error',\r\n    description: 'A short description',\r\n  },\r\n}"
            },
            {
                "name": "ErrorVariant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker variant=\"error\">\r\n        <ds-button variant=\"destructive\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    sparkImagePath: './Assets/ai-spark.png',\r\n    isLoading: true\r\n  }\r\n}"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    sparkImagePath: './Assets/ai-spark.png',\r\n    animationState: 'static'\r\n  }\r\n}"
            },
            {
                "name": "FilterPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Active', value: 'active' },\r\n      { id: '2', label: 'Inactive', value: 'inactive' },\r\n      { id: '3', label: 'Pending', value: 'pending' },\r\n      { id: '4', label: 'Archived', value: 'archived' },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"ghost\" leadingIcon=\"remixFilterLine\">Filter Status</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { ghost: true, placeholder: 'Ghost input...' },\r\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Ghost select',\r\n    ghost: true,\r\n  },\r\n}"
            },
            {
                "name": "GhostWithGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: groupedOptions,\r\n    placeholder: 'Ghost select with groups',\r\n    ghost: true,\r\n  },\r\n}"
            },
            {
                "name": "GhostWithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { ghost: true, leadingIcon: 'remixSearchLine', placeholder: 'Search...' },\r\n}"
            },
            {
                "name": "groupedOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsSelectOption[]",
                "defaultValue": "[\r\n  { id: '1', label: 'Apple', value: 'apple', group: 'Fruits' },\r\n  { id: '2', label: 'Banana', value: 'banana', group: 'Fruits' },\r\n  { id: '3', label: 'Orange', value: 'orange', group: 'Fruits' },\r\n  { id: '4', label: 'Carrot', value: 'carrot', group: 'Vegetables' },\r\n  { id: '5', label: 'Broccoli', value: 'broccoli', group: 'Vegetables' },\r\n  { id: '6', label: 'Potato', value: 'potato', group: 'Vegetables' },\r\n]"
            },
            {
                "name": "HorizontalAvatarIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Owner',\r\n    value: 'System User',\r\n    layout: 'horizontal',\r\n    valueType: 'avatar-text',\r\n    avatarType: 'icon',\r\n    avatarIconName: 'remixRobotFill',\r\n  },\r\n}"
            },
            {
                "name": "HorizontalAvatarPhoto",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Created by',\r\n    value: 'Sarah Wilson',\r\n    layout: 'horizontal',\r\n    valueType: 'avatar-text',\r\n    avatarType: 'photo',\r\n    avatarSrc: '/Dummy-avatars/dummy-portrait-woman.jpg',\r\n  },\r\n}"
            },
            {
                "name": "HorizontalBadgeIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Status',\r\n    layout: 'horizontal',\r\n    valueType: 'badge',\r\n    badgeVariant: 'success',\r\n    badgeContentType: 'icon-text',\r\n    badgeContent: 'Completed',\r\n    badgeIcon: 'remixCheckboxCircleFill',\r\n  },\r\n}"
            },
            {
                "name": "HorizontalBadgeIndicator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Type',\r\n    layout: 'horizontal',\r\n    valueType: 'badge',\r\n    badgeVariant: 'brand',\r\n    badgeContentType: 'indicator-text',\r\n    badgeContent: 'Premium',\r\n    badgeIndicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "HorizontalIconLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Download',\r\n    value: 'Download PDF report',\r\n    layout: 'horizontal',\r\n    valueType: 'icon-link',\r\n    linkHref: 'https://example.com/report.pdf',\r\n    linkTarget: '_blank',\r\n    iconName: 'remixFileDownloadLine',\r\n  },\r\n}"
            },
            {
                "name": "HorizontalIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Location',\r\n    value: 'New York, NY',\r\n    layout: 'horizontal',\r\n    iconName: 'remixMapPin2Fill',\r\n  },\r\n}"
            },
            {
                "name": "HorizontalText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Full Name',\r\n    value: 'John Doe',\r\n    layout: 'horizontal',\r\n    valueType: 'text',\r\n  },\r\n}"
            },
            {
                "name": "IconButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-tooltip text=\"Add to favorites\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixStarLine\" \r\n            ariaLabel=\"Favorite\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Settings and preferences\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixSettingsLine\" \r\n            ariaLabel=\"Settings\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"More options menu\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixMoreLine\" \r\n            ariaLabel=\"More options\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Delete permanently\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixDeleteBinLine\" \r\n            ariaLabel=\"Delete\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "IconButtonVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixStarLine\" \r\n          ariaLabel=\"Favorite\"\r\n          variant=\"primary\"\r\n        ></ds-button>\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixSettingsLine\" \r\n          ariaLabel=\"Settings\"\r\n          variant=\"secondary\"\r\n        ></ds-button>\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixMoreLine\" \r\n          ariaLabel=\"More options\"\r\n          variant=\"ghost\"\r\n        ></ds-button>\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixDeleteBinLine\" \r\n          ariaLabel=\"Delete\"\r\n          variant=\"destructive\"\r\n        ></ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "IconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icons Only</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"success\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"triangle\" variant=\"warning\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"pentagon\" variant=\"blue\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "IconTextBrand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'New Feature',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixStarFill',\r\n    variant: 'brand',\r\n  },\r\n}"
            },
            {
                "name": "IconTextDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Feature',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixStarLine',\r\n    variant: 'default',\r\n  },\r\n}"
            },
            {
                "name": "IconTextDestructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Critical',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixErrorWarningFill',\r\n    variant: 'destructive',\r\n  },\r\n}"
            },
            {
                "name": "IconTextSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Verified',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixCheckboxCircleFill',\r\n    variant: 'success',\r\n  },\r\n}"
            },
            {
                "name": "IconTextWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Attention',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixAlertFill',\r\n    variant: 'warning',\r\n  },\r\n}"
            },
            {
                "name": "IconType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (6px radius)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (8px radius)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (12px radius)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (16px radius)</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "IconVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Default User</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixTeamFill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Team</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixBuildingFill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Organization</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixRobotFill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Bot</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "IndicatorTextBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Info',\r\n    contentType: 'indicator-text',\r\n    variant: 'blue',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextBrand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'In Progress',\r\n    contentType: 'indicator-text',\r\n    variant: 'brand',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Default',\r\n    contentType: 'indicator-text',\r\n    variant: 'default',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextDestructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Failed',\r\n    contentType: 'indicator-text',\r\n    variant: 'destructive',\r\n    indicatorShape: 'square',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextGrey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Neutral',\r\n    contentType: 'indicator-text',\r\n    variant: 'grey',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextLightPurple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Special',\r\n    contentType: 'indicator-text',\r\n    variant: 'light-purple',\r\n    indicatorShape: 'diamond',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextLimeGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Fresh',\r\n    contentType: 'indicator-text',\r\n    variant: 'lime-green',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Alert',\r\n    contentType: 'indicator-text',\r\n    variant: 'orange',\r\n    indicatorShape: 'triangle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextPink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Accent',\r\n    contentType: 'indicator-text',\r\n    variant: 'pink',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextSalmonOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Warm',\r\n    contentType: 'indicator-text',\r\n    variant: 'salmon-orange',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Completed',\r\n    contentType: 'indicator-text',\r\n    variant: 'success',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
            },
            {
                "name": "IndicatorTextWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Pending',\r\n    contentType: 'indicator-text',\r\n    variant: 'warning',\r\n    indicatorShape: 'triangle',\r\n  },\r\n}"
            },
            {
                "name": "Information",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'information',\r\n    title: 'Information',\r\n    description: 'A short description',\r\n  },\r\n}"
            },
            {
                "name": "InitiallyCollapsed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isMobileOverride: false, // Force desktop mode\r\n    isSidebarCollapsed: true,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Initially Collapsed'\"\r\n        [iconName]=\"'remixHome4Line'\"\r\n        [userInitials]=\"'JD'\"\r\n        [showFirstAction]=\"true\"\r\n        [firstActionIcon]=\"'remixNotification3Line'\"\r\n        [firstActionLabel]=\"'Notifications'\"\r\n        [showSecondAction]=\"true\"\r\n        [secondActionIcon]=\"'remixSettings3Line'\"\r\n        [secondActionLabel]=\"'Settings'\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Initially Collapsed Sidebar</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story demonstrates the sidebar starting in a collapsed state on desktop. Users can expand it using the collapse toggle button.</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Is Mobile'\" \r\n                    [value]=\"'False (Desktop mode forced)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Sidebar Collapsed'\" \r\n                    [value]=\"'True'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Note'\" \r\n                    [value]=\"'Click the collapse toggle to expand the sidebar'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "InitialsType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"AS\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"MJ\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"EB\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    leadingIcon: 'remixThumbUpLine',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      clickCount: 0,\r\n      onClick: function(event: MouseEvent) {\r\n        this['clickCount']++;\r\n        console.log('Button clicked!', event);\r\n      }\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\r\n        <ds-button \r\n          [variant]=\"variant\"\r\n          [size]=\"size\"\r\n          [leadingIcon]=\"leadingIcon\"\r\n          (clicked)=\"onClick($event)\"\r\n        >\r\n          Like ({{clickCount}})\r\n        </ds-button>\r\n        <p style=\"font-size: 0.875rem; color: var(--color-gray-600);\">\r\n          Click count: {{clickCount}}\r\n        </p>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox \r\n          label=\"Click me to toggle\" \r\n          (checkedChange)=\"onCheckedChange($event)\">\r\n        </ds-checkbox>\r\n        <ds-checkbox \r\n          label=\"I'm required\" \r\n          [required]=\"true\"\r\n          variant=\"error\">\r\n        </ds-checkbox>\r\n        <ds-checkbox \r\n          label=\"Hover over me\"\r\n          size=\"lg\">\r\n        </ds-checkbox>\r\n      </div>\r\n    `,\r\n    props: {\r\n      onCheckedChange: (checked: boolean) => {\r\n        console.log('Checkbox checked:', checked);\r\n      },\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\r\n    }),\r\n  ],\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-interactive',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\r\n      template: `\r\n        <div class=\"tw-space-y-4\">\r\n          <ds-datepicker \r\n            [variant]=\"variant()\" \r\n            [disabled]=\"disabled()\"\r\n            (dateChange)=\"onDateChange($event)\">\r\n            <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n              {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'Select Date' }}\r\n            </ds-button>\r\n          </ds-datepicker>\r\n          \r\n          <div class=\"tw-flex tw-gap-2\">\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('default')\">\r\n              Default\r\n            </button>\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('error')\">\r\n              Error\r\n            </button>\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('warning')\">\r\n              Warning\r\n            </button>\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('success')\">\r\n              Success\r\n            </button>\r\n          </div>\r\n          \r\n          <div class=\"tw-flex tw-gap-2\">\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"disabled.set(!disabled())\">\r\n              Toggle Disabled ({{ disabled() ? 'Currently Disabled' : 'Currently Enabled' }})\r\n            </button>\r\n          </div>\r\n          \r\n          <p class=\"body-sm-regular\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\r\n        </div>\r\n      `,\r\n    })\r\n    class DatepickerInteractive {\r\n      variant = signal<'default' | 'error' | 'warning' | 'success'>('default');\r\n      disabled = signal(false);\r\n      selectedDate = signal<Date | null>(null);\r\n      \r\n      onDateChange(date: Date | null) {\r\n        this.selectedDate.set(date);\r\n      }\r\n    }\r\n\r\n    return {\r\n      component: DatepickerInteractive,\r\n      props: {},\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    name: 'remixSettingsLine',\r\n    size: '24px',\r\n    color: 'brand',\r\n    interactive: true\r\n  }\r\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    text: 'Click to see the action',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      clickCount: 0,\r\n      onClick: function() {\r\n        this['clickCount']++;\r\n        console.log('Button clicked from tooltip!');\r\n      }\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\r\n        <ds-tooltip [text]=\"text\">\r\n          <ds-button (clicked)=\"onClick()\">\r\n            Click me ({{clickCount}})\r\n          </ds-button>\r\n        </ds-tooltip>\r\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\r\n          Click count: {{clickCount}}\r\n        </p>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "InteractiveExamples",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <ds-link href=\"#\" content=\"Simple link\"></ds-link>\r\n        <ds-link href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\" [showIcon]=\"true\" iconName=\"remixExternalLinkLine\" content=\"External link\"></ds-link>\r\n        <ds-link href=\"mailto:test@example.com\" [showIcon]=\"true\" iconName=\"remixMailLine\" content=\"Email link\"></ds-link>\r\n        <ds-link href=\"#\" [showIcon]=\"true\" iconName=\"remixDownloadLine\" content=\"Download link\"></ds-link>\r\n        <ds-link href=\"#\">Link with <strong>formatted</strong> content</ds-link>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "invoiceColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'description',\r\n    header: 'Description',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Add description...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n        maxWidth: 'xl',\r\n        truncate: true,\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'quantity',\r\n    header: 'Quantity',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.5,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'unitPrice',\r\n    header: 'Unit Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'discount',\r\n    header: 'Discount',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'total',\r\n    header: 'Total',\r\n    cell: (info) => info.getValue(),\r\n    enableSorting: true,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n]"
            },
            {
                "name": "invoiceColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  { accessorKey: 'id', header: 'ID' },\r\n  { accessorKey: 'description', header: 'Description' },\r\n  { accessorKey: 'quantity', header: 'Qty' },\r\n  { accessorKey: 'unitPrice', header: 'Unit Price', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\r\n  { accessorKey: 'total', header: 'Total', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\r\n]"
            },
            {
                "name": "InvoiceLinesReorderable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceData: signal([...sampleInvoiceLines]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: 'Add description',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"invoiceData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [showDragHandle]=\"true\"\r\n        [addRowButtonText]=\"'Add invoice line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LabelToggle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <h4>With Labels</h4>\r\n        <ds-checkbox [showLabel]=\"true\" label=\"I have a visible label\"></ds-checkbox>\r\n        <ds-checkbox [showLabel]=\"true\" label=\"Me too!\"></ds-checkbox>\r\n        \r\n        <h4 style=\"margin-top: 24px;\">Without Labels (using aria-label)</h4>\r\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 1\"></ds-checkbox>\r\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 2\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "LargeDataset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: Array.from({ length: 100 }, (_, i) => ({\r\n      id: i + 1,\r\n      name: `User ${i + 1}`,\r\n      email: `user${i + 1}@example.com`,\r\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\r\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\r\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\r\n    })),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    pageSizeOptions: [10, 25, 50, 100],\r\n    showColumnVisibility: true,\r\n  },\r\n}"
            },
            {
                "name": "LargerText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Processing your data',\r\n      'Analyzing trends',\r\n      'Generating insights',\r\n    ],\r\n    styleClass: 'body-base-medium',\r\n  },\r\n}"
            },
            {
                "name": "LargeTextarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    placeholder: 'This is a large textarea for longer content...',\r\n    rows: 8,\r\n    size: 'lg',\r\n  },\r\n}"
            },
            {
                "name": "LayoutComparison",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px; max-width: 400px;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Vertical Layout</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n            <ds-data-item\r\n              label=\"Email address\"\r\n              value=\"user@example.com\"\r\n              layout=\"vertical\"\r\n              valueType=\"text\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Status\"\r\n              value=\"Active\"\r\n              layout=\"vertical\"\r\n              valueType=\"icon-text\"\r\n              iconName=\"remixCheckboxCircleFill\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Assigned to\"\r\n              value=\"John Doe\"\r\n              layout=\"vertical\"\r\n              valueType=\"avatar-text\"\r\n              avatarType=\"initials\"\r\n              avatarInitials=\"JD\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Horizontal Layout</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n            <ds-data-item\r\n              label=\"Email address\"\r\n              value=\"user@example.com\"\r\n              layout=\"horizontal\"\r\n              valueType=\"text\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Status\"\r\n              value=\"Active\"\r\n              layout=\"horizontal\"\r\n              valueType=\"icon-text\"\r\n              iconName=\"remixCheckboxCircleFill\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Assigned to\"\r\n              value=\"John Doe\"\r\n              layout=\"horizontal\"\r\n              valueType=\"avatar-text\"\r\n              avatarType=\"initials\"\r\n              avatarInitials=\"JD\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
            },
            {
                "name": "LeaseDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Lease management example demonstrating how to display lease agreement details with actions for renewal and report generation.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Lease Agreement #LA-2024-001',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Renew Lease',\r\n    primaryActionIcon: 'remixRefreshLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'Generate Report',\r\n    secondaryActionIcon: 'remixFileTextLine',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Tenant\"\r\n            value=\"Michael Chen\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"MC\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Property\"\r\n            value=\"Sunset Blvd Apt 4B\"\r\n            layout=\"vertical\"\r\n            valueType=\"icon-text\"\r\n            iconName=\"remixBuildingLine\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Rent Amount\"\r\n            value=\"$2,400/month\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Lease Term\"\r\n            value=\"12 months\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "LeftDrawer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    position: 'left'\r\n  },\r\n  render: Template\r\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    icon: 'remixRefreshLine',\r\n    variant: 'secondary',\r\n    size: 'md',\r\n    loading: true,\r\n    ariaLabel: 'Refreshing'\r\n  }\r\n}"
            },
            {
                "name": "LoadingStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button [loading]=\"true\" variant=\"primary\">\r\n          Saving...\r\n        </ds-button>\r\n        <ds-button \r\n          [loading]=\"true\" \r\n          variant=\"ghost\"\r\n          leadingIcon=\"remixUploadLine\"\r\n        >\r\n          Uploading...\r\n        </ds-button>\r\n        <ds-button \r\n          [loading]=\"true\" \r\n          variant=\"secondary\"\r\n        >\r\n          Processing\r\n        </ds-button>\r\n        <ds-button \r\n          [loading]=\"true\" \r\n          variant=\"destructive\"\r\n        >\r\n          Deleting...\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "LongContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 600px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Operation Completed Successfully\">\r\n          Your changes have been saved and will take effect immediately. You can continue working without any interruptions.\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"error\" title=\"Failed to Save Changes\">\r\n          An error occurred while trying to save your changes. Please check your connection and try again. If the problem persists, contact support.\r\n        </ds-inline-message>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "LongText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tooltip text=\"This is a very long tooltip text that should wrap properly and demonstrate how the tooltip handles longer content gracefully without breaking the layout.\">\r\n        <ds-button>Long tooltip text</ds-button>\r\n      </ds-tooltip>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "LongTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    title: 'This is a very long title that should demonstrate how the component handles longer text content and wrapping behavior while maintaining proper alignment',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"Just now\" />\r\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "LongTitleWithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'This is a Very Long Page Title That Should Be Truncated',\r\n    iconName: 'remixFileTextLine',\r\n    userInitials: 'LT',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Documents', path: '/documents', isLast: false },\r\n      { label: 'Reports', path: '/documents/reports', isLast: false },\r\n      { label: 'This is a Very Long Page Title That Should Be Truncated', path: '/documents/reports/long-title', isLast: true }\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "menuWithDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsMenuItem[]",
                "defaultValue": "[\r\n  { id: '1', label: 'New File', icon: 'remixFileAddLine' },\r\n  { id: '2', label: 'New Folder', icon: 'remixFolderAddLine' },\r\n  { id: '3', label: 'Upload', icon: 'remixUploadLine', disabled: true },\r\n  { id: 'sep1', label: '', separator: true },\r\n  { id: '4', label: 'Settings', icon: 'remixSettingsLine' },\r\n]"
            },
            {
                "name": "menuWithIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsMenuItem[]",
                "defaultValue": "[\r\n  { id: '1', label: 'Edit', icon: 'remixEditLine', action: () => console.log('Edit clicked') },\r\n  { id: '2', label: 'Copy', icon: 'remixFileCopyLine', action: () => console.log('Copy clicked') },\r\n  { id: '3', label: 'Share', icon: 'remixShareLine', action: () => console.log('Share clicked') },\r\n  { id: 'sep1', label: '', separator: true },\r\n  { id: '4', label: 'Download', icon: 'remixDownloadLine', action: () => console.log('Download clicked') },\r\n  { id: 'sep2', label: '', separator: true },\r\n  { id: '5', label: 'Delete', icon: 'remixDeleteBinLine', destructive: true, action: () => console.log('Delete clicked') },\r\n]"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsAccordion>",
                "defaultValue": "{\r\n  title: 'Primitives/Accordion',\r\n  component: DsAccordion,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAccordion, DsAccordionItem, NgIcon],\r\n      providers: [\r\n        provideIcons({ remixArrowDownSLine })\r\n      ]\r\n    })\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsBadgeComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Badge',\r\n  component: DsBadgeComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\r\n    },\r\n    contentType: {\r\n      control: 'select',\r\n      options: ['text', 'icon-text', 'indicator-text'],\r\n    },\r\n    content: {\r\n      control: 'text',\r\n    },\r\n    leadingIcon: {\r\n      control: 'text',\r\n    },\r\n    indicatorShape: {\r\n      control: 'select',\r\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsAppLayoutComponent>",
                "defaultValue": "{\r\n  title: 'Application shell/App Layout',\r\n  component: DsAppLayoutComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DebugWrapperComponent],\r\n      providers: [ViewportService]\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe main application layout component that provides a responsive shell with sidebar navigation, topbar, and content area. Automatically adapts between mobile and desktop modes based on viewport size.\r\n\r\n## Features\r\n\r\n- **Responsive Design**: Automatically switches between mobile drawer and desktop sidebar at 992px breakpoint\r\n- **Collapsible Sidebar**: Desktop sidebar can be collapsed from 256px to 80px width\r\n- **Mobile Drawer**: Slide-in navigation drawer with overlay on mobile devices\r\n- **Sticky Topbar**: Page header remains visible while scrolling content\r\n- **Integrated Subcomponents**: Both sidebar and topbar are automatically rendered and configured via props\r\n- **Content Projection**: Default slot for main page content\r\n- **Smooth Transitions**: Animated sidebar collapse/expand and mobile drawer\r\n- **Viewport Service**: Automatic mobile detection or manual override for testing\r\n\r\n## Architecture\r\n\r\nThe component automatically renders both **sidebar** and **topbar** - you don't need to project them as children. Just configure them via props and project your main content.\r\n\r\n### Built-in Subcomponents\r\n\r\n1. **Sidebar** - Navigation component (always rendered)\r\n2. **Topbar** - Page header component (always rendered)\r\n3. **Main Content** - Your page content (via default slot)\r\n\r\n## Content Projection\r\n\r\nThe component has a **single default slot** for main page content:\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"groups\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n  [iconName]=\"'remixHome4Line'\"\r\n  [userInitials]=\"'JD'\"\r\n>\r\n  <!-- Your main content goes here -->\r\n  <div class=\"content-container\">\r\n    <h1>Page Content</h1>\r\n  </div>\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n## Props\r\n\r\n### Sidebar Configuration\r\n- \\`sidebarGroups\\`: Array of navigation groups with items\r\n- \\`isSidebarCollapsed\\`: Control collapsed state (desktop only)\r\n- \\`activeItemId\\`: Currently active navigation item\r\n\r\n**Group Structure:**\r\n\\`\\`\\`typescript\r\n{\r\n  id: 'group-id',\r\n  label: 'GROUP LABEL',\r\n  items: [\r\n    { \r\n      id: 'item-id', \r\n      label: 'Item Label', \r\n      icon: 'remixIconName',\r\n      badgeText?: '5' // Optional badge\r\n    }\r\n  ]\r\n}\r\n\\`\\`\\`\r\n\r\n### Topbar Configuration\r\n- \\`pageTitle\\`: The page title text\r\n- \\`iconName\\`: Icon to display next to the title\r\n- \\`userInitials\\`: User avatar initials\r\n- \\`showBreadcrumbs\\`: Enable breadcrumb navigation (default: false)\r\n- \\`breadcrumbItems\\`: Array of breadcrumb items\r\n- \\`showFirstAction\\`: Show first action button (default: true)\r\n- \\`firstActionIcon\\`: Icon for first action (default: 'remixNotification3Line')\r\n- \\`firstActionLabel\\`: Aria label for first action (default: 'Notifications')\r\n- \\`showSecondAction\\`: Show second action button (default: true)\r\n- \\`secondActionIcon\\`: Icon for second action (default: 'remixSettings3Line')\r\n- \\`secondActionLabel\\`: Aria label for second action (default: 'Settings')\r\n\r\n### Layout Configuration\r\n- \\`isMobileOverride\\`: Override automatic mobile detection for testing\r\n\r\n## Events\r\n\r\n- \\`(collapsedChange)\\`: Emits when desktop sidebar is collapsed/expanded\r\n- \\`(menuOpenChange)\\`: Emits when mobile drawer is opened/closed\r\n\r\n## Layout Behavior\r\n\r\n### Desktop Mode (≥ 992px)\r\n- Persistent sidebar on the left (256px expanded, 80px collapsed)\r\n- Grid layout: \\`auto minmax(0, 1fr)\\`\r\n- Sidebar collapse toggle available\r\n- Main content adjusts width automatically\r\n\r\n### Mobile Mode (< 992px)\r\n- Minimized sidebar header (64px height) at the top\r\n- Hamburger menu button to open drawer\r\n- Full sidebar appears as overlay drawer from left\r\n- Semi-transparent backdrop overlay\r\n- Body scroll locked when drawer is open\r\n\r\n## Usage Example\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"sidebarGroups\"\r\n  [isSidebarCollapsed]=\"isSidebarCollapsed()\"\r\n  [activeItemId]=\"'dashboard'\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n  [iconName]=\"'remixHome4Line'\"\r\n  [userInitials]=\"'JD'\"\r\n  [showFirstAction]=\"true\"\r\n  [firstActionIcon]=\"'remixNotification3Line'\"\r\n  [showSecondAction]=\"true\"\r\n  [secondActionIcon]=\"'remixSettings3Line'\"\r\n  (collapsedChange)=\"isSidebarCollapsed.set($event)\"\r\n>\r\n  <!-- Main Content -->\r\n  <div class=\"content-container\">\r\n    <h1>Page Content</h1>\r\n    <p>Your content goes here...</p>\r\n  </div>\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n### With Breadcrumbs\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"sidebarGroups\"\r\n  [pageTitle]=\"'Property Details'\"\r\n  [iconName]=\"'remixBuilding2Line'\"\r\n  [showBreadcrumbs]=\"true\"\r\n  [breadcrumbItems]=\"[\r\n    { label: 'Properties', path: '/properties', isLast: false },\r\n    { label: 'Fælledgården Hub', path: '', isLast: true }\r\n  ]\"\r\n  [userInitials]=\"'JD'\"\r\n>\r\n  <!-- Content here -->\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n## Viewport Testing\r\n\r\nUse the viewport toolbar above to test different screen sizes, or use the \\`isMobileOverride\\` prop to force mobile/desktop mode:\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [isMobileOverride]=\"false\"  <!-- Force desktop mode -->\r\n  [sidebarGroups]=\"groups\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n    layout: 'fullscreen',\r\n    // Add viewport toolbar to allow easy resizing\r\n    viewport: {\r\n      defaultViewport: 'desktop',\r\n      viewports: {\r\n        mobile: {\r\n          name: 'Mobile',\r\n          styles: {\r\n            width: '375px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        tablet: {\r\n          name: 'Tablet',\r\n          styles: {\r\n            width: '768px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        desktop: {\r\n          name: 'Desktop',\r\n          styles: {\r\n            width: '1024px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        'large-desktop': {\r\n          name: 'Large Desktop',\r\n          styles: {\r\n            width: '1440px',\r\n            height: '100%',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsAvatarComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Avatar',\r\n  component: DsAvatarComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    type: {\r\n      control: { type: 'select' },\r\n      options: ['initials', 'photo', 'icon'],\r\n      description: 'The type of avatar display',\r\n    },\r\n    size: {\r\n      control: { type: 'select' },\r\n      options: ['sm', 'md', 'lg', 'xl'],\r\n      description: 'The size of the avatar',\r\n    },\r\n    initials: {\r\n      control: { type: 'text' },\r\n      description: 'Initials to display (for initials type)',\r\n    },\r\n    src: {\r\n      control: { type: 'text' },\r\n      description: 'Image source URL (for photo type)',\r\n    },\r\n    alt: {\r\n      control: { type: 'text' },\r\n      description: 'Alternative text for the image',\r\n    },\r\n    iconName: {\r\n      control: { type: 'text' },\r\n      description: 'Icon name to display (for icon type)',\r\n    },\r\n    iconColor: {\r\n      control: { type: 'text' },\r\n      description: 'Color of the icon (automatically white for icon avatars)',\r\n      table: { disable: true }, // Disable control since it's always white for icon avatars\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsButtonComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Button',\r\n  component: DsButtonComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: { type: 'select' },\r\n      options: ['primary', 'secondary', 'ghost', 'destructive', 'ai-primary', 'ai-ghost'],\r\n      description: 'The visual style variant of the button',\r\n    },\r\n    size: {\r\n      control: { type: 'select' },\r\n      options: ['sm', 'md', 'lg'],\r\n      description: 'The size of the button',\r\n    },\r\n    disabled: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button is disabled',\r\n    },\r\n    loading: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button is in loading state',\r\n    },\r\n    pressed: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button appears pressed (for toggle buttons)',\r\n    },\r\n    expanded: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button is expanded (for dropdown buttons)',\r\n    },\r\n    leadingIcon: {\r\n      control: { type: 'text' },\r\n      description: 'Icon to display before the button text',\r\n    },\r\n    trailingIcon: {\r\n      control: { type: 'text' },\r\n      description: 'Icon to display after the button text',\r\n    },\r\n    ariaLabel: {\r\n      control: { type: 'text' },\r\n      description: 'Accessibility label for the button',\r\n    },\r\n    iconOnly: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button displays only an icon without text',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsIconButtonComponent>",
                "defaultValue": "{\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [provideAllRemixIcons()]\r\n    })\r\n  ],\r\n  parameters: {\r\n    layout: 'centered'\r\n  },\r\n  title: 'Primitives/IconButton',\r\n  component: DsIconButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\r\n      description: 'Visual style variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'ghost' }\r\n      }\r\n    },\r\n    size: {\r\n      control: 'select',\r\n      options: ['sm', 'md', 'lg'],\r\n      description: 'Size variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'md' }\r\n      }\r\n    },\r\n    icon: {\r\n      control: 'text',\r\n      description: 'Icon name to display (only used when no custom content is projected)',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the button is disabled',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    loading: {\r\n      control: 'boolean',\r\n      description: 'Whether the button is in a loading state',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    pressed: {\r\n      control: 'boolean',\r\n      description: 'Whether the button is in a pressed state (for toggle buttons)',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    expanded: {\r\n      control: 'boolean',\r\n      description: 'Whether the button controls an expanded element',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      control: 'text',\r\n      description: 'Accessible label for the button (required for icon buttons)',\r\n    },\r\n    tooltip: {\r\n      control: 'text',\r\n      description: 'Tooltip text to display on hover',\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsCheckboxComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Checkbox',\r\n  component: DsCheckboxComponent,\r\n  parameters: { layout: 'centered' },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\r\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\r\n    label: { control: 'text' },\r\n    showLabel: { control: 'boolean' },\r\n    disabled: { control: 'boolean' },\r\n    required: { control: 'boolean' },\r\n    indeterminate: { control: 'boolean' },\r\n    checkboxId: { control: 'text' },\r\n    ariaLabel: { control: 'text' },\r\n    ariaDescribedBy: { control: 'text' },\r\n    ariaLabelledBy: { control: 'text' },\r\n  },\r\n  args: {\r\n    variant: 'default',\r\n    size: 'md',\r\n    label: 'Accept terms and conditions',\r\n    showLabel: true,\r\n    disabled: false,\r\n    required: false,\r\n    indeterminate: false,\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsComboboxComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Combobox',\r\n  component: DsComboboxComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 300,\r\n      }\r\n    }\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsButtonComponent, DsIconButtonComponent, DsSelectComponent],\r\n    }),\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 300px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    placeholder: { control: 'text' },\r\n    disabled: { control: 'boolean' },\r\n    width: { control: 'text' },\r\n    options: { control: { type: 'object' } },\r\n  },\r\n  args: {\r\n    placeholder: 'Search...',\r\n    disabled: false,\r\n    width: 'auto',\r\n    options: [\r\n      'Marty McFly',\r\n      'Doc Brown',\r\n      'Biff Tannen',\r\n      'George McFly',\r\n      'Jennifer Parker',\r\n      'Emmett Brown',\r\n      'Einstein',\r\n      'Clara Clayton',\r\n      'Needles',\r\n      'Goldie Wilson',\r\n      'Marvin Berry',\r\n      'Lorraine Baines',\r\n      'Strickland',\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsDatepickerComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Datepicker',\r\n  component: DsDatepickerComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n          remixCloseLine,\r\n          remixCalendarLine,\r\n        }),\r\n      ],\r\n    }),\r\n    moduleMetadata({\r\n      imports: [\r\n        DsDatepickerComponent, \r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        DsFormFieldComponent, \r\n        DsButtonComponent,\r\n        DsInputComponent,\r\n      ],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'error', 'warning', 'success'],\r\n      description: 'Visual variant of the datepicker calendar',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the datepicker is disabled',\r\n    },\r\n    disableFutureDates: {\r\n      control: 'boolean',\r\n      description: 'When true, disables all dates after today',\r\n    },\r\n    isDateDisabled: {\r\n      control: false,\r\n      description: 'Advanced: Custom function to determine if a specific date should be disabled. Return true to disable the date.',\r\n      table: {\r\n        type: { summary: '(date: Date) => boolean' },\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsDataItemComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Data Item',\r\n  component: DsDataItemComponent,\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA flexible data item component for displaying label-value pairs with multiple layout options and value types. Perfect for user profiles, task details, settings panels, and structured data displays.\r\n\r\n## Features\r\n\r\n- **Two Layout Types**: Vertical and horizontal arrangements for different use cases\r\n- **Fixed Value Height**: 32px height for consistent alignment across all value types\r\n- **Six Value Types**: Text, Icon+Text, Avatar+Text, Badge, Link, and Icon+Link variants\r\n- **Responsive Design**: Horizontal layout automatically collapses to vertical on mobile\r\n- **Consistent Spacing**: 8px gap between elements in value container\r\n- **Semantic Typography**: Uses ui-sm-regular (14px, 400 weight) for value text\r\n\r\n## Layout Types\r\n\r\n### Vertical Layout\r\nStacks label above value with 4px gap. Ideal for compact displays, mobile layouts, and when you need to conserve horizontal space.\r\n\r\n### Horizontal Layout\r\nPlaces label and value side-by-side with 12px gap. Label container has fixed 128px width for consistent alignment across multiple data items.\r\n\r\n## Value Types\r\n\r\n### Text Only\r\nSimple text display using ui-sm-regular typography with primary text color.\r\n\r\n### Icon + Text\r\n16px icon with secondary color paired with text. Perfect for status indicators, locations, or categorized information.\r\n\r\n### Avatar + Text\r\n20x20px avatar (xs size) with text. Supports all avatar types: initials, photo, and icon. Ideal for user assignments, ownership, or person-related data.\r\n\r\n### Badge\r\nFull badge component with all variants and content types. Perfect for status, priority, categories, or any labeled information.\r\n\r\n### Link\r\nClickable link using the ds-link component. Ideal for navigation, references, or any interactive text that should lead to another page or action.\r\n\r\n### Icon + Link\r\nLink with a leading icon for enhanced visual context. Perfect for document links, external references, or any clickable content that benefits from visual indicators.\r\n\r\nFor complete documentation, properties reference, and implementation guidelines, see the [Data Item README](/?path=/docs/components-data-item--docs).\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    label: {\r\n      control: 'text',\r\n      description: 'The label text to display',\r\n    },\r\n    value: {\r\n      control: 'text',\r\n      description: 'The value text to display (not used for badge type)',\r\n    },\r\n    layout: {\r\n      control: 'select',\r\n      options: ['vertical', 'horizontal'],\r\n      description: 'Layout arrangement of label and value',\r\n    },\r\n    valueType: {\r\n      control: 'select',\r\n      options: ['text', 'icon-text', 'avatar-text', 'badge', 'link', 'icon-link'],\r\n      description: 'Type of value display',\r\n    },\r\n    iconName: {\r\n      control: 'text',\r\n      description: 'Icon name for icon-text and icon-link types',\r\n    },\r\n    avatarType: {\r\n      control: 'select',\r\n      options: ['initials', 'photo', 'icon'],\r\n      description: 'Avatar type for avatar-text type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    avatarInitials: {\r\n      control: 'text',\r\n      description: 'Avatar initials for initials type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    avatarSrc: {\r\n      control: 'text',\r\n      description: 'Avatar image source for photo type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    avatarIconName: {\r\n      control: 'text',\r\n      description: 'Avatar icon name for icon type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    badgeVariant: {\r\n      control: 'select',\r\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\r\n      description: 'Badge color variant',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeContentType: {\r\n      control: 'select',\r\n      options: ['text', 'icon-text', 'indicator-text'],\r\n      description: 'Badge content type',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeContent: {\r\n      control: 'text',\r\n      description: 'Badge content text',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeIcon: {\r\n      control: 'text',\r\n      description: 'Badge icon name for icon-text type',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeIndicatorShape: {\r\n      control: 'select',\r\n      options: ['circle', 'square'],\r\n      description: 'Badge indicator shape for indicator-text type',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    linkHref: {\r\n      control: 'text',\r\n      description: 'Link URL',\r\n      if: { arg: 'valueType', eq: 'link' },\r\n    },\r\n    linkTarget: {\r\n      control: 'select',\r\n      options: ['_blank', '_self'],\r\n      description: 'Link target (_blank for new tab)',\r\n      if: { arg: 'valueType', eq: 'link' },\r\n    },\r\n    // iconName is used for both icon-text and icon-link types\r\n  },\r\n  args: {\r\n    label: 'Email',\r\n    value: 'user@example.com',\r\n    layout: 'vertical',\r\n    valueType: 'text',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsDataTableComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Data Table',\r\n  component: DsDataTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixArrowUpDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n          remixEyeLine,\r\n          remixEditLine,\r\n          remixDeleteBinLine,\r\n          remixLoader4Line,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display in the table',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    searchable: {\r\n      control: 'boolean',\r\n      description: 'Enable global search functionality',\r\n    },\r\n    searchPlaceholder: {\r\n      control: 'text',\r\n      description: 'Placeholder text for search input',\r\n    },\r\n    paginated: {\r\n      control: 'boolean',\r\n      description: 'Enable pagination',\r\n    },\r\n    pageSize: {\r\n      control: 'number',\r\n      description: 'Number of rows per page',\r\n    },\r\n    showColumnVisibility: {\r\n      control: 'boolean',\r\n      description: 'Show column visibility toggle',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    rowClickable: {\r\n      control: 'boolean',\r\n      description: 'Make rows clickable',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DrawerStoryProps>",
                "defaultValue": "{\r\n  title: 'Primitives/Drawer',\r\n  component: DsDrawerComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDrawerComponent, DsButtonComponent, NgpDialogTrigger, NgpDialogOverlay, NgpDialog],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    position: {\r\n      control: 'select',\r\n      options: ['left', 'right'],\r\n      description: 'Position of the drawer',\r\n      defaultValue: 'right'\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsEditableTableComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Editable Table',\r\n  component: DsEditableTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixDeleteBinLine,\r\n          remixDraggable,\r\n          remixInboxLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display and edit (two-way binding)',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    reorderable: {\r\n      control: 'boolean',\r\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\r\n    },\r\n    allowAddRow: {\r\n      control: 'boolean',\r\n      description: 'Allow adding new rows',\r\n    },\r\n    allowDeleteRow: {\r\n      control: 'boolean',\r\n      description: 'Allow deleting rows',\r\n    },\r\n    showDragHandle: {\r\n      control: 'boolean',\r\n      description: 'Show drag handle column (only when reorderable is true)',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    addRowButtonText: {\r\n      control: 'text',\r\n      description: 'Text for add row button',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsHeaderDetailsComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Header Details',\r\n  component: DsHeaderDetailsComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDataItemComponent]\r\n    })\r\n  ],\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        height: 'auto'\r\n      },\r\n      description: {\r\n        component: `\r\n# Header Details Component\r\n\r\nA specialized header component designed for entity detail pages such as Properties, Leases, Inquiries, Assets, and other business entities. It provides a consistent layout with a title row, configurable actions, and flexible content slots for metadata display.\r\n\r\n## Design Principles\r\n\r\n- **Consistent Spacing**: 24px top padding and gaps for visual hierarchy\r\n- **Content-First**: Responsive width (10/12 columns of parent) ensures optimal reading experience  \r\n- **Action-Oriented**: Prominent placement of primary and secondary actions\r\n- **Flexible Content**: Slot-based architecture for customizable metadata layouts\r\n- **Responsive**: Adapts gracefully from desktop to mobile viewports\r\n\r\n## Anatomy\r\n\r\n\\`\\`\\`\r\n┌─────────────────────────────────────────────────────────────┐\r\n│  24px padding-top                                           │\r\n│  ┌───────────────────────────────────────────────────────┐  │\r\n│  │ Title Row                                             │  │\r\n│  │ ┌─────────────────┐           ┌─────────────────────┐ │  │\r\n│  │ │ Entity Title    │           │ Action Buttons      │ │  │\r\n│  │ │ (H1, 2xl-medium)│           │ [Primary][Secondary]│ │  │\r\n│  │ └─────────────────┘           └─────────────────────┘ │  │\r\n│  └───────────────────────────────────────────────────────┘  │\r\n│  24px gap                                                   │\r\n│  ┌───────────────────────────────────────────────────────┐  │\r\n│  │ Details Row (Content Projection)                     │  │\r\n│  │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐     │  │\r\n│  │ │ Data Item 1 │ │ Data Item 2 │ │ Data Item 3 │ ... │  │\r\n│  │ └─────────────┘ └─────────────┘ └─────────────┘     │  │\r\n│  └───────────────────────────────────────────────────────┘  │\r\n│  Width: 83.33% (10/12 columns of parent), centered        │\r\n└─────────────────────────────────────────────────────────────┘\r\n\\`\\`\\`\r\n\r\n## Usage\r\n\r\nPerfect for entity detail pages where you need to display:\r\n- Entity title (e.g., property name, lease reference)\r\n- Action buttons (edit, delete, follow, etc.)\r\n- Metadata items using ds-data-item components\r\n\r\nThe details row uses content projection with \\`slot=\"details\"\\` to allow flexible arrangement of data items.\r\n\r\n## Content Projection\r\n\r\n\\`\\`\\`html\r\n<ds-header-details title=\"Entity Name\">\r\n  <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 24px;\">\r\n    <ds-data-item label=\"Field 1\" value=\"Value 1\" layout=\"horizontal\" />\r\n    <ds-data-item label=\"Field 2\" value=\"Value 2\" layout=\"horizontal\" />\r\n  </div>\r\n</ds-header-details>\r\n\\`\\`\\`\r\n\r\n## Best Practices\r\n\r\n### Do ✅\r\n- Use descriptive, entity-specific titles\r\n- Limit to 2-3 primary actions to avoid overwhelming users\r\n- Use horizontal layout for data items in the details row\r\n- Provide meaningful action labels and icons\r\n\r\n### Don't ❌\r\n- Don't use generic titles like \"Details\" or \"Entity\"\r\n- Don't overcrowd the actions area with too many buttons\r\n- Don't mix vertical and horizontal data item layouts\r\n- Don't forget to handle action click events\r\n\r\n## Responsive Behavior\r\n\r\n- **Desktop (>768px)**: Full horizontal layout with side-by-side title and actions\r\n- **Tablet (≤768px)**: Title and actions stack vertically with reduced spacing  \r\n- **Mobile (≤480px)**: Compact spacing and optimized touch targets\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    title: {\r\n      control: 'text',\r\n      description: 'The main title displayed in the header'\r\n    },\r\n    showPrimaryAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the primary action button'\r\n    },\r\n    primaryActionText: {\r\n      control: 'text',\r\n      description: 'Text for the primary action button'\r\n    },\r\n    primaryActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon for the primary action button'\r\n    },\r\n    primaryActionVariant: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\r\n      description: 'Visual variant for the primary action button'\r\n    },\r\n    showSecondaryAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the secondary action button'\r\n    },\r\n    secondaryActionText: {\r\n      control: 'text',\r\n      description: 'Text for the secondary action button'\r\n    },\r\n    secondaryActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon for the secondary action button'\r\n    },\r\n    secondaryActionVariant: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\r\n      description: 'Visual variant for the secondary action button'\r\n    },\r\n    showMoreActions: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the more actions (three dots) button'\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsIconComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Icon',\r\n  component: DsIconComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    name: {\r\n      control: { type: 'text' },\r\n      description: 'The name of the icon to display',\r\n    },\r\n    size: {\r\n      control: { type: 'select' },\r\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\r\n      description: 'The size of the icon (pixel values or custom CSS value)',\r\n    },\r\n    color: {\r\n      control: { type: 'text' },\r\n      description: 'The color of the icon. Use predefined values (primary, secondary, tertiary, brand, success, warning, destructive) or any CSS color value (#hex, rgb(), hsl(), var(), etc.)',\r\n    },\r\n    interactive: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the icon has interactive states (hover, active)',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsInlineMessageComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Inline Message',\r\n  component: DsInlineMessageComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsButtonComponent],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'information'],\r\n      description: 'Visual style variant of the message',\r\n    },\r\n    title: {\r\n      control: 'text',\r\n      description: 'Title text displayed in the message',\r\n    },\r\n    description: {\r\n      control: 'text',\r\n      description: 'Optional description text',\r\n    },\r\n    icon: {\r\n      control: 'text',\r\n      description: 'Custom icon name (optional)',\r\n    },\r\n    iconSize: {\r\n      control: 'text',\r\n      description: 'Icon size',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsFormFieldComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Form Field',\r\n  component: DsFormFieldComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsFormFieldComponent, DsInputComponent, NgpError],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: { layout: 'centered' },\r\n  argTypes: {\r\n    label: { control: 'text' },\r\n    description: { control: 'text' },\r\n    labelId: { control: 'text' },\r\n    descriptionId: { control: 'text' },\r\n  },\r\n  args: {\r\n    label: 'Email',\r\n    description: 'We will never share your email.',\r\n    labelId: 'email-label',\r\n    descriptionId: 'email-desc',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsInputComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Input',\r\n  component: DsInputComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      }\r\n    }\r\n  },\r\n  decorators: [\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\r\n    type: { control: { type: 'select' }, options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'] },\r\n    placeholder: { control: 'text' },\r\n    disabled: { control: 'boolean' },\r\n    readonly: { control: 'boolean' },\r\n    required: { control: 'boolean' },\r\n    clearable: { control: 'boolean' },\r\n    ghost: { control: 'boolean' },\r\n    leadingIcon: { control: 'text' },\r\n    trailingIcon: { control: 'text' },\r\n    ariaLabel: { control: 'text' },\r\n    ariaDescribedBy: { control: 'text' },\r\n  },\r\n  args: {\r\n    variant: 'default',\r\n    type: 'text',\r\n    placeholder: 'Enter text...',\r\n    disabled: false,\r\n    readonly: false,\r\n    required: false,\r\n    clearable: false,\r\n    ghost: false,\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsLabelComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Label',\r\n  component: DsLabelComponent,\r\n  tags: ['autodocs'],\r\n  parameters: { layout: 'centered' },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsInputComponent],\r\n    })\r\n  ],\r\n  argTypes: {\r\n    className: {\r\n      control: 'text',\r\n      description: 'Additional CSS classes to apply to the label',\r\n    },\r\n    for: {\r\n      control: 'text',\r\n      description: 'The ID of the form control this label is associated with',\r\n    },\r\n    id: {\r\n      control: 'text',\r\n      description: 'The ID of the label element',\r\n    },\r\n    size: {\r\n      control: 'radio',\r\n      options: ['sm', 'md'],\r\n      description: 'The size of the label text (sm = ui-xs-regular, md = ui-sm-regular)',\r\n      defaultValue: 'md',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsLinkComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Link',\r\n  component: DsLinkComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    href: {\r\n      control: 'text',\r\n    },\r\n    target: {\r\n      control: 'select',\r\n      options: ['_self', '_blank', '_parent', '_top'],\r\n    },\r\n    rel: {\r\n      control: 'text',\r\n    },\r\n    content: {\r\n      control: 'text',\r\n    },\r\n    showIcon: {\r\n      control: 'boolean',\r\n    },\r\n    iconName: {\r\n      control: 'text',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list/ds-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsListComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/List',\r\n  component: DsListComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsListItemComponent, DsButtonComponent, DsMetadataItemComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA container component that provides consistent styling for lists of items.\r\nHandles border radius, dividers, and spacing automatically.\r\n\r\n## Features\r\n- Consistent border radius handling\r\n- Automatic dividers between items\r\n- Proper hover state management\r\n- Responsive padding and spacing\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<ds-list>\r\n  <ds-list-item title=\"First item\">\r\n    <div slot=\"metadata\">\r\n      <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n    </div>\r\n    <div slot=\"actions\">\r\n      <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n      <ds-button variant=\"primary\" size=\"sm\">Action</ds-button>\r\n    </div>\r\n  </ds-list-item>\r\n  <ds-list-item title=\"Second item\">...</ds-list-item>\r\n</ds-list>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsListItemComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/List Item',\r\n  component: DsListItemComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsButtonComponent, DsMetadataItemComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA versatile list item component that supports a title with metadata and action buttons.\r\n\r\n## Features\r\n\r\n- **Title Property**: Configurable title with consistent typography\r\n- **Metadata Slot**: Flexible slot for metadata items (status, timestamps, etc.)\r\n- **Actions Slot**: Action buttons that appear on hover\r\n- **Hover State**: Subtle background change and action reveal on hover\r\n- **Responsive Layout**: Adapts to different screen sizes\r\n\r\n## Slots\r\n\r\n- **metadata**: For metadata items like status indicators, timestamps, etc.\r\n- **actions**: For action buttons that appear on hover\r\n\r\n## Examples\r\n\r\n\\`\\`\\`html\r\n<ds-list-item title=\"Review pending changes\">\r\n  <!-- Metadata slot -->\r\n  <div slot=\"metadata\">\r\n    <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n    <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to John\" />\r\n  </div>\r\n  \r\n  <!-- Actions slot -->\r\n  <div slot=\"actions\">\r\n    <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n    <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\r\n  </div>\r\n</ds-list-item>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    title: {\r\n      control: 'text',\r\n      description: 'The title text to display',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsListboxComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Listbox',\r\n  component: DsListboxComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormsModule, DsButtonComponent, DsIconButtonComponent],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  argTypes: {\r\n    multiple: {\r\n      control: 'boolean',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    width: {\r\n      control: 'text',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsLoadingLabelComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Loading Label',\r\n  component: DsLoadingLabelComponent,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA loading label component that displays a sequence of messages with smooth transitions.\r\nFeatures:\r\n- Vertical slide transitions between messages\r\n- Animated ellipsis dots\r\n- Customizable text styling via design system classes\r\n- Automatic message cycling\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    messages: {\r\n      control: 'object',\r\n      description: 'Array of loading messages to cycle through',\r\n    },\r\n    styleClass: {\r\n      control: 'select',\r\n      options: [\r\n        'body-sm-regular',\r\n        'body-sm-medium',\r\n        'body-sm-semiBold',\r\n        'body-base-regular',\r\n        'body-base-medium',\r\n        'body-base-semiBold',\r\n        'body-lg-regular',\r\n        'body-lg-medium',\r\n        'body-lg-semiBold',\r\n      ],\r\n      description: 'CSS class to apply for text styling',\r\n    },\r\n    spinnerSize: {\r\n      control: 'text',\r\n      description: 'Size of the spinner in pixels',\r\n    },\r\n    useShimmer: {\r\n      control: 'boolean',\r\n      description: 'Whether to apply shimmer effect to the text',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsMenuComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Menu',\r\n  component: DsMenuComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\">${story}</div>`\r\n    ),\r\n    applicationConfig({\r\n      providers: [],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsMetadataItemComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Metadata Item',\r\n  component: DsMetadataItemComponent,\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA compact component for displaying metadata information with an icon and text. Perfect for status indicators, timestamps, and other supplementary information.\r\n\r\n## Features\r\n\r\n- **Compact Design**: 20px height with 4px gap between icon and text\r\n- **Consistent Typography**: Uses ui-xs-regular (12px) for text\r\n- **Semantic Colors**: Uses tertiary text color for both icon and text\r\n- **Tooltip Support**: Optional tooltip for additional context\r\n- **Accessible**: Follows WCAG guidelines for color contrast and interactive elements\r\n\r\n## Usage Guidelines\r\n\r\n1. Use for supplementary information that doesn't require user interaction\r\n2. Keep text content concise and clear\r\n3. Choose appropriate icons that enhance understanding\r\n4. Add tooltips for additional context when needed\r\n5. Group related metadata items with consistent spacing\r\n\r\n## Examples\r\n\r\n\\`\\`\\`html\r\n<!-- Basic usage -->\r\n<ds-metadata-item\r\n  icon=\"remixTimeLine\"\r\n  value=\"4 hours ago\"\r\n/>\r\n\r\n<!-- With tooltip -->\r\n<ds-metadata-item\r\n  icon=\"remixSurveyLine\"\r\n  value=\"Based on 12 inquiries\"\r\n  tooltip=\"Data collected from recent customer inquiries\"\r\n/>\r\n\r\n<!-- Multiple items -->\r\n<div style=\"display: flex; gap: 12px;\">\r\n  <ds-metadata-item\r\n    icon=\"remixSparklingFill\"\r\n    value=\"Important\"\r\n  />\r\n  <ds-metadata-item\r\n    icon=\"remixTimeLine\"\r\n    value=\"4 hours ago\"\r\n  />\r\n</div>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    icon: {\r\n      control: 'text',\r\n      description: 'The name of the icon to display',\r\n    },\r\n    value: {\r\n      control: 'text',\r\n      description: 'The text value to display',\r\n    },\r\n    tooltip: {\r\n      control: 'text',\r\n      description: 'Optional tooltip text for additional context',\r\n    },\r\n  },\r\n  args: {\r\n    icon: 'remixTimeLine',\r\n    value: '4 hours ago',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsSelectComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Select',\r\n  component: DsSelectComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormsModule],\r\n    }),\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'error', 'warning', 'success'],\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    required: {\r\n      control: 'boolean',\r\n    },\r\n    ghost: {\r\n      control: 'boolean',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsShapeIndicatorComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Shape Indicator',\r\n  component: DsShapeIndicatorComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    shape: {\r\n      control: 'select',\r\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\r\n    },\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\r\n    },\r\n    label: {\r\n      control: 'text',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsSidebarComponent>",
                "defaultValue": "{\r\n  title: 'Application shell/Sidebar',\r\n  component: DsSidebarComponent,\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      story: { inline: true },\r\n      source: { excludeDecorators: true }\r\n    }\r\n  },\r\n  tags: ['autodocs'],\r\n  args: {\r\n    groups: demoGroups,\r\n  },\r\n  argTypes: {\r\n    groups: {\r\n      description: 'Array of sidebar groups with their items',\r\n      control: 'object',\r\n      table: {\r\n        type: { \r\n          summary: 'SidebarGroup[]',\r\n          detail: `interface SidebarGroup {\r\n  id: string;\r\n  label: string;\r\n  items: {\r\n    id: string;\r\n    label: string;\r\n    icon?: string;\r\n    badgeText?: string;\r\n  }[];\r\n  expanded?: boolean;\r\n  showLabel?: boolean;\r\n}`\r\n        }\r\n      }\r\n    },\r\n    activeItemId: {\r\n      description: 'ID of the currently active item',\r\n      control: 'text'\r\n    },\r\n    collapsed: {\r\n      description: 'Whether the sidebar is collapsed',\r\n      control: 'boolean'\r\n    },\r\n    showGlobalAction: {\r\n      description: 'Whether to show the global action button',\r\n      control: 'boolean'\r\n    },\r\n    globalActionLabel: {\r\n      description: 'Label for the global action button',\r\n      control: 'text'\r\n    },\r\n    globalActionIcon: {\r\n      description: 'Icon for the global action button',\r\n      control: 'text'\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AiSparksLoadingComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/AISparksLoading',\r\n  component: AiSparksLoadingComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    sparkImagePath: {\r\n      control: { type: 'text' },\r\n      description: 'Path to the spark image asset'\r\n    },\r\n    isLoading: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the loading animation is active'\r\n    },\r\n    customSparks: {\r\n      control: { type: 'object' },\r\n      description: 'Optional custom spark configurations'\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AiSparksStaticComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/AISparksStatic',\r\n  component: AiSparksStaticComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    sparkImagePath: {\r\n      control: { type: 'text' },\r\n      description: 'Path to the spark image asset'\r\n    },\r\n    animationState: {\r\n      control: { type: 'select' },\r\n      options: ['appear', 'static', 'disappear'],\r\n      description: 'Current animation state'\r\n    },\r\n    customSparks: {\r\n      control: { type: 'object' },\r\n      description: 'Optional custom spark configurations'\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsSpinnerComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Spinner',\r\n  component: DsSpinnerComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    size: {\r\n      control: 'select',\r\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\r\n      description: 'Size of the spinner',\r\n      table: {\r\n        defaultValue: { summary: '20px' }\r\n      }\r\n    },\r\n    color: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'tertiary', 'brand', 'success', 'warning', 'destructive'],\r\n      description: 'Color of the spinner',\r\n      table: {\r\n        defaultValue: { summary: 'tertiary' }\r\n      }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTabs>",
                "defaultValue": "{\r\n  title: 'Primitives/Tabs',\r\n  component: DsTabs,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsTabs, DsTab],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTextareaComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Textarea',\r\n  component: DsTextareaComponent,\r\n  parameters: { layout: 'centered' },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\r\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\r\n    placeholder: { control: 'text' },\r\n    disabled: { control: 'boolean' },\r\n    readonly: { control: 'boolean' },\r\n    required: { control: 'boolean' },\r\n    rows: { control: { type: 'number', min: 1, max: 20 } },\r\n    cols: { control: { type: 'number', min: 10, max: 100 } },\r\n    maxlength: { control: { type: 'number', min: 1, max: 1000 } },\r\n    minlength: { control: { type: 'number', min: 0, max: 100 } },\r\n    ariaLabel: { control: 'text' },\r\n    ariaDescribedBy: { control: 'text' },\r\n    ariaLabelledBy: { control: 'text' },\r\n  },\r\n  args: {\r\n    variant: 'default',\r\n    size: 'md',\r\n    placeholder: 'Enter your message...',\r\n    disabled: false,\r\n    readonly: false,\r\n    required: false,\r\n    rows: 4,\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTileComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Tile',\r\n  component: DsTileComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixEditLine,\r\n          remixMoreLine,\r\n          remixFileList3Line,\r\n          remixUserLine,\r\n          remixDownloadLine,\r\n          remixFilterLine,\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n        }),\r\n      ],\r\n    }),\r\n    moduleMetadata({\r\n      imports: [\r\n        DsTileSectionComponent,\r\n        TileHeaderComponent,\r\n        DsButtonComponent,\r\n        DsIconButtonComponent,\r\n        DsIconComponent,\r\n        DsAvatarComponent,\r\n        DsDataTableComponent,\r\n        DsBadgeComponent,\r\n        DsDataItemComponent,\r\n        DsMetadataItemComponent,\r\n      ],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    orientation: {\r\n      control: 'select',\r\n      options: ['vertical', 'horizontal'],\r\n      description: 'Layout orientation of tile sections',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTooltipComponent>",
                "defaultValue": "{\r\n  title: 'Primitives/Tooltip',\r\n  component: DsTooltipComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    text: {\r\n      control: { type: 'text' },\r\n      description: 'The text content to display in the tooltip',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTopbarComponent>",
                "defaultValue": "{\r\n  title: 'Application shell/Topbar',\r\n  component: DsTopbarComponent,\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      description: {\r\n        component: 'A page header component that displays a page title with icon on the left and action buttons with user avatar on the right. Can optionally show breadcrumb navigation for nested pages.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    pageTitle: {\r\n      control: 'text',\r\n      description: 'The title of the page',\r\n    },\r\n    iconName: {\r\n      control: 'text',\r\n      description: 'Icon name to display next to the page title',\r\n    },\r\n    userInitials: {\r\n      control: 'text',\r\n      description: 'User initials to display in the avatar',\r\n    },\r\n    showBreadcrumbs: {\r\n      control: 'boolean',\r\n      description: 'Whether to show breadcrumb navigation',\r\n    },\r\n    breadcrumbItems: {\r\n      control: 'object',\r\n      description: 'Array of breadcrumb items to display',\r\n    },\r\n    showFirstAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the first action button',\r\n    },\r\n    firstActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon name for the first action button',\r\n    },\r\n    firstActionLabel: {\r\n      control: 'text',\r\n      description: 'Aria label for the first action button',\r\n    },\r\n    showSecondAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the second action button',\r\n    },\r\n    secondActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon name for the second action button',\r\n    },\r\n    secondActionLabel: {\r\n      control: 'text',\r\n      description: 'Aria label for the second action button',\r\n    },\r\n  },\r\n  args: {\r\n    pageTitle: 'Dashboard',\r\n    iconName: 'remixHome4Line',\r\n    userInitials: 'JD',\r\n    showBreadcrumbs: false,\r\n    breadcrumbItems: [],\r\n    showFirstAction: true,\r\n    firstActionIcon: 'remixNotification3Line',\r\n    firstActionLabel: 'Notifications',\r\n    showSecondAction: true,\r\n    secondActionIcon: 'remixSettings3Line',\r\n    secondActionLabel: 'Settings',\r\n  },\r\n}"
            },
            {
                "name": "MinimalNoActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Minimal header example with no action buttons, useful for read-only entity displays or when actions are handled elsewhere on the page.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Simple Entity Details',\r\n    showPrimaryAction: false,\r\n    showSecondaryAction: false,\r\n    showMoreActions: false\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Created\"\r\n            value=\"March 15, 2024\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Last Modified\"\r\n            value=\"Yesterday\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "MobileView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    title: 'Mobile Responsive Header',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Edit',\r\n    primaryActionIcon: 'remixEditLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'Share',\r\n    secondaryActionIcon: 'remixShareLine',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  parameters: {\r\n    viewport: {\r\n      defaultViewport: 'mobile1'\r\n    },\r\n    docs: {\r\n      description: {\r\n        story: 'Mobile responsive behavior showing how the header adapts to smaller screens with stacked layout and compact spacing. Data items switch to vertical layout for better mobile experience.'\r\n      }\r\n    }\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Owner\"\r\n            value=\"John Doe\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"JD\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "MobileViewWithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    viewport: {\r\n      defaultViewport: 'mobile1',\r\n    },\r\n  },\r\n  args: {\r\n    pageTitle: 'Account Details',\r\n    iconName: 'remixSmartphoneLine',\r\n    userInitials: 'MB',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Settings', path: '/settings', isLast: false },\r\n      { label: 'Account', path: '/settings/account', isLast: false },\r\n      { label: 'Details', path: '/settings/account/details', isLast: true }\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'multiple'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-accordion [type]=\"type\">\r\n        <ds-accordion-item value=\"features\" heading=\"Key Features\">\r\n          <ul class=\"tw-list-disc\">\r\n            <li>Property Management</li>\r\n            <li>Tenant Portal</li>\r\n            <li>Maintenance Tracking</li>\r\n            <li>Financial Reports</li>\r\n          </ul>\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"pricing\" heading=\"Pricing Plans\">\r\n          <ul class=\"tw-list-disc\">\r\n            <li>Basic: Free</li>\r\n            <li>Professional: $29/month</li>\r\n            <li>Enterprise: Custom pricing</li>\r\n          </ul>\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"support\" heading=\"Support Options\">\r\n          <ul class=\"tw-list-disc\">\r\n            <li>24/7 Email Support</li>\r\n            <li>Live Chat</li>\r\n            <li>Phone Support (Enterprise)</li>\r\n          </ul>\r\n        </ds-accordion-item>\r\n      </ds-accordion>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "MultipleActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Document Manager</header-title>\r\n            <header-actions>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixFilterLine\">Filter</ds-button>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">New</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">Manage your documents with multiple action options.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "MultipleSectionsHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"horizontal\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Overview</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\r\n            <ds-data-item \r\n              label=\"Total Revenue\" \r\n              value=\"$45,231\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-lg'\" />\r\n            <ds-data-item \r\n              label=\"Growth\" \r\n              value=\"+20.1%\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-md tw-text-success-strong'\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Activity</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\r\n            <ds-data-item \r\n              label=\"New Users\" \r\n              value=\"1,234\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-lg'\" />\r\n            <ds-data-item \r\n              label=\"Conversion\" \r\n              value=\"3.2%\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-md'\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "MultipleSectionsVertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Personal Information</header-title>\r\n            <header-actions>\r\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Name\" value=\"Jane Smith\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Email\" value=\"jane.smith@example.com\" layout=\"horizontal\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Account Settings</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Plan\" value=\"Professional\" layout=\"horizontal\" />\r\n            <ds-data-item \r\n              label=\"Status\" \r\n              value=\"Active\" \r\n              valueType=\"badge\"\r\n              layout=\"horizontal\"\r\n              badgeVariant=\"success\"\r\n              badgeContent=\"Active\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Preferences</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\" variant=\"ghost\">Reset</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">Configure your application preferences here.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Read', value: 'read' },\r\n      { id: '2', label: 'Write', value: 'write' },\r\n      { id: '3', label: 'Delete', value: 'delete' },\r\n      { id: '4', label: 'Admin', value: 'admin' },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Select Permissions</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "NestedPageWithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Edit Profile',\r\n    iconName: 'remixUser3Line',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Settings', path: '/settings', isLast: false },\r\n      { label: 'Users', path: '/settings/users', isLast: false },\r\n      { label: 'Edit Profile', path: '/settings/users/profile', isLast: true }\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "NoActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Read Only Page',\r\n    iconName: 'remixEyeLine',\r\n    userInitials: 'RO',\r\n    showFirstAction: false,\r\n    showSecondAction: false,\r\n  },\r\n}"
            },
            {
                "name": "NoDeleteAllowed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      lockedData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"lockedData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"false\"\r\n        [addRowButtonText]=\"'Add line'\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "NoDragHandle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      noDragData: signal([...sampleProducts]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"noDragData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [showDragHandle]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Overview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'The Header Details component provides a consistent layout for entity detail pages with configurable actions and flexible metadata display.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Entity Detail Example',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Edit',\r\n    primaryActionIcon: 'remixEditLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'Share',\r\n    secondaryActionIcon: 'remixShareLine',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n        (primaryActionClick)=\"onPrimaryAction($event)\"\r\n        (secondaryActionClick)=\"onSecondaryAction($event)\"\r\n        (moreActionsClick)=\"onMoreActions($event)\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Owner\"\r\n            value=\"Sarah Johnson\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"SJ\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Created\"\r\n            value=\"March 15, 2024\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Category\"\r\n            value=\"Important\"\r\n            layout=\"vertical\"\r\n            valueType=\"icon-text\"\r\n            iconName=\"remixStarFill\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `,\r\n    methods: {\r\n      onPrimaryAction: (event: MouseEvent) => {\r\n        console.log('Primary action clicked:', event);\r\n      },\r\n      onSecondaryAction: (event: MouseEvent) => {\r\n        console.log('Secondary action clicked:', event);\r\n      },\r\n      onMoreActions: (event: MouseEvent) => {\r\n        console.log('More actions clicked:', event);\r\n      }\r\n    }\r\n  })\r\n}"
            },
            {
                "name": "PastAndCurrentDatesOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker [disableFutureDates]=\"true\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Past Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n      <p class=\"body-sm-regular tw-mt-2 tw-text-gray-600\">Future dates are disabled</p>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Pentagon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    shape: 'pentagon',\r\n    variant: 'brand',\r\n    label: 'Maintenance',\r\n  },\r\n}"
            },
            {
                "name": "PhotoType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"John Doe\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"Alice Smith\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"Michael Johnson\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"Emily Brown\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideAllRemixIcons()\r\n      ]\r\n    })\r\n  ],\r\n  parameters: {\r\n    actions: { argTypesRegex: '^on[A-Z].*' },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n    options: {\r\n      storySort: {\r\n        order: ['*'],\r\n        method: 'alphabetical'\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "priorityOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: 'low', label: 'Low', value: 'Low' },\r\n  { id: 'medium', label: 'Medium', value: 'Medium' },\r\n  { id: 'high', label: 'High', value: 'High' },\r\n]"
            },
            {
                "name": "productColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const price = info.getValue() as number;\r\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const stock = info.getValue() as number;\r\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\r\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        in_stock: 'success',\r\n        low_stock: 'warning',\r\n        out_of_stock: 'destructive',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      const label = status.replace('_', ' ').toUpperCase();\r\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\r\n    },\r\n  },\r\n]"
            },
            {
                "name": "productColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter product name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'sku',\r\n    header: 'SKU',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'SKU-000'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: categoryOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 1,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n]"
            },
            {
                "name": "Products",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    searchPlaceholder: 'Search products...',\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "ProductsSortable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      productData: signal([...sampleProducts]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        sku: '',\r\n        category: 'Electronics',\r\n        price: 0,\r\n        stock: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onSortingChanged: (sorting: any) => {\r\n        console.log('Sorting changed:', sorting);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"productData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add product'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (sortingChanged)=\"onSortingChanged($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "ProjectOverview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Project Overview',\r\n    iconName: 'remixFolderLine',\r\n    userInitials: 'AM',\r\n  },\r\n}"
            },
            {
                "name": "PropertyDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Real estate property management example showing how to display property information with relevant actions like editing and viewing related leases.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Sunset Boulevard Apartments',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Edit Property',\r\n    primaryActionIcon: 'remixEditLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'View Leases',\r\n    secondaryActionIcon: 'remixFileList3Line',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Property Type\"\r\n            value=\"Residential\"\r\n            layout=\"vertical\"\r\n            valueType=\"icon-text\"\r\n            iconName=\"remixHome4Line\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Owner\"\r\n            value=\"Sarah Johnson\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"SJ\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Units\"\r\n            value=\"24 units\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Readonly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { readonly: true, placeholder: 'Readonly input' },\r\n}"
            },
            {
                "name": "ReadOnlyMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      readOnlyData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"readOnlyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"false\"\r\n        [allowDeleteRow]=\"false\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "ResponsiveLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <p style=\"margin: 0; font-size: 14px; color: var(--text-color-default-secondary);\">\r\n          Resize your browser to see the responsive behavior. Horizontal tiles stack vertically on mobile, \r\n          and section headers stack their title and actions.\r\n        </p>\r\n        \r\n        <ds-tile orientation=\"horizontal\">\r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>Left Section</header-title>\r\n              <header-actions>\r\n                <ds-button size=\"sm\" variant=\"ghost\">Action</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <p style=\"margin: 0;\">This section is on the left on desktop and stacks on top on mobile.</p>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>Right Section</header-title>\r\n              <header-actions>\r\n                <ds-button size=\"sm\">Action</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <p style=\"margin: 0;\">This section is on the right on desktop and stacks below on mobile.</p>\r\n          </ds-tile-section>\r\n        </ds-tile>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "RightDrawer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    position: 'right'\r\n  },\r\n  render: Template\r\n}"
            },
            {
                "name": "sampleInvoiceLines",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InvoiceLine[]",
                "defaultValue": "[\r\n  { \r\n    id: '1', \r\n    name: 'Administration fee', \r\n    description: 'Covers handling and coordination', \r\n    quantity: 1, \r\n    unitPrice: 500, \r\n    discount: 0, \r\n    total: 500 \r\n  },\r\n  { \r\n    id: '2', \r\n    name: 'Miscellaneous', \r\n    description: 'Various small items', \r\n    quantity: 2, \r\n    unitPrice: 400, \r\n    discount: 0, \r\n    total: 800 \r\n  },\r\n  { \r\n    id: '3', \r\n    name: 'Technical Manager', \r\n    description: 'Consulting services', \r\n    quantity: 6.5, \r\n    unitPrice: 800, \r\n    discount: 0, \r\n    total: 5200 \r\n  },\r\n]"
            },
            {
                "name": "sampleInvoiceLines",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InvoiceLine[]",
                "defaultValue": "[\r\n  { id: 1, description: 'Professional Services - Consulting', quantity: 10, unitPrice: 150.00, total: 1500.00 },\r\n  { id: 2, description: 'Software License - Annual', quantity: 5, unitPrice: 299.99, total: 1499.95 },\r\n  { id: 3, description: 'Cloud Hosting - Monthly', quantity: 12, unitPrice: 49.99, total: 599.88 },\r\n  { id: 4, description: 'Support & Maintenance', quantity: 1, unitPrice: 999.00, total: 999.00 },\r\n]"
            },
            {
                "name": "sampleProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Product[]",
                "defaultValue": "[\r\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\r\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\r\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\r\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\r\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\r\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\r\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\r\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\r\n]"
            },
            {
                "name": "sampleProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Product[]",
                "defaultValue": "[\r\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\r\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\r\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\r\n]"
            },
            {
                "name": "sampleTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Task[]",
                "defaultValue": "[\r\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\r\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\r\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\r\n]"
            },
            {
                "name": "sampleUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "User[]",
                "defaultValue": "[\r\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\r\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\r\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\r\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\r\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\r\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\r\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\r\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\r\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\r\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\r\n]"
            },
            {
                "name": "SectionWithoutHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <p style=\"margin: 0;\">This section has no header, just content with default padding.</p>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Section with Header</header-title>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">This section has a header for comparison.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "SectionWithoutPadding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>With Padding (Default)</header-title>\r\n          </tile-header>\r\n          <div style=\"background: #f0f0f0; padding: 8px; border-radius: 4px;\">\r\n            This content has the default 20px padding around it.\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section [padding]=\"false\">\r\n          <div style=\"background: #f0f0f0; padding: 20px;\">\r\n            This content has no section padding. The gray box extends to the edges.\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "SimpleIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    icon: 'remixEditLine',\r\n    variant: 'ghost',\r\n    size: 'md',\r\n    ariaLabel: 'Edit item',\r\n    tooltip: 'Edit this item'\r\n  }\r\n}"
            },
            {
                "name": "simpleOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsListboxOption[]",
                "defaultValue": "[\r\n  { id: '1', label: 'Option 1', value: 1 },\r\n  { id: '2', label: 'Option 2', value: 2 },\r\n  { id: '3', label: 'Option 3', value: 3 },\r\n  { id: '4', label: 'Option 4', value: 4 },\r\n]"
            },
            {
                "name": "simpleOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsSelectOption[]",
                "defaultValue": "[\r\n  { id: '1', label: 'Option 1', value: 1 },\r\n  { id: '2', label: 'Option 2', value: 2 },\r\n  { id: '3', label: 'Option 3', value: 3 },\r\n  { id: '4', label: 'Option 4', value: 4 },\r\n]"
            },
            {
                "name": "Single",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'single',\r\n    collapsible: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-accordion [type]=\"type\" [collapsible]=\"collapsible\">\r\n        <ds-accordion-item value=\"item-1\" heading=\"What is Propbinder?\">\r\n          Propbinder is a modern property management platform that helps you manage your properties efficiently.\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"item-2\" heading=\"How does it work?\">\r\n          Our platform provides tools for property listing, tenant management, maintenance tracking, and financial reporting.\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"item-3\" heading=\"Is it secure?\">\r\n          Yes, we use industry-standard encryption and security practices to protect your data.\r\n        </ds-accordion-item>\r\n      </ds-accordion>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "SingleAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Profile',\r\n    iconName: 'remixUser3Line',\r\n    userInitials: 'SA',\r\n    showFirstAction: true,\r\n    showSecondAction: false,\r\n    firstActionIcon: 'remixEditLine',\r\n    firstActionLabel: 'Edit Profile',\r\n  },\r\n}"
            },
            {
                "name": "SingleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    multiple: false,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Select Option</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (24px)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (32px)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (48px)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (64px)</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-button size=\"sm\">Small</ds-button>\r\n        <ds-button size=\"md\">Medium</ds-button>\r\n        <ds-button size=\"lg\">Large</ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n        <ds-icon-button\r\n          icon=\"remixSettingsLine\"\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          ariaLabel=\"Small settings button\"\r\n          tooltip=\"Settings (small)\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixSettingsLine\"\r\n          variant=\"ghost\"\r\n          size=\"md\"\r\n          ariaLabel=\"Medium settings button\"\r\n          tooltip=\"Settings (medium)\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixSettingsLine\"\r\n          variant=\"ghost\"\r\n          size=\"lg\"\r\n          ariaLabel=\"Large settings button\"\r\n          tooltip=\"Settings (large)\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox size=\"sm\" label=\"Small checkbox\"></ds-checkbox>\r\n        <ds-checkbox size=\"md\" label=\"Medium checkbox\"></ds-checkbox>\r\n        <ds-checkbox size=\"lg\" label=\"Large checkbox\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\r\n        <ds-icon name=\"remixHomeLine\" size=\"12px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"14px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"16px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"18px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"20px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"22px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"24px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"32px\"></ds-icon>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    className: '',\r\n  },\r\n  render: () => ({\r\n    styles: [`\r\n      :host {\r\n        display: block;\r\n        padding: 1rem;\r\n        background: white;\r\n      }\r\n      .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 1rem;\r\n      }\r\n    `],\r\n    template: `\r\n      <div class=\"container\">\r\n        <ds-label size=\"sm\">\r\n          Small Label (ui-xs-regular)\r\n        </ds-label>\r\n        <ds-label size=\"md\">\r\n          Medium Label (ui-sm-regular)\r\n        </ds-label>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\r\n        <ds-textarea size=\"sm\" placeholder=\"Small textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea size=\"md\" placeholder=\"Medium textarea\" rows=\"4\"></ds-textarea>\r\n        <ds-textarea size=\"lg\" placeholder=\"Large textarea\" rows=\"5\"></ds-textarea>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "SlotContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    href: '#',\r\n    showIcon: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\">\r\n        Link with <strong>formatted</strong> content\r\n      </ds-link>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "SlotContentWithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    href: 'mailto:contact@example.com',\r\n    showIcon: true,\r\n    iconName: 'remixMailLine',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\" [iconName]=\"iconName\">\r\n        Send us an <em>email</em>\r\n      </ds-link>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Square",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    shape: 'square',\r\n    variant: 'destructive',\r\n    label: 'Stage tags',\r\n  },\r\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button>Normal</ds-button>\r\n        <ds-button [disabled]=\"true\">Disabled</ds-button>\r\n        <ds-button [loading]=\"true\">Loading</ds-button>\r\n        <ds-button [pressed]=\"true\" variant=\"ghost\">Pressed</ds-button>\r\n        <ds-button \r\n          [expanded]=\"true\" \r\n          trailingIcon=\"remixArrowDownLine\"\r\n          variant=\"secondary\"\r\n        >\r\n          Expanded\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox label=\"Unchecked checkbox\"></ds-checkbox>\r\n        <ds-checkbox label=\"Checked checkbox\" [checked]=\"true\"></ds-checkbox>\r\n        <ds-checkbox label=\"Indeterminate checkbox\" [indeterminate]=\"true\"></ds-checkbox>\r\n        <ds-checkbox label=\"Disabled checkbox\" [disabled]=\"true\"></ds-checkbox>\r\n        <ds-checkbox label=\"Disabled checked checkbox\" [disabled]=\"true\" [checked]=\"true\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\r\n        <ds-textarea placeholder=\"Normal textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea placeholder=\"Disabled textarea\" [disabled]=\"true\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea placeholder=\"Readonly textarea\" [readonly]=\"true\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea placeholder=\"Required textarea\" [required]=\"true\" rows=\"3\"></ds-textarea>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Static",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'initials',\r\n    size: 'md',\r\n    initials: 'JD',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\r\n        <ds-avatar \r\n          [type]=\"type\"\r\n          [size]=\"size\"\r\n          [initials]=\"initials\"\r\n          [src]=\"src\"\r\n          [alt]=\"alt\"\r\n          [iconName]=\"iconName\"\r\n          [iconColor]=\"iconColor\"\r\n        ></ds-avatar>\r\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\r\n          Static avatar with no interactions\r\n        </p>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "statusOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: 'todo', label: 'To Do', value: 'To Do' },\r\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\r\n  { id: 'done', label: 'Done', value: 'Done' },\r\n]"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { variant: 'success', placeholder: 'Success state' },\r\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'success',\r\n  },\r\n}"
            },
            {
                "name": "SuccessMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'success',\r\n    title: 'Success',\r\n    description: 'A short description',\r\n  },\r\n}"
            },
            {
                "name": "SuccessVariant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker variant=\"success\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "taskColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  {\r\n    accessorKey: 'title',\r\n    header: 'Task',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter task title...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'assignee',\r\n    header: 'Assignee',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Assign to...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'priority',\r\n    header: 'Priority',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: priorityOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: statusOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'dueDate',\r\n    header: 'Due Date',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n]"
            },
            {
                "name": "TaskDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\r\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">Task Details</h3>\r\n        \r\n        <ds-data-item\r\n          label=\"Title\"\r\n          value=\"Implement user authentication\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Priority\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"warning\"\r\n          badgeContentType=\"text\"\r\n          badgeContent=\"High\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Status\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"blue\"\r\n          badgeContentType=\"indicator-text\"\r\n          badgeContent=\"In Progress\"\r\n          badgeIndicatorShape=\"circle\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Assignee\"\r\n          value=\"Sarah Wilson\"\r\n          layout=\"horizontal\"\r\n          valueType=\"avatar-text\"\r\n          avatarType=\"photo\"\r\n          avatarSrc=\"/Dummy-avatars/dummy-portrait-woman.jpg\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Due date\"\r\n          value=\"March 15, 2024\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-text\"\r\n          iconName=\"remixCalendarLine\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
            },
            {
                "name": "TaskMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <ds-metadata-item\r\n          icon=\"remixSparklingFill\"\r\n          value=\"Important\"\r\n          tooltip=\"High priority task\"\r\n        />\r\n        <ds-metadata-item\r\n          icon=\"remixSurveyLine\"\r\n          value=\"Based on 12 inquiries\"\r\n          tooltip=\"Aggregated from customer feedback\"\r\n        />\r\n        <ds-metadata-item\r\n          icon=\"remixTimeLine\"\r\n          value=\"4 hours ago\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
            },
            {
                "name": "TasksWithSelects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      taskData: signal([...sampleTasks]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        title: '',\r\n        assignee: '',\r\n        priority: 'Medium',\r\n        status: 'To Do',\r\n        dueDate: ''\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"taskData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add task'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: taskColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  template: `\r\n    <div style=\"padding: 20px;\">\r\n      <ds-button [ngpDialogTrigger]=\"drawer\" variant=\"primary\">Open Drawer</ds-button>\r\n      <p>This is the main page content. When you open the drawer, it should overlay this content with a semi-transparent background.</p>\r\n    </div>\r\n\r\n    <ng-template #drawer let-close=\"close\">\r\n      <div ngpDialogOverlay class=\"ds-drawer-overlay\">\r\n        <ds-drawer ngpDialog [position]=\"position\">\r\n          <h2 slot=\"header\" class=\"tw-text-xl tw-font-semibold\">Drawer Title</h2>\r\n          <div slot=\"content\">\r\n            <p class=\"tw-text-neutral-700 tw-mb-4\">This is the main content of the drawer.</p>\r\n            <p class=\"tw-text-neutral-600 tw-mb-4\">You can put any content here including forms, lists, or other components.</p>\r\n            <div class=\"tw-p-4 tw-bg-gray-50 tw-rounded-lg\">\r\n              <h3 class=\"tw-font-medium tw-mb-2\">Example Content</h3>\r\n              <p class=\"tw-text-sm tw-text-gray-600\">This drawer should slide in from the {{ position }} side of the screen.</p>\r\n            </div>\r\n          </div>\r\n          <div slot=\"footer\">\r\n            <ds-button variant=\"ghost\" (click)=\"close()\">Cancel</ds-button>\r\n            <ds-button variant=\"primary\" (click)=\"close()\">Save Changes</ds-button>\r\n          </div>\r\n        </ds-drawer>\r\n      </div>\r\n    </ng-template>\r\n  `\r\n})"
            },
            {
                "name": "TextBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Blue',\r\n    contentType: 'text',\r\n    variant: 'blue',\r\n  },\r\n}"
            },
            {
                "name": "TextBrand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Brand',\r\n    contentType: 'text',\r\n    variant: 'brand',\r\n  },\r\n}"
            },
            {
                "name": "TextDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Default',\r\n    contentType: 'text',\r\n    variant: 'default',\r\n  },\r\n}"
            },
            {
                "name": "TextDestructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Error',\r\n    contentType: 'text',\r\n    variant: 'destructive',\r\n  },\r\n}"
            },
            {
                "name": "TextGrey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Grey',\r\n    contentType: 'text',\r\n    variant: 'grey',\r\n  },\r\n}"
            },
            {
                "name": "TextLightPurple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Light Purple',\r\n    contentType: 'text',\r\n    variant: 'light-purple',\r\n  },\r\n}"
            },
            {
                "name": "TextLimeGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Lime Green',\r\n    contentType: 'text',\r\n    variant: 'lime-green',\r\n  },\r\n}"
            },
            {
                "name": "TextOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Orange',\r\n    contentType: 'text',\r\n    variant: 'orange',\r\n  },\r\n}"
            },
            {
                "name": "TextPink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Pink',\r\n    contentType: 'text',\r\n    variant: 'pink',\r\n  },\r\n}"
            },
            {
                "name": "TextSalmonOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Salmon Orange',\r\n    contentType: 'text',\r\n    variant: 'salmon-orange',\r\n  },\r\n}"
            },
            {
                "name": "TextSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Success',\r\n    contentType: 'text',\r\n    variant: 'success',\r\n  },\r\n}"
            },
            {
                "name": "TextWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Warning',\r\n    contentType: 'text',\r\n    variant: 'warning',\r\n  },\r\n}"
            },
            {
                "name": "TopbarDebug",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isMobileOverride: false, // Force desktop mode\r\n    isSidebarCollapsed: false,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Debug Page'\"\r\n        [iconName]=\"'remixHome4Line'\"\r\n        [userInitials]=\"'DB'\"\r\n        [showFirstAction]=\"false\"\r\n        [showSecondAction]=\"false\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Topbar Debug</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story tests the topbar component with minimal props to ensure it renders correctly in the app layout.</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Topbar Slot'\" \r\n                    [value]=\"'Using slot=topbar attribute'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'First Action'\" \r\n                    [value]=\"'Hidden (showFirstAction=false)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Second Action'\" \r\n                    [value]=\"'Hidden (showSecondAction=false)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Triangle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    shape: 'triangle',\r\n    variant: 'blue',\r\n    label: 'Upcoming',\r\n  },\r\n}"
            },
            {
                "name": "UsageExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Stage Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Category Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Inspection Status Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Defect Status Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"triangle\" variant=\"default\" label=\"Not a defect\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "userColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px\r\n        maxWidth: 'lg',  // 256px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        active: 'success',\r\n        inactive: 'grey',\r\n        pending: 'warning',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n]"
            },
            {
                "name": "userColumnsWithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  ...userColumns,\r\n  {\r\n    id: 'actions',\r\n    header: 'Actions',\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      return `\r\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\r\n            title=\"Edit\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n            </svg>\r\n          </button>\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\r\n            title=\"Delete\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\r\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      `;\r\n    },\r\n  },\r\n]"
            },
            {
                "name": "userColumnsWithSizing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px - narrow fixed width\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px minimum\r\n        maxWidth: 'lg',  // 256px maximum\r\n        truncate: true,  // Show ellipsis\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email Address (Very Long Header Name)',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: '300px', // Custom pixel value\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'xs',\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',\r\n        maxWidth: 'md',\r\n        truncate: false, // Allow wrapping instead of truncating\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const statusColors: Record<string, string> = {\r\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n      };\r\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n]"
            },
            {
                "name": "UserProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\r\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">User Profile</h3>\r\n        \r\n        <ds-data-item\r\n          label=\"Full name\"\r\n          value=\"Sarah Wilson\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Email\"\r\n          value=\"sarah.wilson@company.com\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Role\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"brand\"\r\n          badgeContentType=\"text\"\r\n          badgeContent=\"Admin\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Status\"\r\n          value=\"Online\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-text\"\r\n          iconName=\"remixCheckboxCircleFill\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Manager\"\r\n          value=\"John Doe\"\r\n          layout=\"horizontal\"\r\n          valueType=\"avatar-text\"\r\n          avatarType=\"initials\"\r\n          avatarInitials=\"JD\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
            },
            {
                "name": "UserSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'User Settings',\r\n    iconName: 'remixSettings3Line',\r\n    userInitials: 'SM',\r\n    firstActionIcon: 'remixSaveLine',\r\n    firstActionLabel: 'Save Settings',\r\n    secondActionIcon: 'remixRefreshLine',\r\n    secondActionLabel: 'Reset Settings',\r\n  },\r\n}"
            },
            {
                "name": "ValueTypesShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\r\n        <ds-data-item\r\n          label=\"Text value\"\r\n          value=\"Simple text content\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Icon + Text\"\r\n          value=\"With icon prefix\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-text\"\r\n          iconName=\"remixStarFill\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Avatar + Text\"\r\n          value=\"John Doe\"\r\n          layout=\"horizontal\"\r\n          valueType=\"avatar-text\"\r\n          avatarType=\"initials\"\r\n          avatarInitials=\"JD\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Badge value\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"success\"\r\n          badgeContentType=\"icon-text\"\r\n          badgeContent=\"Verified\"\r\n          badgeIcon=\"remixShieldCheckFill\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Link value\"\r\n          value=\"Visit documentation\"\r\n          layout=\"horizontal\"\r\n          valueType=\"link\"\r\n          linkHref=\"https://example.com/docs\"\r\n          linkTarget=\"_blank\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Icon + Link\"\r\n          value=\"Download report\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-link\"\r\n          linkHref=\"https://example.com/report.pdf\"\r\n          linkTarget=\"_blank\"\r\n          iconName=\"remixFileDownloadLine\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button variant=\"primary\">Primary</ds-button>\r\n        <ds-button variant=\"secondary\">Secondary</ds-button>\r\n        <ds-button variant=\"ghost\">Ghost</ds-button>\r\n        <ds-button variant=\"destructive\">Destructive</ds-button>\r\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\r\n          <span>AI Primary</span>\r\n        </ds-button>\r\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\r\n          <span>AI Ghost</span>\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"primary\"\r\n          ariaLabel=\"Primary variant\"\r\n          tooltip=\"Primary action\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"secondary\"\r\n          ariaLabel=\"Secondary variant\"\r\n          tooltip=\"Secondary action\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"ghost\"\r\n          ariaLabel=\"Ghost variant\"\r\n          tooltip=\"Ghost action\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"destructive\"\r\n          ariaLabel=\"Destructive variant\"\r\n          tooltip=\"Destructive action\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox variant=\"default\" label=\"Default checkbox\"></ds-checkbox>\r\n        <ds-checkbox variant=\"success\" label=\"Success checkbox\"></ds-checkbox>\r\n        <ds-checkbox variant=\"warning\" label=\"Warning checkbox\"></ds-checkbox>\r\n        <ds-checkbox variant=\"error\" label=\"Error checkbox\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\r\n        <ds-textarea variant=\"default\" placeholder=\"Default textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea variant=\"success\" placeholder=\"Success textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea variant=\"warning\" placeholder=\"Warning textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea variant=\"error\" placeholder=\"Error textarea\" rows=\"3\"></ds-textarea>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "VerticalAvatarInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Assigned to',\r\n    value: 'John Doe',\r\n    layout: 'vertical',\r\n    valueType: 'avatar-text',\r\n    avatarType: 'initials',\r\n    avatarInitials: 'JD',\r\n  },\r\n}"
            },
            {
                "name": "VerticalBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Priority',\r\n    layout: 'vertical',\r\n    valueType: 'badge',\r\n    badgeVariant: 'destructive',\r\n    badgeContentType: 'text',\r\n    badgeContent: 'High',\r\n  },\r\n}"
            },
            {
                "name": "VerticalIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Status',\r\n    value: 'Active',\r\n    layout: 'vertical',\r\n    iconName: 'remixCheckboxCircleFill',\r\n  },\r\n}"
            },
            {
                "name": "VerticalLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Documentation',\r\n    value: 'View API docs',\r\n    layout: 'vertical',\r\n    valueType: 'link',\r\n    linkHref: 'https://api.example.com/docs',\r\n    linkTarget: '_blank',\r\n  },\r\n}"
            },
            {
                "name": "VerticalText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Email Address',\r\n    value: 'user@example.com',\r\n    layout: 'vertical',\r\n    valueType: 'text',\r\n  },\r\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { variant: 'warning', placeholder: 'Warning state' },\r\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'warning',\r\n  },\r\n}"
            },
            {
                "name": "WarningMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'warning',\r\n    title: 'Warning',\r\n    description: 'A short description',\r\n  },\r\n}"
            },
            {
                "name": "WarningVariant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker variant=\"warning\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n    rowClickable: false,\r\n  },\r\n}"
            },
            {
                "name": "WithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 800px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Success\" description=\"Your changes have been saved successfully.\">\r\n          <div actions style=\"display: flex; gap: 8px;\">\r\n            <ds-button variant=\"primary\" size=\"sm\">View</ds-button>\r\n            <ds-button variant=\"ghost\" size=\"sm\">Dismiss</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"warning\" title=\"Warning\" description=\"This action cannot be undone. Please review before continuing.\">\r\n          <div actions style=\"display: flex; gap: 8px;\">\r\n            <ds-button variant=\"primary\" size=\"sm\">Continue</ds-button>\r\n            <ds-button variant=\"ghost\" size=\"sm\">Cancel</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"information\" title=\"Update Available\" description=\"A new version is ready to install.\">\r\n          <div actions>\r\n            <ds-button variant=\"primary\" size=\"sm\">Update Now</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n\r\n        <ds-inline-message variant=\"error\" title=\"Connection Failed\" description=\"Unable to connect to the server. Please check your internet connection.\">\r\n          <div actions style=\"display: flex; gap: 8px;\">\r\n            <ds-button variant=\"primary\" size=\"sm\">Retry</ds-button>\r\n            <ds-button variant=\"ghost\" size=\"sm\">Dismiss</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    title: 'Update user documentation',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\r\n        </div>\r\n        <div slot=\"actions\">\r\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n          <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithBadges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      value: signal('inbox'),\r\n    },\r\n    template: `\r\n      <ds-tabs [(value)]=\"value\">\r\n        <ds-tab value=\"inbox\" label=\"Inbox\" [showBadge]=\"true\" [badgeCount]=\"3\">\r\n          <p>Inbox content</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"tasks\" label=\"My tasks\" [showBadge]=\"true\" [badgeCount]=\"12\">\r\n          <p>Tasks content</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"archive\" label=\"Archive\">\r\n          <p>Archive content</p>\r\n        </ds-tab>\r\n      </ds-tabs>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'PFA Pension',\r\n    iconName: 'remixBuilding4Line',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Customers', path: '/customers', isLast: false },\r\n      { label: 'PFA Pension', path: '/customers/pfa-pension', isLast: true }\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "WithButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-tooltip text=\"Primary action button\">\r\n          <ds-button variant=\"primary\">Primary</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Secondary action button\">\r\n          <ds-button variant=\"secondary\">Secondary</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Ghost style button\">\r\n          <ds-button variant=\"ghost\">Ghost</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Destructive action - use with caution\">\r\n          <ds-button variant=\"destructive\">Delete</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "WithColumnManagement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 8,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\r\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\r\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\r\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\r\n- **Persistent State**: Selected columns are reflected with checkmarks\r\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\r\n\r\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "WithColumnSizing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: [\r\n      ...sampleUsers.slice(0, 3),\r\n      // Add some users with very long content to demonstrate truncation\r\n      {\r\n        id: 11,\r\n        name: 'Alexandra Maximillian Constantine',\r\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\r\n        role: 'SuperAdmin',\r\n        status: 'active' as const,\r\n        joinDate: '2023-11-01',\r\n      },\r\n      {\r\n        id: 12,\r\n        name: 'Benjamin Christopher Wellington',\r\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\r\n        role: 'Editor',\r\n        status: 'pending' as const,\r\n        joinDate: '2023-12-15',\r\n      },\r\n    ],\r\n    columns: userColumnsWithSizing,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Advanced column sizing demonstration showing:\r\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\r\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\r\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\r\n- **Text truncation** with ellipsis (default when maxWidth is set)\r\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\r\n\r\nTry resizing the browser to see how columns behave with long content.`,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "WithCustomContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      value: signal('settings'),\r\n    },\r\n    template: `\r\n      <ds-tabs [(value)]=\"value\">\r\n        <ds-tab value=\"profile\" label=\"Profile\">\r\n          <div class=\"tw-p-4\">\r\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Profile Settings</h3>\r\n            <p>Manage your profile information here.</p>\r\n          </div>\r\n        </ds-tab>\r\n        <ds-tab value=\"settings\" label=\"Settings\">\r\n          <div class=\"tw-p-4\">\r\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Account Settings</h3>\r\n            <p>Configure your account preferences.</p>\r\n          </div>\r\n        </ds-tab>\r\n        <ds-tab value=\"notifications\" label=\"Notifications\" [showBadge]=\"true\" [badgeCount]=\"5\">\r\n          <div class=\"tw-p-4\">\r\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Notification Settings</h3>\r\n            <p>Manage your notification preferences.</p>\r\n          </div>\r\n        </ds-tab>\r\n      </ds-tabs>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithCustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'information',\r\n    title: 'Custom Icon',\r\n    description: 'This message uses a custom icon instead of the default one.',\r\n    icon: 'remixLightbulbLine',\r\n  },\r\n}"
            },
            {
                "name": "WithCustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'Download file',\r\n    href: '#',\r\n    showIcon: true,\r\n    iconName: 'remixDownloadLine',\r\n  },\r\n}"
            },
            {
                "name": "WithDataTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    orientation: 'vertical',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceLines: sampleInvoiceLines,\r\n      invoiceColumns: invoiceColumns,\r\n    },\r\n    template: `\r\n      <ds-tile [orientation]=\"orientation\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Invoice Lines</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">Add line</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n        </ds-tile-section>\r\n        <ds-tile-section [padding]=\"false\">\r\n          <ds-data-table \r\n            [data]=\"invoiceLines\" \r\n            [columns]=\"invoiceColumns\"\r\n            [searchable]=\"false\"\r\n            [showColumnVisibility]=\"false\"\r\n            [paginated]=\"false\">\r\n          </ds-data-table>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithDisabledItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    items: menuWithDisabled,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-button variant=\"secondary\">File</ds-button>\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "WithDisabledOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Available Option 1', value: 1 },\r\n      { id: '2', label: 'Disabled Option', value: 2, disabled: true },\r\n      { id: '3', label: 'Available Option 2', value: 3 },\r\n      { id: '4', label: 'Another Disabled', value: 4, disabled: true },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Select Options</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithDisabledOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Option 1', value: 1 },\r\n      { id: '2', label: 'Option 2', value: 2, disabled: true },\r\n      { id: '3', label: 'Option 3', value: 3 },\r\n      { id: '4', label: 'Option 4', value: 4, disabled: true },\r\n    ],\r\n    placeholder: 'Select an option',\r\n  },\r\n}"
            },
            {
                "name": "WithError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"width: 360px;\">\r\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\r\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\r\n          <p ngpError ngpErrorValidator=\"required\">Email is required.</p>\r\n        </ds-form-field>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithFewOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    options: ['Option 1', 'Option 2', 'Option 3'],\r\n    placeholder: 'Search options...'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Select option'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithFilterIconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-icon-button icon=\"remixFilter3Line\" variant=\"secondary\" ariaLabel=\"Filter options\" />\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithFormElements",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 2rem; align-items: flex-start; width: 300px;\">\r\n        <ds-tooltip text=\"Enter your email address\">\r\n          <ds-input \r\n            type=\"email\" \r\n            placeholder=\"Email address\"\r\n            variant=\"default\"\r\n          />\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Check this to receive notifications\">\r\n          <div style=\"display: flex; align-items: center; gap: 8px;\">\r\n            <ds-checkbox />\r\n            <ds-label>Subscribe to notifications</ds-label>\r\n          </div>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"This icon represents settings\">\r\n          <ds-icon name=\"remixSettingsLine\" size=\"24px\" style=\"cursor: pointer;\" />\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Submit your information\">\r\n          <ds-button variant=\"primary\" size=\"sm\">Submit</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsInputComponent, DsCheckboxComponent, DsLabelComponent, DsIconComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "WithFormField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-form-field \r\n        label=\"Newsletter Preferences\" \r\n        description=\"Choose your newsletter preferences\"\r\n        style=\"width: 400px;\">\r\n        <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\r\n          <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\r\n          <ds-checkbox label=\"Product updates\"></ds-checkbox>\r\n          <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\r\n          <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\r\n        </div>\r\n      </ds-form-field>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      source: {\r\n        code: `<ds-form-field \r\n  label=\"Newsletter Preferences\" \r\n  description=\"Choose your newsletter preferences\">\r\n  <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\r\n    <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\r\n    <ds-checkbox label=\"Product updates\"></ds-checkbox>\r\n    <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\r\n    <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\r\n  </div>\r\n</ds-form-field>`,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "WithFormField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n    }),\r\n  ],\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-with-form-field',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n      template: `\r\n        <ds-form-field \r\n          label=\"Birth Date\" \r\n          description=\"Select your date of birth\">\r\n          <ds-datepicker [formControl]=\"dateControl\" [disableFutureDates]=\"true\">\r\n            <ds-input \r\n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \r\n              placeholder=\"Select your birth date\"\r\n              [readonly]=\"true\"\r\n              [required]=\"true\"\r\n              iconRight=\"remixCalendarLine\" />\r\n          </ds-datepicker>\r\n          @if (dateControl.invalid && dateControl.touched) {\r\n            <p slot=\"error\" class=\"ds-form-field__error\">Please select a valid date</p>\r\n          }\r\n        </ds-form-field>\r\n      `,\r\n    })\r\n    class DatepickerWithFormField {\r\n      dateControl = new FormControl<Date | null>(null);\r\n    }\r\n\r\n    return {\r\n      component: DatepickerWithFormField,\r\n      props: {},\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "WithFormField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-form-field \r\n        label=\"Message\" \r\n        description=\"Please provide detailed feedback\"\r\n        style=\"width: 400px;\">\r\n        <ds-textarea \r\n          placeholder=\"Enter your feedback here...\" \r\n          rows=\"5\"\r\n          [required]=\"true\">\r\n        </ds-textarea>\r\n      </ds-form-field>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      source: {\r\n        code: `<ds-form-field \r\n  label=\"Message\" \r\n  description=\"Please provide detailed feedback\">\r\n  <ds-textarea \r\n    placeholder=\"Enter your feedback here...\" \r\n    rows=\"5\"\r\n    [required]=\"true\">\r\n  </ds-textarea>\r\n</ds-form-field>`,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "WithGhostButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"ghost\">Filter</ds-button>\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithGlobalAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    showGlobalAction: true, \r\n    globalActionLabel: 'New', \r\n    globalActionIcon: 'remixAddLine' \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [showGlobalAction]=\"showGlobalAction\" [globalActionLabel]=\"globalActionLabel\" [globalActionIcon]=\"globalActionIcon\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: groupedOptions,\r\n    placeholder: 'Select food',\r\n    variant: 'default',\r\n  },\r\n}"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    content: 'External link',\r\n    href: 'https://example.com',\r\n    target: '_blank',\r\n    rel: 'noopener noreferrer',\r\n    showIcon: true,\r\n    iconName: 'remixExternalLinkLine',\r\n  },\r\n}"
            },
            {
                "name": "WithIconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-icon-button icon=\"remixSettings3Line\" variant=\"ghost\" ariaLabel=\"Open menu\" />\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithIconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    multiple: false,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-icon-button icon=\"remixMoreLine\" variant=\"ghost\" ariaLabel=\"More options\" />\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button leadingIcon=\"remixHomeLine\">\r\n          Home\r\n        </ds-button>\r\n        <ds-button trailingIcon=\"remixArrowRightLine\">\r\n          Continue\r\n        </ds-button>\r\n        <ds-button \r\n          leadingIcon=\"remixUserLine\"\r\n          variant=\"secondary\"\r\n        >\r\n          Profile\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    items: menuWithIcons,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-button variant=\"secondary\">Options</ds-button>\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "WithInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    className: '',\r\n    for: 'example-input',\r\n    size: 'md',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args\r\n    },\r\n    styles: [`\r\n      :host {\r\n        display: block;\r\n        padding: 1rem;\r\n        background: white;\r\n      }\r\n      .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 0.5rem;\r\n      }\r\n    `],\r\n    template: `\r\n      <div class=\"container\">\r\n        <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\r\n          Input Label\r\n        </ds-label>\r\n        <ds-input id=\"example-input\" placeholder=\"Enter text...\"></ds-input>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "WithInputTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-with-input',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsInputComponent, FormsModule],\r\n      template: `\r\n        <ds-datepicker (dateChange)=\"onDateChange($event)\">\r\n            <ds-input \r\n              [ngModel]=\"selectedDate() ? selectedDate()!.toLocaleDateString() : ''\" \r\n              placeholder=\"Select date\"\r\n              [readonly]=\"true\"\r\n              iconRight=\"remixCalendarLine\" />\r\n        </ds-datepicker>\r\n        <p class=\"body-sm-regular tw-mt-4\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\r\n      `,\r\n    })\r\n    class DatepickerWithInput {\r\n      selectedDate = signal<Date | null>(null);\r\n      \r\n      onDateChange(date: Date | null) {\r\n        this.selectedDate.set(date);\r\n      }\r\n    }\r\n\r\n    return {\r\n      component: DatepickerWithInput,\r\n      props: {},\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "WithLeadingIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { leadingIcon: 'remixUserLine', placeholder: 'Username' },\r\n}"
            },
            {
                "name": "WithLimits",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    placeholder: 'This textarea has a 100 character limit...',\r\n    maxlength: 100,\r\n    minlength: 10,\r\n    rows: 4,\r\n  },\r\n}"
            },
            {
                "name": "WithManyOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    placeholder: 'Search users...',\r\n    options: [\r\n      'Alice Anderson',\r\n      'Bob Brown',\r\n      'Charlie Chen',\r\n      'David Davis',\r\n      'Eve Edwards',\r\n      'Frank Foster',\r\n      'Grace Green',\r\n      'Henry Hill',\r\n      'Ivy Irving',\r\n      'Jack Johnson',\r\n      'Karen King',\r\n      'Larry Lee',\r\n      'Mary Martin',\r\n      'Nancy Nelson',\r\n      'Oliver Owen'\r\n    ]\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Select user'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    title: 'Review and approve design changes',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\r\n          <ds-metadata-item icon=\"remixUserLine\" value=\"Based on 8 reviews\" />\r\n          <ds-metadata-item icon=\"remixAlarmLine\" value=\"Important\" variant=\"warning\" />\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithoutDescription",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 600px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Success\" />\r\n        <ds-inline-message variant=\"error\" title=\"Error\" />\r\n        <ds-inline-message variant=\"warning\" title=\"Warning\" />\r\n        <ds-inline-message variant=\"information\" title=\"Information\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithoutLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    showLabel: false,\r\n    ariaLabel: 'Accept terms and conditions',\r\n  },\r\n}"
            },
            {
                "name": "WithoutPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers.slice(0, 5),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n}"
            },
            {
                "name": "WithoutSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: false,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n}"
            },
            {
                "name": "WithoutShimmer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Reviewing tenant inquiries',\r\n      'Summarising maintenance patterns',\r\n      'Updating your recommendations',\r\n    ],\r\n    styleClass: 'body-sm-regular',\r\n    useShimmer: false,\r\n  },\r\n}"
            },
            {
                "name": "WithPlaceholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: { \r\n    placeholder: 'Write your thoughts here...',\r\n    rows: 6 \r\n  },\r\n}"
            },
            {
                "name": "WithPrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"primary\">Choose option</ds-button>\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithReactiveForms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n    }),\r\n  ],\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-form-example',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n      template: `\r\n        <form>\r\n          <ds-datepicker [formControl]=\"dateControl\">\r\n            <ds-input \r\n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \r\n              placeholder=\"Select date\"\r\n              [readonly]=\"true\"\r\n              iconRight=\"remixCalendarLine\" />\r\n          </ds-datepicker>\r\n          <p class=\"body-sm-regular tw-mt-4\">\r\n            Form Value: {{ dateControl.value ? dateControl.value.toLocaleDateString() : 'None' }}\r\n          </p>\r\n          <p class=\"body-sm-regular\">Valid: {{ dateControl.valid }}</p>\r\n        </form>\r\n      `,\r\n    })\r\n    class DatepickerFormExample {\r\n      dateControl = new FormControl(new Date());\r\n    }\r\n\r\n    return {\r\n      component: DatepickerFormExample,\r\n      props: {},\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "WithSecondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"secondary\">Select an option</ds-button>\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithTitleAndAvatar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>\r\n              <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\" />\r\n              User Profile\r\n            </header-title>\r\n            <header-actions>\r\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Name\" value=\"John Doe\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Email\" value=\"john.doe@example.com\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Role\" value=\"Administrator\" layout=\"horizontal\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithTitleAndIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>\r\n              <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\r\n              Invoice Details\r\n            </header-title>\r\n            <header-actions>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item icon=\"remixFileTextLine\" value=\"Invoice #12345\" />\r\n            <ds-metadata-item icon=\"remixCalendarLine\" value=\"Due Date: 2024-03-15\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
            },
            {
                "name": "WithTooltip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    icon: 'remixSurveyLine',\r\n    value: 'Based on 12 inquiries',\r\n    tooltip: 'Data collected from recent customer inquiries',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsAccordion>",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsBadgeComponent>",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsAppLayoutComponent>",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsAvatarComponent>",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsButtonComponent>",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsIconButtonComponent>",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsCheckboxComponent>",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsComboboxComponent>",
                "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsDatepickerComponent>",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsDataItemComponent>",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsDataTableComponent>",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DrawerStoryProps>",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsEditableTableComponent>",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsHeaderDetailsComponent>",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsIconComponent>",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsInlineMessageComponent>",
                "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsFormFieldComponent>",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsInputComponent>",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsLabelComponent>",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsLinkComponent>",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsListComponent>",
                "file": "src/app/components/ui/list/ds-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsListItemComponent>",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsListboxComponent>",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsLoadingLabelComponent>",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsMenuComponent>",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsMetadataItemComponent>",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsSelectComponent>",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsShapeIndicatorComponent>",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsSidebarComponent>",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AiSparksLoadingComponent>",
                "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AiSparksStaticComponent>",
                "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsSpinnerComponent>",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTabs>",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTextareaComponent>",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTileComponent>",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTooltipComponent>",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTopbarComponent>",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/ui/menu/ds-menu.stories.ts": [
                {
                    "name": "ActionMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    items: [\r\n      { id: '1', label: 'View Details', icon: 'remixEyeLine' },\r\n      { id: '2', label: 'Edit Properties', icon: 'remixEditLine' },\r\n      { id: 'sep1', label: '', separator: true },\r\n      { id: '3', label: 'Make a Copy', icon: 'remixFileCopyLine' },\r\n      { id: '4', label: 'Move to...', icon: 'remixFolderTransferLine' },\r\n      { id: '5', label: 'Add to Favorites', icon: 'remixStarLine' },\r\n      { id: 'sep2', label: '', separator: true },\r\n      { id: '6', label: 'Remove', icon: 'remixDeleteBinLine', destructive: true },\r\n    ],\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-icon-button icon=\"remixMore2Line\" variant=\"ghost\" ariaLabel=\"Item actions\" />\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsIconButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "basicMenuItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsMenuItem[]",
                    "defaultValue": "[\r\n  { id: '1', label: 'Edit', action: () => console.log('Edit clicked') },\r\n  { id: '2', label: 'Duplicate', action: () => console.log('Duplicate clicked') },\r\n  { id: '3', label: 'Archive', action: () => console.log('Archive clicked') },\r\n  { id: 'sep1', label: '', separator: true },\r\n  { id: '4', label: 'Delete', destructive: true, action: () => console.log('Delete clicked') },\r\n]"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    items: basicMenuItems,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-button variant=\"secondary\">Actions</ds-button>\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "menuWithDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsMenuItem[]",
                    "defaultValue": "[\r\n  { id: '1', label: 'New File', icon: 'remixFileAddLine' },\r\n  { id: '2', label: 'New Folder', icon: 'remixFolderAddLine' },\r\n  { id: '3', label: 'Upload', icon: 'remixUploadLine', disabled: true },\r\n  { id: 'sep1', label: '', separator: true },\r\n  { id: '4', label: 'Settings', icon: 'remixSettingsLine' },\r\n]"
                },
                {
                    "name": "menuWithIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsMenuItem[]",
                    "defaultValue": "[\r\n  { id: '1', label: 'Edit', icon: 'remixEditLine', action: () => console.log('Edit clicked') },\r\n  { id: '2', label: 'Copy', icon: 'remixFileCopyLine', action: () => console.log('Copy clicked') },\r\n  { id: '3', label: 'Share', icon: 'remixShareLine', action: () => console.log('Share clicked') },\r\n  { id: 'sep1', label: '', separator: true },\r\n  { id: '4', label: 'Download', icon: 'remixDownloadLine', action: () => console.log('Download clicked') },\r\n  { id: 'sep2', label: '', separator: true },\r\n  { id: '5', label: 'Delete', icon: 'remixDeleteBinLine', destructive: true, action: () => console.log('Delete clicked') },\r\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsMenuComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Menu',\r\n  component: DsMenuComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\">${story}</div>`\r\n    ),\r\n    applicationConfig({\r\n      providers: [],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithDisabledItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    items: menuWithDisabled,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-button variant=\"secondary\">File</ds-button>\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "WithIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    items: menuWithIcons,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-menu [items]=\"items\">\r\n        <ds-button variant=\"secondary\">Options</ds-button>\r\n      </ds-menu>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsMenuComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/sidebar/ds-sidebar.stories.ts": [
                {
                    "name": "ActiveItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    activeItemId: 'inbox' \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [activeItemId]=\"activeItemId\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Collapsed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    collapsed: true \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [collapsed]=\"collapsed\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "CollapsedWithGlobalAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    collapsed: true, \r\n    showGlobalAction: true, \r\n    globalActionLabel: 'Create New', \r\n    globalActionIcon: 'remixAddLine' \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar \r\n          [groups]=\"groups\" \r\n          [collapsed]=\"collapsed\" \r\n          [showGlobalAction]=\"showGlobalAction\" \r\n          [globalActionLabel]=\"globalActionLabel\" \r\n          [globalActionIcon]=\"globalActionIcon\" \r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    ariaLabel: 'Main navigation',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [ariaLabel]=\"ariaLabel\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsSidebarComponent>",
                    "defaultValue": "{\r\n  title: 'Application shell/Sidebar',\r\n  component: DsSidebarComponent,\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      story: { inline: true },\r\n      source: { excludeDecorators: true }\r\n    }\r\n  },\r\n  tags: ['autodocs'],\r\n  args: {\r\n    groups: demoGroups,\r\n  },\r\n  argTypes: {\r\n    groups: {\r\n      description: 'Array of sidebar groups with their items',\r\n      control: 'object',\r\n      table: {\r\n        type: { \r\n          summary: 'SidebarGroup[]',\r\n          detail: `interface SidebarGroup {\r\n  id: string;\r\n  label: string;\r\n  items: {\r\n    id: string;\r\n    label: string;\r\n    icon?: string;\r\n    badgeText?: string;\r\n  }[];\r\n  expanded?: boolean;\r\n  showLabel?: boolean;\r\n}`\r\n        }\r\n      }\r\n    },\r\n    activeItemId: {\r\n      description: 'ID of the currently active item',\r\n      control: 'text'\r\n    },\r\n    collapsed: {\r\n      description: 'Whether the sidebar is collapsed',\r\n      control: 'boolean'\r\n    },\r\n    showGlobalAction: {\r\n      description: 'Whether to show the global action button',\r\n      control: 'boolean'\r\n    },\r\n    globalActionLabel: {\r\n      description: 'Label for the global action button',\r\n      control: 'text'\r\n    },\r\n    globalActionIcon: {\r\n      description: 'Icon for the global action button',\r\n      control: 'text'\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "WithGlobalAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    showGlobalAction: true, \r\n    globalActionLabel: 'New', \r\n    globalActionIcon: 'remixAddLine' \r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"height: 600px; display: flex;\">\r\n        <ds-sidebar [groups]=\"groups\" [showGlobalAction]=\"showGlobalAction\" [globalActionLabel]=\"globalActionLabel\" [globalActionIcon]=\"globalActionIcon\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/loading-label/ds-loading-label.stories.ts": [
                {
                    "name": "AIProcessing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Training AI model',\r\n      'Processing historical data',\r\n      'Generating predictions',\r\n      'Optimizing results',\r\n    ],\r\n    styleClass: 'body-sm-regular',\r\n  },\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Reviewing tenant inquiries',\r\n      'Summarising maintenance patterns',\r\n      'Updating your recommendations',\r\n      'Analyzing property data',\r\n    ],\r\n    styleClass: 'body-sm-regular',\r\n    useShimmer: true,\r\n  },\r\n}"
                },
                {
                    "name": "LargerText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Processing your data',\r\n      'Analyzing trends',\r\n      'Generating insights',\r\n    ],\r\n    styleClass: 'body-base-medium',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsLoadingLabelComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Loading Label',\r\n  component: DsLoadingLabelComponent,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA loading label component that displays a sequence of messages with smooth transitions.\r\nFeatures:\r\n- Vertical slide transitions between messages\r\n- Animated ellipsis dots\r\n- Customizable text styling via design system classes\r\n- Automatic message cycling\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    messages: {\r\n      control: 'object',\r\n      description: 'Array of loading messages to cycle through',\r\n    },\r\n    styleClass: {\r\n      control: 'select',\r\n      options: [\r\n        'body-sm-regular',\r\n        'body-sm-medium',\r\n        'body-sm-semiBold',\r\n        'body-base-regular',\r\n        'body-base-medium',\r\n        'body-base-semiBold',\r\n        'body-lg-regular',\r\n        'body-lg-medium',\r\n        'body-lg-semiBold',\r\n      ],\r\n      description: 'CSS class to apply for text styling',\r\n    },\r\n    spinnerSize: {\r\n      control: 'text',\r\n      description: 'Size of the spinner in pixels',\r\n    },\r\n    useShimmer: {\r\n      control: 'boolean',\r\n      description: 'Whether to apply shimmer effect to the text',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithoutShimmer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    messages: [\r\n      'Reviewing tenant inquiries',\r\n      'Summarising maintenance patterns',\r\n      'Updating your recommendations',\r\n    ],\r\n    styleClass: 'body-sm-regular',\r\n    useShimmer: false,\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/button/ds-button.stories.ts": [
                {
                    "name": "AIVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\r\n          <span>Generate suggestions</span>\r\n        </ds-button>\r\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\r\n          <span>Generate suggestions</span>\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    disabled: false,\r\n    loading: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<ds-button [variant]=\"variant\" [size]=\"size\" [disabled]=\"disabled\" [loading]=\"loading\">Default Button</ds-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "IconButtonVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixStarLine\" \r\n          ariaLabel=\"Favorite\"\r\n          variant=\"primary\"\r\n        ></ds-button>\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixSettingsLine\" \r\n          ariaLabel=\"Settings\"\r\n          variant=\"secondary\"\r\n        ></ds-button>\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixMoreLine\" \r\n          ariaLabel=\"More options\"\r\n          variant=\"ghost\"\r\n        ></ds-button>\r\n        <ds-button \r\n          [iconOnly]=\"true\" \r\n          leadingIcon=\"remixDeleteBinLine\" \r\n          ariaLabel=\"Delete\"\r\n          variant=\"destructive\"\r\n        ></ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    leadingIcon: 'remixThumbUpLine',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      clickCount: 0,\r\n      onClick: function(event: MouseEvent) {\r\n        this['clickCount']++;\r\n        console.log('Button clicked!', event);\r\n      }\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\r\n        <ds-button \r\n          [variant]=\"variant\"\r\n          [size]=\"size\"\r\n          [leadingIcon]=\"leadingIcon\"\r\n          (clicked)=\"onClick($event)\"\r\n        >\r\n          Like ({{clickCount}})\r\n        </ds-button>\r\n        <p style=\"font-size: 0.875rem; color: var(--color-gray-600);\">\r\n          Click count: {{clickCount}}\r\n        </p>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "LoadingStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button [loading]=\"true\" variant=\"primary\">\r\n          Saving...\r\n        </ds-button>\r\n        <ds-button \r\n          [loading]=\"true\" \r\n          variant=\"ghost\"\r\n          leadingIcon=\"remixUploadLine\"\r\n        >\r\n          Uploading...\r\n        </ds-button>\r\n        <ds-button \r\n          [loading]=\"true\" \r\n          variant=\"secondary\"\r\n        >\r\n          Processing\r\n        </ds-button>\r\n        <ds-button \r\n          [loading]=\"true\" \r\n          variant=\"destructive\"\r\n        >\r\n          Deleting...\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Button',\r\n  component: DsButtonComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: { type: 'select' },\r\n      options: ['primary', 'secondary', 'ghost', 'destructive', 'ai-primary', 'ai-ghost'],\r\n      description: 'The visual style variant of the button',\r\n    },\r\n    size: {\r\n      control: { type: 'select' },\r\n      options: ['sm', 'md', 'lg'],\r\n      description: 'The size of the button',\r\n    },\r\n    disabled: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button is disabled',\r\n    },\r\n    loading: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button is in loading state',\r\n    },\r\n    pressed: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button appears pressed (for toggle buttons)',\r\n    },\r\n    expanded: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button is expanded (for dropdown buttons)',\r\n    },\r\n    leadingIcon: {\r\n      control: { type: 'text' },\r\n      description: 'Icon to display before the button text',\r\n    },\r\n    trailingIcon: {\r\n      control: { type: 'text' },\r\n      description: 'Icon to display after the button text',\r\n    },\r\n    ariaLabel: {\r\n      control: { type: 'text' },\r\n      description: 'Accessibility label for the button',\r\n    },\r\n    iconOnly: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the button displays only an icon without text',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-button size=\"sm\">Small</ds-button>\r\n        <ds-button size=\"md\">Medium</ds-button>\r\n        <ds-button size=\"lg\">Large</ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button>Normal</ds-button>\r\n        <ds-button [disabled]=\"true\">Disabled</ds-button>\r\n        <ds-button [loading]=\"true\">Loading</ds-button>\r\n        <ds-button [pressed]=\"true\" variant=\"ghost\">Pressed</ds-button>\r\n        <ds-button \r\n          [expanded]=\"true\" \r\n          trailingIcon=\"remixArrowDownLine\"\r\n          variant=\"secondary\"\r\n        >\r\n          Expanded\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button variant=\"primary\">Primary</ds-button>\r\n        <ds-button variant=\"secondary\">Secondary</ds-button>\r\n        <ds-button variant=\"ghost\">Ghost</ds-button>\r\n        <ds-button variant=\"destructive\">Destructive</ds-button>\r\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\r\n          <span>AI Primary</span>\r\n        </ds-button>\r\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\r\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\r\n          <span>AI Ghost</span>\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\r\n        <ds-button leadingIcon=\"remixHomeLine\">\r\n          Home\r\n        </ds-button>\r\n        <ds-button trailingIcon=\"remixArrowRightLine\">\r\n          Continue\r\n        </ds-button>\r\n        <ds-button \r\n          leadingIcon=\"remixUserLine\"\r\n          variant=\"secondary\"\r\n        >\r\n          Profile\r\n        </ds-button>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/spinner/ds-spinner.stories.ts": [
                {
                    "name": "AllColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\r\n        <ds-spinner color=\"primary\" />\r\n        <ds-spinner color=\"secondary\" />\r\n        <ds-spinner color=\"tertiary\" />\r\n        <ds-spinner color=\"brand\" />\r\n        <ds-spinner color=\"success\" />\r\n        <ds-spinner color=\"warning\" />\r\n        <ds-spinner color=\"destructive\" />\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "AllSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\r\n        <ds-spinner size=\"12px\" />\r\n        <ds-spinner size=\"16px\" />\r\n        <ds-spinner size=\"20px\" />\r\n        <ds-spinner size=\"24px\" />\r\n        <ds-spinner size=\"32px\" />\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div class=\"tw-flex\">\r\n        <ds-spinner size=\"20px\" color=\"tertiary\" />\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsSpinnerComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Spinner',\r\n  component: DsSpinnerComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    size: {\r\n      control: 'select',\r\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\r\n      description: 'Size of the spinner',\r\n      table: {\r\n        defaultValue: { summary: '20px' }\r\n      }\r\n    },\r\n    color: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'tertiary', 'brand', 'success', 'warning', 'destructive'],\r\n      description: 'Color of the spinner',\r\n      table: {\r\n        defaultValue: { summary: 'tertiary' }\r\n      }\r\n    }\r\n  }\r\n}"
                }
            ],
            "src/app/components/ui/badge/ds-badge.stories.ts": [
                {
                    "name": "AllColorVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <h3 style=\"margin: 0; font-size: 16px; font-weight: 600;\">All Badge Color Variants</h3>\r\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; max-width: 600px;\">\r\n          <ds-badge content=\"Default\" variant=\"default\"></ds-badge>\r\n          <ds-badge content=\"Brand\" variant=\"brand\"></ds-badge>\r\n          <ds-badge content=\"Success\" variant=\"success\"></ds-badge>\r\n          <ds-badge content=\"Warning\" variant=\"warning\"></ds-badge>\r\n          <ds-badge content=\"Destructive\" variant=\"destructive\"></ds-badge>\r\n          <ds-badge content=\"Blue\" variant=\"blue\"></ds-badge>\r\n          <ds-badge content=\"Light Purple\" variant=\"light-purple\"></ds-badge>\r\n          <ds-badge content=\"Pink\" variant=\"pink\"></ds-badge>\r\n          <ds-badge content=\"Salmon Orange\" variant=\"salmon-orange\"></ds-badge>\r\n          <ds-badge content=\"Orange\" variant=\"orange\"></ds-badge>\r\n          <ds-badge content=\"Lime Green\" variant=\"lime-green\"></ds-badge>\r\n          <ds-badge content=\"Grey\" variant=\"grey\"></ds-badge>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "ContentTypeComparison",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Text Only</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n            <ds-badge content=\"Default\" contentType=\"text\" variant=\"default\"></ds-badge>\r\n            <ds-badge content=\"Brand\" contentType=\"text\" variant=\"brand\"></ds-badge>\r\n            <ds-badge content=\"Success\" contentType=\"text\" variant=\"success\"></ds-badge>\r\n            <ds-badge content=\"Warning\" contentType=\"text\" variant=\"warning\"></ds-badge>\r\n            <ds-badge content=\"Destructive\" contentType=\"text\" variant=\"destructive\"></ds-badge>\r\n            <ds-badge content=\"Blue\" contentType=\"text\" variant=\"blue\"></ds-badge>\r\n            <ds-badge content=\"Light Purple\" contentType=\"text\" variant=\"light-purple\"></ds-badge>\r\n            <ds-badge content=\"Pink\" contentType=\"text\" variant=\"pink\"></ds-badge>\r\n            <ds-badge content=\"Salmon Orange\" contentType=\"text\" variant=\"salmon-orange\"></ds-badge>\r\n            <ds-badge content=\"Orange\" contentType=\"text\" variant=\"orange\"></ds-badge>\r\n            <ds-badge content=\"Lime Green\" contentType=\"text\" variant=\"lime-green\"></ds-badge>\r\n            <ds-badge content=\"Grey\" contentType=\"text\" variant=\"grey\"></ds-badge>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icon + Text</h3>\r\n          <div style=\"display: flex; gap: 8px;\">\r\n            <ds-badge content=\"Feature\" contentType=\"icon-text\" leadingIcon=\"remixStarLine\" variant=\"default\"></ds-badge>\r\n            <ds-badge content=\"Premium\" contentType=\"icon-text\" leadingIcon=\"remixStarFill\" variant=\"brand\"></ds-badge>\r\n            <ds-badge content=\"Verified\" contentType=\"icon-text\" leadingIcon=\"remixCheckboxCircleFill\" variant=\"success\"></ds-badge>\r\n            <ds-badge content=\"Alert\" contentType=\"icon-text\" leadingIcon=\"remixAlertFill\" variant=\"warning\"></ds-badge>\r\n            <ds-badge content=\"Error\" contentType=\"icon-text\" leadingIcon=\"remixErrorWarningFill\" variant=\"destructive\"></ds-badge>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Indicator + Text (Always white background)</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\r\n            <ds-badge content=\"Default\" contentType=\"indicator-text\" variant=\"default\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Brand\" contentType=\"indicator-text\" variant=\"brand\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Success\" contentType=\"indicator-text\" variant=\"success\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Warning\" contentType=\"indicator-text\" variant=\"warning\" indicatorShape=\"triangle\"></ds-badge>\r\n            <ds-badge content=\"Destructive\" contentType=\"indicator-text\" variant=\"destructive\" indicatorShape=\"square\"></ds-badge>\r\n            <ds-badge content=\"Blue\" contentType=\"indicator-text\" variant=\"blue\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Light Purple\" contentType=\"indicator-text\" variant=\"light-purple\" indicatorShape=\"diamond\"></ds-badge>\r\n            <ds-badge content=\"Pink\" contentType=\"indicator-text\" variant=\"pink\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Salmon Orange\" contentType=\"indicator-text\" variant=\"salmon-orange\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Orange\" contentType=\"indicator-text\" variant=\"orange\" indicatorShape=\"triangle\"></ds-badge>\r\n            <ds-badge content=\"Lime Green\" contentType=\"indicator-text\" variant=\"lime-green\" indicatorShape=\"circle\"></ds-badge>\r\n            <ds-badge content=\"Grey\" contentType=\"indicator-text\" variant=\"grey\" indicatorShape=\"circle\"></ds-badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Badge',\r\n    contentType: 'text',\r\n    variant: 'default',\r\n  },\r\n}"
                },
                {
                    "name": "IconTextBrand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'New Feature',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixStarFill',\r\n    variant: 'brand',\r\n  },\r\n}"
                },
                {
                    "name": "IconTextDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Feature',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixStarLine',\r\n    variant: 'default',\r\n  },\r\n}"
                },
                {
                    "name": "IconTextDestructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Critical',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixErrorWarningFill',\r\n    variant: 'destructive',\r\n  },\r\n}"
                },
                {
                    "name": "IconTextSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Verified',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixCheckboxCircleFill',\r\n    variant: 'success',\r\n  },\r\n}"
                },
                {
                    "name": "IconTextWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Attention',\r\n    contentType: 'icon-text',\r\n    leadingIcon: 'remixAlertFill',\r\n    variant: 'warning',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Info',\r\n    contentType: 'indicator-text',\r\n    variant: 'blue',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextBrand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'In Progress',\r\n    contentType: 'indicator-text',\r\n    variant: 'brand',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Default',\r\n    contentType: 'indicator-text',\r\n    variant: 'default',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextDestructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Failed',\r\n    contentType: 'indicator-text',\r\n    variant: 'destructive',\r\n    indicatorShape: 'square',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextGrey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Neutral',\r\n    contentType: 'indicator-text',\r\n    variant: 'grey',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextLightPurple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Special',\r\n    contentType: 'indicator-text',\r\n    variant: 'light-purple',\r\n    indicatorShape: 'diamond',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextLimeGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Fresh',\r\n    contentType: 'indicator-text',\r\n    variant: 'lime-green',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Alert',\r\n    contentType: 'indicator-text',\r\n    variant: 'orange',\r\n    indicatorShape: 'triangle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextPink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Accent',\r\n    contentType: 'indicator-text',\r\n    variant: 'pink',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextSalmonOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Warm',\r\n    contentType: 'indicator-text',\r\n    variant: 'salmon-orange',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Completed',\r\n    contentType: 'indicator-text',\r\n    variant: 'success',\r\n    indicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "IndicatorTextWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Pending',\r\n    contentType: 'indicator-text',\r\n    variant: 'warning',\r\n    indicatorShape: 'triangle',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsBadgeComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Badge',\r\n  component: DsBadgeComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\r\n    },\r\n    contentType: {\r\n      control: 'select',\r\n      options: ['text', 'icon-text', 'indicator-text'],\r\n    },\r\n    content: {\r\n      control: 'text',\r\n    },\r\n    leadingIcon: {\r\n      control: 'text',\r\n    },\r\n    indicatorShape: {\r\n      control: 'select',\r\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "TextBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Blue',\r\n    contentType: 'text',\r\n    variant: 'blue',\r\n  },\r\n}"
                },
                {
                    "name": "TextBrand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Brand',\r\n    contentType: 'text',\r\n    variant: 'brand',\r\n  },\r\n}"
                },
                {
                    "name": "TextDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Default',\r\n    contentType: 'text',\r\n    variant: 'default',\r\n  },\r\n}"
                },
                {
                    "name": "TextDestructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Error',\r\n    contentType: 'text',\r\n    variant: 'destructive',\r\n  },\r\n}"
                },
                {
                    "name": "TextGrey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Grey',\r\n    contentType: 'text',\r\n    variant: 'grey',\r\n  },\r\n}"
                },
                {
                    "name": "TextLightPurple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Light Purple',\r\n    contentType: 'text',\r\n    variant: 'light-purple',\r\n  },\r\n}"
                },
                {
                    "name": "TextLimeGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Lime Green',\r\n    contentType: 'text',\r\n    variant: 'lime-green',\r\n  },\r\n}"
                },
                {
                    "name": "TextOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Orange',\r\n    contentType: 'text',\r\n    variant: 'orange',\r\n  },\r\n}"
                },
                {
                    "name": "TextPink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Pink',\r\n    contentType: 'text',\r\n    variant: 'pink',\r\n  },\r\n}"
                },
                {
                    "name": "TextSalmonOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Salmon Orange',\r\n    contentType: 'text',\r\n    variant: 'salmon-orange',\r\n  },\r\n}"
                },
                {
                    "name": "TextSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Success',\r\n    contentType: 'text',\r\n    variant: 'success',\r\n  },\r\n}"
                },
                {
                    "name": "TextWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Warning',\r\n    contentType: 'text',\r\n    variant: 'warning',\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts": [
                {
                    "name": "AllShapes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Shape Variants (8x8px)</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\" label=\"Stage tags\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"triangle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"pentagon\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Circle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    shape: 'circle',\r\n    variant: 'brand',\r\n    label: 'Received',\r\n  },\r\n}"
                },
                {
                    "name": "ColorVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Color Variants</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center; max-width: 600px;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"default\" label=\"Default\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Brand\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"success\" label=\"Success\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"warning\" label=\"Warning\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"destructive\" label=\"Destructive\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Blue\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"light-purple\" label=\"Light Purple\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"pink\" label=\"Pink\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"salmon-orange\" label=\"Salmon Orange\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"orange\" label=\"Orange\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"lime-green\" label=\"Lime Green\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"circle\" variant=\"grey\" label=\"Grey\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Diamond",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    shape: 'diamond',\r\n    variant: 'brand',\r\n    label: 'Contact',\r\n  },\r\n}"
                },
                {
                    "name": "IconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icons Only</h3>\r\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"success\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"triangle\" variant=\"warning\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"pentagon\" variant=\"blue\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsShapeIndicatorComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Shape Indicator',\r\n  component: DsShapeIndicatorComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    shape: {\r\n      control: 'select',\r\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\r\n    },\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\r\n    },\r\n    label: {\r\n      control: 'text',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Pentagon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    shape: 'pentagon',\r\n    variant: 'brand',\r\n    label: 'Maintenance',\r\n  },\r\n}"
                },
                {
                    "name": "Square",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    shape: 'square',\r\n    variant: 'destructive',\r\n    label: 'Stage tags',\r\n  },\r\n}"
                },
                {
                    "name": "Triangle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    shape: 'triangle',\r\n    variant: 'blue',\r\n    label: 'Upcoming',\r\n  },\r\n}"
                },
                {
                    "name": "UsageExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Stage Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Category Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Inspection Status Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Defect Status Tags</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\r\n            <ds-shape-indicator shape=\"triangle\" variant=\"default\" label=\"Not a defect\"></ds-shape-indicator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/checkbox/ds-checkbox.stories.ts": [
                {
                    "name": "AllSizesAndVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 24px;\">\r\n        <div>\r\n          <h4>Small Size</h4>\r\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\r\n            <ds-checkbox size=\"sm\" variant=\"default\" label=\"Default small\"></ds-checkbox>\r\n            <ds-checkbox size=\"sm\" variant=\"success\" label=\"Success small\"></ds-checkbox>\r\n            <ds-checkbox size=\"sm\" variant=\"warning\" label=\"Warning small\"></ds-checkbox>\r\n            <ds-checkbox size=\"sm\" variant=\"error\" label=\"Error small\"></ds-checkbox>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h4>Medium Size</h4>\r\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\r\n            <ds-checkbox size=\"md\" variant=\"default\" label=\"Default medium\"></ds-checkbox>\r\n            <ds-checkbox size=\"md\" variant=\"success\" label=\"Success medium\"></ds-checkbox>\r\n            <ds-checkbox size=\"md\" variant=\"warning\" label=\"Warning medium\"></ds-checkbox>\r\n            <ds-checkbox size=\"md\" variant=\"error\" label=\"Error medium\"></ds-checkbox>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h4>Large Size</h4>\r\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\r\n            <ds-checkbox size=\"lg\" variant=\"default\" label=\"Default large\"></ds-checkbox>\r\n            <ds-checkbox size=\"lg\" variant=\"success\" label=\"Success large\"></ds-checkbox>\r\n            <ds-checkbox size=\"lg\" variant=\"warning\" label=\"Warning large\"></ds-checkbox>\r\n            <ds-checkbox size=\"lg\" variant=\"error\" label=\"Error large\"></ds-checkbox>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox \r\n          label=\"Click me to toggle\" \r\n          (checkedChange)=\"onCheckedChange($event)\">\r\n        </ds-checkbox>\r\n        <ds-checkbox \r\n          label=\"I'm required\" \r\n          [required]=\"true\"\r\n          variant=\"error\">\r\n        </ds-checkbox>\r\n        <ds-checkbox \r\n          label=\"Hover over me\"\r\n          size=\"lg\">\r\n        </ds-checkbox>\r\n      </div>\r\n    `,\r\n    props: {\r\n      onCheckedChange: (checked: boolean) => {\r\n        console.log('Checkbox checked:', checked);\r\n      },\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "LabelToggle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <h4>With Labels</h4>\r\n        <ds-checkbox [showLabel]=\"true\" label=\"I have a visible label\"></ds-checkbox>\r\n        <ds-checkbox [showLabel]=\"true\" label=\"Me too!\"></ds-checkbox>\r\n        \r\n        <h4 style=\"margin-top: 24px;\">Without Labels (using aria-label)</h4>\r\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 1\"></ds-checkbox>\r\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 2\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsCheckboxComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Checkbox',\r\n  component: DsCheckboxComponent,\r\n  parameters: { layout: 'centered' },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\r\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\r\n    label: { control: 'text' },\r\n    showLabel: { control: 'boolean' },\r\n    disabled: { control: 'boolean' },\r\n    required: { control: 'boolean' },\r\n    indeterminate: { control: 'boolean' },\r\n    checkboxId: { control: 'text' },\r\n    ariaLabel: { control: 'text' },\r\n    ariaDescribedBy: { control: 'text' },\r\n    ariaLabelledBy: { control: 'text' },\r\n  },\r\n  args: {\r\n    variant: 'default',\r\n    size: 'md',\r\n    label: 'Accept terms and conditions',\r\n    showLabel: true,\r\n    disabled: false,\r\n    required: false,\r\n    indeterminate: false,\r\n  },\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox size=\"sm\" label=\"Small checkbox\"></ds-checkbox>\r\n        <ds-checkbox size=\"md\" label=\"Medium checkbox\"></ds-checkbox>\r\n        <ds-checkbox size=\"lg\" label=\"Large checkbox\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox label=\"Unchecked checkbox\"></ds-checkbox>\r\n        <ds-checkbox label=\"Checked checkbox\" [checked]=\"true\"></ds-checkbox>\r\n        <ds-checkbox label=\"Indeterminate checkbox\" [indeterminate]=\"true\"></ds-checkbox>\r\n        <ds-checkbox label=\"Disabled checkbox\" [disabled]=\"true\"></ds-checkbox>\r\n        <ds-checkbox label=\"Disabled checked checkbox\" [disabled]=\"true\" [checked]=\"true\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\r\n        <ds-checkbox variant=\"default\" label=\"Default checkbox\"></ds-checkbox>\r\n        <ds-checkbox variant=\"success\" label=\"Success checkbox\"></ds-checkbox>\r\n        <ds-checkbox variant=\"warning\" label=\"Warning checkbox\"></ds-checkbox>\r\n        <ds-checkbox variant=\"error\" label=\"Error checkbox\"></ds-checkbox>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithFormField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-form-field \r\n        label=\"Newsletter Preferences\" \r\n        description=\"Choose your newsletter preferences\"\r\n        style=\"width: 400px;\">\r\n        <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\r\n          <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\r\n          <ds-checkbox label=\"Product updates\"></ds-checkbox>\r\n          <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\r\n          <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\r\n        </div>\r\n      </ds-form-field>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      source: {\r\n        code: `<ds-form-field \r\n  label=\"Newsletter Preferences\" \r\n  description=\"Choose your newsletter preferences\">\r\n  <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\r\n    <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\r\n    <ds-checkbox label=\"Product updates\"></ds-checkbox>\r\n    <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\r\n    <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\r\n  </div>\r\n</ds-form-field>`,\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithoutLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    showLabel: false,\r\n    ariaLabel: 'Accept terms and conditions',\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/avatar/ds-avatar.stories.ts": [
                {
                    "name": "AllTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 2rem; align-items: start; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Initials (Always Round)</h3>\r\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\r\n            <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\r\n            <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\r\n            <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\r\n            <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Photo (Always Round)</h3>\r\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"sm\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"md\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"lg\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n            <ds-avatar \r\n              type=\"photo\" \r\n              size=\"xl\" \r\n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n              alt=\"Profile\"\r\n            ></ds-avatar>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\r\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Icon (Brand Background + Depth)</h3>\r\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\r\n            <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n            <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n            <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n            <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          </div>\r\n          <div style=\"font-size: 12px; color: var(--text-color-default-secondary);\">\r\n            6px → 8px → 12px → 16px radius<br/>\r\n            depth-sm → depth-sm → depth-md → depth-lg\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'initials',\r\n    size: 'md',\r\n    initials: 'JD',\r\n  },\r\n}"
                },
                {
                    "name": "IconType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (6px radius)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (8px radius)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (12px radius)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (16px radius)</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "IconVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Default User</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixTeamFill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Team</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixBuildingFill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Organization</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixRobotFill\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Bot</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "InitialsType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"AS\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"MJ\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"EB\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsAvatarComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Avatar',\r\n  component: DsAvatarComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    type: {\r\n      control: { type: 'select' },\r\n      options: ['initials', 'photo', 'icon'],\r\n      description: 'The type of avatar display',\r\n    },\r\n    size: {\r\n      control: { type: 'select' },\r\n      options: ['sm', 'md', 'lg', 'xl'],\r\n      description: 'The size of the avatar',\r\n    },\r\n    initials: {\r\n      control: { type: 'text' },\r\n      description: 'Initials to display (for initials type)',\r\n    },\r\n    src: {\r\n      control: { type: 'text' },\r\n      description: 'Image source URL (for photo type)',\r\n    },\r\n    alt: {\r\n      control: { type: 'text' },\r\n      description: 'Alternative text for the image',\r\n    },\r\n    iconName: {\r\n      control: { type: 'text' },\r\n      description: 'Icon name to display (for icon type)',\r\n    },\r\n    iconColor: {\r\n      control: { type: 'text' },\r\n      description: 'Color of the icon (automatically white for icon avatars)',\r\n      table: { disable: true }, // Disable control since it's always white for icon avatars\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "PhotoType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"John Doe\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"Alice Smith\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"Michael Johnson\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar \r\n            type=\"photo\" \r\n            size=\"md\" \r\n            src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\"\r\n            alt=\"Emily Brown\"\r\n          ></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (24px)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (32px)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (48px)</span>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\r\n          <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\r\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (64px)</span>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Static",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'initials',\r\n    size: 'md',\r\n    initials: 'JD',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\r\n        <ds-avatar \r\n          [type]=\"type\"\r\n          [size]=\"size\"\r\n          [initials]=\"initials\"\r\n          [src]=\"src\"\r\n          [alt]=\"alt\"\r\n          [iconName]=\"iconName\"\r\n          [iconColor]=\"iconColor\"\r\n        ></ds-avatar>\r\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\r\n          Static avatar with no interactions\r\n        </p>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/inline-message/ds-inline-message.stories.ts": [
                {
                    "name": "AllVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 600px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Success\">\r\n          A short description\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"error\" title=\"Error\">\r\n          A short description\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"warning\" title=\"Warning\">\r\n          A short description\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"information\" title=\"Information\">\r\n          A short description\r\n        </ds-inline-message>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "DifferentWidths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n        <div style=\"max-width: 300px;\">\r\n          <ds-inline-message variant=\"success\" title=\"Narrow\">\r\n            This message is in a narrow container.\r\n          </ds-inline-message>\r\n        </div>\r\n        \r\n        <div style=\"max-width: 600px;\">\r\n          <ds-inline-message variant=\"information\" title=\"Medium\">\r\n            This message is in a medium-width container.\r\n          </ds-inline-message>\r\n        </div>\r\n        \r\n        <div>\r\n          <ds-inline-message variant=\"warning\" title=\"Full Width\">\r\n            This message takes up the full width of its container.\r\n          </ds-inline-message>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "ErrorMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'error',\r\n    title: 'Error',\r\n    description: 'A short description',\r\n  },\r\n}"
                },
                {
                    "name": "Information",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'information',\r\n    title: 'Information',\r\n    description: 'A short description',\r\n  },\r\n}"
                },
                {
                    "name": "LongContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 600px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Operation Completed Successfully\">\r\n          Your changes have been saved and will take effect immediately. You can continue working without any interruptions.\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"error\" title=\"Failed to Save Changes\">\r\n          An error occurred while trying to save your changes. Please check your connection and try again. If the problem persists, contact support.\r\n        </ds-inline-message>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsInlineMessageComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Inline Message',\r\n  component: DsInlineMessageComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsButtonComponent],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'information'],\r\n      description: 'Visual style variant of the message',\r\n    },\r\n    title: {\r\n      control: 'text',\r\n      description: 'Title text displayed in the message',\r\n    },\r\n    description: {\r\n      control: 'text',\r\n      description: 'Optional description text',\r\n    },\r\n    icon: {\r\n      control: 'text',\r\n      description: 'Custom icon name (optional)',\r\n    },\r\n    iconSize: {\r\n      control: 'text',\r\n      description: 'Icon size',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "SuccessMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'success',\r\n    title: 'Success',\r\n    description: 'A short description',\r\n  },\r\n}"
                },
                {
                    "name": "WarningMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'warning',\r\n    title: 'Warning',\r\n    description: 'A short description',\r\n  },\r\n}"
                },
                {
                    "name": "WithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 800px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Success\" description=\"Your changes have been saved successfully.\">\r\n          <div actions style=\"display: flex; gap: 8px;\">\r\n            <ds-button variant=\"primary\" size=\"sm\">View</ds-button>\r\n            <ds-button variant=\"ghost\" size=\"sm\">Dismiss</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"warning\" title=\"Warning\" description=\"This action cannot be undone. Please review before continuing.\">\r\n          <div actions style=\"display: flex; gap: 8px;\">\r\n            <ds-button variant=\"primary\" size=\"sm\">Continue</ds-button>\r\n            <ds-button variant=\"ghost\" size=\"sm\">Cancel</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n        \r\n        <ds-inline-message variant=\"information\" title=\"Update Available\" description=\"A new version is ready to install.\">\r\n          <div actions>\r\n            <ds-button variant=\"primary\" size=\"sm\">Update Now</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n\r\n        <ds-inline-message variant=\"error\" title=\"Connection Failed\" description=\"Unable to connect to the server. Please check your internet connection.\">\r\n          <div actions style=\"display: flex; gap: 8px;\">\r\n            <ds-button variant=\"primary\" size=\"sm\">Retry</ds-button>\r\n            <ds-button variant=\"ghost\" size=\"sm\">Dismiss</ds-button>\r\n          </div>\r\n        </ds-inline-message>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithCustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'information',\r\n    title: 'Custom Icon',\r\n    description: 'This message uses a custom icon instead of the default one.',\r\n    icon: 'remixLightbulbLine',\r\n  },\r\n}"
                },
                {
                    "name": "WithoutDescription",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 600px;\">\r\n        <ds-inline-message variant=\"success\" title=\"Success\" />\r\n        <ds-inline-message variant=\"error\" title=\"Error\" />\r\n        <ds-inline-message variant=\"warning\" title=\"Warning\" />\r\n        <ds-inline-message variant=\"information\" title=\"Information\" />\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/app-layout/ds-app-layout.stories.ts": [
                {
                    "name": "AutoResponsive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    // No isMobileOverride - let ViewportService handle automatic detection\r\n    isSidebarCollapsed: false,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Auto Responsive'\"\r\n        [iconName]=\"'remixSmartphoneLine'\"\r\n        [userInitials]=\"'AR'\"\r\n        [showFirstAction]=\"true\"\r\n        [firstActionIcon]=\"'remixNotification3Line'\"\r\n        [firstActionLabel]=\"'Notifications'\"\r\n        [showSecondAction]=\"true\"\r\n        [secondActionIcon]=\"'remixSettings3Line'\"\r\n        [secondActionLabel]=\"'Settings'\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Auto-Responsive Layout</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This layout automatically detects your viewport size and switches between mobile and desktop modes at 992px breakpoint. Try resizing your browser window or using the viewport toolbar!</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Breakpoint'\" \r\n                    [value]=\"'992px'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Mobile Mode'\" \r\n                    [value]=\"'≤ 991px (drawer menu)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Desktop Mode'\" \r\n                    [value]=\"'≥ 992px (persistent sidebar)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Detection'\" \r\n                    [value]=\"'Automatic via ViewportService'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isSidebarCollapsed: false,\r\n  },\r\n  render: () => ({\r\n    template: '<ds-debug-wrapper></ds-debug-wrapper>'\r\n  })\r\n}"
                },
                {
                    "name": "InitiallyCollapsed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isMobileOverride: false, // Force desktop mode\r\n    isSidebarCollapsed: true,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Initially Collapsed'\"\r\n        [iconName]=\"'remixHome4Line'\"\r\n        [userInitials]=\"'JD'\"\r\n        [showFirstAction]=\"true\"\r\n        [firstActionIcon]=\"'remixNotification3Line'\"\r\n        [firstActionLabel]=\"'Notifications'\"\r\n        [showSecondAction]=\"true\"\r\n        [secondActionIcon]=\"'remixSettings3Line'\"\r\n        [secondActionLabel]=\"'Settings'\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Initially Collapsed Sidebar</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story demonstrates the sidebar starting in a collapsed state on desktop. Users can expand it using the collapse toggle button.</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Is Mobile'\" \r\n                    [value]=\"'False (Desktop mode forced)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Sidebar Collapsed'\" \r\n                    [value]=\"'True'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Note'\" \r\n                    [value]=\"'Click the collapse toggle to expand the sidebar'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsAppLayoutComponent>",
                    "defaultValue": "{\r\n  title: 'Application shell/App Layout',\r\n  component: DsAppLayoutComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DebugWrapperComponent],\r\n      providers: [ViewportService]\r\n    }),\r\n  ],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe main application layout component that provides a responsive shell with sidebar navigation, topbar, and content area. Automatically adapts between mobile and desktop modes based on viewport size.\r\n\r\n## Features\r\n\r\n- **Responsive Design**: Automatically switches between mobile drawer and desktop sidebar at 992px breakpoint\r\n- **Collapsible Sidebar**: Desktop sidebar can be collapsed from 256px to 80px width\r\n- **Mobile Drawer**: Slide-in navigation drawer with overlay on mobile devices\r\n- **Sticky Topbar**: Page header remains visible while scrolling content\r\n- **Integrated Subcomponents**: Both sidebar and topbar are automatically rendered and configured via props\r\n- **Content Projection**: Default slot for main page content\r\n- **Smooth Transitions**: Animated sidebar collapse/expand and mobile drawer\r\n- **Viewport Service**: Automatic mobile detection or manual override for testing\r\n\r\n## Architecture\r\n\r\nThe component automatically renders both **sidebar** and **topbar** - you don't need to project them as children. Just configure them via props and project your main content.\r\n\r\n### Built-in Subcomponents\r\n\r\n1. **Sidebar** - Navigation component (always rendered)\r\n2. **Topbar** - Page header component (always rendered)\r\n3. **Main Content** - Your page content (via default slot)\r\n\r\n## Content Projection\r\n\r\nThe component has a **single default slot** for main page content:\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"groups\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n  [iconName]=\"'remixHome4Line'\"\r\n  [userInitials]=\"'JD'\"\r\n>\r\n  <!-- Your main content goes here -->\r\n  <div class=\"content-container\">\r\n    <h1>Page Content</h1>\r\n  </div>\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n## Props\r\n\r\n### Sidebar Configuration\r\n- \\`sidebarGroups\\`: Array of navigation groups with items\r\n- \\`isSidebarCollapsed\\`: Control collapsed state (desktop only)\r\n- \\`activeItemId\\`: Currently active navigation item\r\n\r\n**Group Structure:**\r\n\\`\\`\\`typescript\r\n{\r\n  id: 'group-id',\r\n  label: 'GROUP LABEL',\r\n  items: [\r\n    { \r\n      id: 'item-id', \r\n      label: 'Item Label', \r\n      icon: 'remixIconName',\r\n      badgeText?: '5' // Optional badge\r\n    }\r\n  ]\r\n}\r\n\\`\\`\\`\r\n\r\n### Topbar Configuration\r\n- \\`pageTitle\\`: The page title text\r\n- \\`iconName\\`: Icon to display next to the title\r\n- \\`userInitials\\`: User avatar initials\r\n- \\`showBreadcrumbs\\`: Enable breadcrumb navigation (default: false)\r\n- \\`breadcrumbItems\\`: Array of breadcrumb items\r\n- \\`showFirstAction\\`: Show first action button (default: true)\r\n- \\`firstActionIcon\\`: Icon for first action (default: 'remixNotification3Line')\r\n- \\`firstActionLabel\\`: Aria label for first action (default: 'Notifications')\r\n- \\`showSecondAction\\`: Show second action button (default: true)\r\n- \\`secondActionIcon\\`: Icon for second action (default: 'remixSettings3Line')\r\n- \\`secondActionLabel\\`: Aria label for second action (default: 'Settings')\r\n\r\n### Layout Configuration\r\n- \\`isMobileOverride\\`: Override automatic mobile detection for testing\r\n\r\n## Events\r\n\r\n- \\`(collapsedChange)\\`: Emits when desktop sidebar is collapsed/expanded\r\n- \\`(menuOpenChange)\\`: Emits when mobile drawer is opened/closed\r\n\r\n## Layout Behavior\r\n\r\n### Desktop Mode (≥ 992px)\r\n- Persistent sidebar on the left (256px expanded, 80px collapsed)\r\n- Grid layout: \\`auto minmax(0, 1fr)\\`\r\n- Sidebar collapse toggle available\r\n- Main content adjusts width automatically\r\n\r\n### Mobile Mode (< 992px)\r\n- Minimized sidebar header (64px height) at the top\r\n- Hamburger menu button to open drawer\r\n- Full sidebar appears as overlay drawer from left\r\n- Semi-transparent backdrop overlay\r\n- Body scroll locked when drawer is open\r\n\r\n## Usage Example\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"sidebarGroups\"\r\n  [isSidebarCollapsed]=\"isSidebarCollapsed()\"\r\n  [activeItemId]=\"'dashboard'\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n  [iconName]=\"'remixHome4Line'\"\r\n  [userInitials]=\"'JD'\"\r\n  [showFirstAction]=\"true\"\r\n  [firstActionIcon]=\"'remixNotification3Line'\"\r\n  [showSecondAction]=\"true\"\r\n  [secondActionIcon]=\"'remixSettings3Line'\"\r\n  (collapsedChange)=\"isSidebarCollapsed.set($event)\"\r\n>\r\n  <!-- Main Content -->\r\n  <div class=\"content-container\">\r\n    <h1>Page Content</h1>\r\n    <p>Your content goes here...</p>\r\n  </div>\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n### With Breadcrumbs\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [sidebarGroups]=\"sidebarGroups\"\r\n  [pageTitle]=\"'Property Details'\"\r\n  [iconName]=\"'remixBuilding2Line'\"\r\n  [showBreadcrumbs]=\"true\"\r\n  [breadcrumbItems]=\"[\r\n    { label: 'Properties', path: '/properties', isLast: false },\r\n    { label: 'Fælledgården Hub', path: '', isLast: true }\r\n  ]\"\r\n  [userInitials]=\"'JD'\"\r\n>\r\n  <!-- Content here -->\r\n</ds-app-layout>\r\n\\`\\`\\`\r\n\r\n## Viewport Testing\r\n\r\nUse the viewport toolbar above to test different screen sizes, or use the \\`isMobileOverride\\` prop to force mobile/desktop mode:\r\n\r\n\\`\\`\\`html\r\n<ds-app-layout\r\n  [isMobileOverride]=\"false\"  <!-- Force desktop mode -->\r\n  [sidebarGroups]=\"groups\"\r\n  [pageTitle]=\"'Dashboard'\"\r\n>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n    layout: 'fullscreen',\r\n    // Add viewport toolbar to allow easy resizing\r\n    viewport: {\r\n      defaultViewport: 'desktop',\r\n      viewports: {\r\n        mobile: {\r\n          name: 'Mobile',\r\n          styles: {\r\n            width: '375px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        tablet: {\r\n          name: 'Tablet',\r\n          styles: {\r\n            width: '768px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        desktop: {\r\n          name: 'Desktop',\r\n          styles: {\r\n            width: '1024px',\r\n            height: '100%',\r\n          },\r\n        },\r\n        'large-desktop': {\r\n          name: 'Large Desktop',\r\n          styles: {\r\n            width: '1440px',\r\n            height: '100%',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "TopbarDebug",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    sidebarGroups: demoGroups,\r\n    isMobileOverride: false, // Force desktop mode\r\n    isSidebarCollapsed: false,\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      handleCollapsedChange(isCollapsed: boolean) {\r\n        this['isSidebarCollapsed'] = isCollapsed;\r\n      }\r\n    },\r\n    template: `\r\n      <ds-app-layout\r\n        [sidebarGroups]=\"sidebarGroups\"\r\n        [isMobileOverride]=\"isMobileOverride\"\r\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\r\n        [pageTitle]=\"'Debug Page'\"\r\n        [iconName]=\"'remixHome4Line'\"\r\n        [userInitials]=\"'DB'\"\r\n        [showFirstAction]=\"false\"\r\n        [showSecondAction]=\"false\"\r\n        (collapsedChange)=\"handleCollapsedChange($event)\"\r\n      >\r\n        <div style=\"padding: 24px;\">\r\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\r\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Topbar Debug</h2>\r\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story tests the topbar component with minimal props to ensure it renders correctly in the app layout.</p>\r\n            \r\n            <div style=\"margin-bottom: 48px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\r\n                <span class=\"ui-sm-medium\">Debug Information</span>\r\n                <div style=\"margin-top: 16px;\">\r\n                  <ds-data-item \r\n                    [label]=\"'Topbar Slot'\" \r\n                    [value]=\"'Using slot=topbar attribute'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'First Action'\" \r\n                    [value]=\"'Hidden (showFirstAction=false)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                  <ds-data-item \r\n                    [label]=\"'Second Action'\" \r\n                    [value]=\"'Hidden (showSecondAction=false)'\" \r\n                    [layout]=\"'horizontal'\" \r\n                    [valueType]=\"'text'\"\r\n                  ></ds-data-item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ds-app-layout>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/list/ds-list.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list/ds-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-list>\r\n        <ds-list-item title=\"Review documentation changes\">\r\n          <div slot=\"metadata\">\r\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n            <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\r\n          </div>\r\n        </ds-list-item>\r\n        <ds-list-item title=\"Update user settings\">\r\n          <div slot=\"metadata\">\r\n            <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to you\" />\r\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"1 day ago\" />\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n            <ds-button variant=\"primary\" size=\"sm\">Update</ds-button>\r\n          </div>\r\n        </ds-list-item>\r\n        <ds-list-item title=\"Deploy new features\">\r\n          <div slot=\"metadata\">\r\n            <ds-metadata-item icon=\"remixRocketLine\" value=\"Release\" variant=\"success\" />\r\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n            <ds-button variant=\"primary\" size=\"sm\">Deploy</ds-button>\r\n          </div>\r\n        </ds-list-item>\r\n      </ds-list>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list/ds-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsListComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/List',\r\n  component: DsListComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsListItemComponent, DsButtonComponent, DsMetadataItemComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA container component that provides consistent styling for lists of items.\r\nHandles border radius, dividers, and spacing automatically.\r\n\r\n## Features\r\n- Consistent border radius handling\r\n- Automatic dividers between items\r\n- Proper hover state management\r\n- Responsive padding and spacing\r\n\r\n## Usage\r\n\\`\\`\\`html\r\n<ds-list>\r\n  <ds-list-item title=\"First item\">\r\n    <div slot=\"metadata\">\r\n      <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n    </div>\r\n    <div slot=\"actions\">\r\n      <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n      <ds-button variant=\"primary\" size=\"sm\">Action</ds-button>\r\n    </div>\r\n  </ds-list-item>\r\n  <ds-list-item title=\"Second item\">...</ds-list-item>\r\n</ds-list>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n}"
                }
            ],
            "src/app/components/ui/list-item/ds-list-item.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    title: 'Review documentation changes',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Complete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    title: 'Inspect for signs of leaks or dampness',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixAlertLine\" value=\"Important\" variant=\"warning\" />\r\n          <ds-metadata-item icon=\"remixTeamLine\" value=\"Based on 12 inquiries\" />\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\r\n        </div>\r\n        <div slot=\"actions\">\r\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n          <ds-button variant=\"primary\" size=\"sm\">Create task</ds-button>\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "LongTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    title: 'This is a very long title that should demonstrate how the component handles longer text content and wrapping behavior while maintaining proper alignment',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"Just now\" />\r\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsListItemComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/List Item',\r\n  component: DsListItemComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsButtonComponent, DsMetadataItemComponent],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA versatile list item component that supports a title with metadata and action buttons.\r\n\r\n## Features\r\n\r\n- **Title Property**: Configurable title with consistent typography\r\n- **Metadata Slot**: Flexible slot for metadata items (status, timestamps, etc.)\r\n- **Actions Slot**: Action buttons that appear on hover\r\n- **Hover State**: Subtle background change and action reveal on hover\r\n- **Responsive Layout**: Adapts to different screen sizes\r\n\r\n## Slots\r\n\r\n- **metadata**: For metadata items like status indicators, timestamps, etc.\r\n- **actions**: For action buttons that appear on hover\r\n\r\n## Examples\r\n\r\n\\`\\`\\`html\r\n<ds-list-item title=\"Review pending changes\">\r\n  <!-- Metadata slot -->\r\n  <div slot=\"metadata\">\r\n    <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\r\n    <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to John\" />\r\n  </div>\r\n  \r\n  <!-- Actions slot -->\r\n  <div slot=\"actions\">\r\n    <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n    <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\r\n  </div>\r\n</ds-list-item>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    title: {\r\n      control: 'text',\r\n      description: 'The title text to display',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    title: 'Update user documentation',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\r\n        </div>\r\n        <div slot=\"actions\">\r\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\r\n          <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    title: 'Review and approve design changes',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-list-item [title]=\"title\">\r\n        <div slot=\"metadata\">\r\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\r\n          <ds-metadata-item icon=\"remixUserLine\" value=\"Based on 8 reviews\" />\r\n          <ds-metadata-item icon=\"remixAlarmLine\" value=\"Important\" variant=\"warning\" />\r\n        </div>\r\n      </ds-list-item>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    icon: 'remixTimeLine',\r\n    value: '4 hours ago',\r\n  },\r\n}"
                },
                {
                    "name": "CommonUseCases",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <!-- Status indicators -->\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Status Indicators</h3>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item\r\n              icon=\"remixSparklingFill\"\r\n              value=\"Important\"\r\n              tooltip=\"High priority item\"\r\n            />\r\n            <ds-metadata-item\r\n              icon=\"remixCheckLine\"\r\n              value=\"Verified\"\r\n              tooltip=\"Verified by system\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Time-related -->\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Time Information</h3>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item\r\n              icon=\"remixTimeLine\"\r\n              value=\"4 hours ago\"\r\n            />\r\n            <ds-metadata-item\r\n              icon=\"remixCalendarLine\"\r\n              value=\"Due tomorrow\"\r\n              tooltip=\"Due on March 15, 2024\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Data sources -->\r\n        <div>\r\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Data Sources</h3>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item\r\n              icon=\"remixSurveyLine\"\r\n              value=\"Based on 12 inquiries\"\r\n              tooltip=\"Data from recent customer interactions\"\r\n            />\r\n            <ds-metadata-item\r\n              icon=\"remixDatabaseLine\"\r\n              value=\"System generated\"\r\n              tooltip=\"Generated by AI analysis\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsMetadataItemComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Metadata Item',\r\n  component: DsMetadataItemComponent,\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA compact component for displaying metadata information with an icon and text. Perfect for status indicators, timestamps, and other supplementary information.\r\n\r\n## Features\r\n\r\n- **Compact Design**: 20px height with 4px gap between icon and text\r\n- **Consistent Typography**: Uses ui-xs-regular (12px) for text\r\n- **Semantic Colors**: Uses tertiary text color for both icon and text\r\n- **Tooltip Support**: Optional tooltip for additional context\r\n- **Accessible**: Follows WCAG guidelines for color contrast and interactive elements\r\n\r\n## Usage Guidelines\r\n\r\n1. Use for supplementary information that doesn't require user interaction\r\n2. Keep text content concise and clear\r\n3. Choose appropriate icons that enhance understanding\r\n4. Add tooltips for additional context when needed\r\n5. Group related metadata items with consistent spacing\r\n\r\n## Examples\r\n\r\n\\`\\`\\`html\r\n<!-- Basic usage -->\r\n<ds-metadata-item\r\n  icon=\"remixTimeLine\"\r\n  value=\"4 hours ago\"\r\n/>\r\n\r\n<!-- With tooltip -->\r\n<ds-metadata-item\r\n  icon=\"remixSurveyLine\"\r\n  value=\"Based on 12 inquiries\"\r\n  tooltip=\"Data collected from recent customer inquiries\"\r\n/>\r\n\r\n<!-- Multiple items -->\r\n<div style=\"display: flex; gap: 12px;\">\r\n  <ds-metadata-item\r\n    icon=\"remixSparklingFill\"\r\n    value=\"Important\"\r\n  />\r\n  <ds-metadata-item\r\n    icon=\"remixTimeLine\"\r\n    value=\"4 hours ago\"\r\n  />\r\n</div>\r\n\\`\\`\\`\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    icon: {\r\n      control: 'text',\r\n      description: 'The name of the icon to display',\r\n    },\r\n    value: {\r\n      control: 'text',\r\n      description: 'The text value to display',\r\n    },\r\n    tooltip: {\r\n      control: 'text',\r\n      description: 'Optional tooltip text for additional context',\r\n    },\r\n  },\r\n  args: {\r\n    icon: 'remixTimeLine',\r\n    value: '4 hours ago',\r\n  },\r\n}"
                },
                {
                    "name": "TaskMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\r\n        <ds-metadata-item\r\n          icon=\"remixSparklingFill\"\r\n          value=\"Important\"\r\n          tooltip=\"High priority task\"\r\n        />\r\n        <ds-metadata-item\r\n          icon=\"remixSurveyLine\"\r\n          value=\"Based on 12 inquiries\"\r\n          tooltip=\"Aggregated from customer feedback\"\r\n        />\r\n        <ds-metadata-item\r\n          icon=\"remixTimeLine\"\r\n          value=\"4 hours ago\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
                },
                {
                    "name": "WithTooltip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    icon: 'remixSurveyLine',\r\n    value: 'Based on 12 inquiries',\r\n    tooltip: 'Data collected from recent customer inquiries',\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/tabs/ds-tabs.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      value: signal('tab1'),\r\n    },\r\n    template: `\r\n      <ds-tabs [(value)]=\"value\">\r\n        <ds-tab value=\"tab1\" label=\"First Tab\">\r\n          <p>Content for first tab</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"tab2\" label=\"Second Tab\">\r\n          <p>Content for second tab</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"tab3\" label=\"Third Tab\">\r\n          <p>Content for third tab</p>\r\n        </ds-tab>\r\n      </ds-tabs>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTabs>",
                    "defaultValue": "{\r\n  title: 'Primitives/Tabs',\r\n  component: DsTabs,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsTabs, DsTab],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "WithBadges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      value: signal('inbox'),\r\n    },\r\n    template: `\r\n      <ds-tabs [(value)]=\"value\">\r\n        <ds-tab value=\"inbox\" label=\"Inbox\" [showBadge]=\"true\" [badgeCount]=\"3\">\r\n          <p>Inbox content</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"tasks\" label=\"My tasks\" [showBadge]=\"true\" [badgeCount]=\"12\">\r\n          <p>Tasks content</p>\r\n        </ds-tab>\r\n        <ds-tab value=\"archive\" label=\"Archive\">\r\n          <p>Archive content</p>\r\n        </ds-tab>\r\n      </ds-tabs>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithCustomContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      value: signal('settings'),\r\n    },\r\n    template: `\r\n      <ds-tabs [(value)]=\"value\">\r\n        <ds-tab value=\"profile\" label=\"Profile\">\r\n          <div class=\"tw-p-4\">\r\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Profile Settings</h3>\r\n            <p>Manage your profile information here.</p>\r\n          </div>\r\n        </ds-tab>\r\n        <ds-tab value=\"settings\" label=\"Settings\">\r\n          <div class=\"tw-p-4\">\r\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Account Settings</h3>\r\n            <p>Configure your account preferences.</p>\r\n          </div>\r\n        </ds-tab>\r\n        <ds-tab value=\"notifications\" label=\"Notifications\" [showBadge]=\"true\" [badgeCount]=\"5\">\r\n          <div class=\"tw-p-4\">\r\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Notification Settings</h3>\r\n            <p>Manage your notification preferences.</p>\r\n          </div>\r\n        </ds-tab>\r\n      </ds-tabs>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/tooltip/ds-tooltip.stories.ts": [
                {
                    "name": "ButtonSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-tooltip text=\"Small button tooltip\">\r\n          <ds-button size=\"sm\" variant=\"primary\">Small</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Medium button tooltip\">\r\n          <ds-button size=\"md\" variant=\"secondary\">Medium</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Large button tooltip\">\r\n          <ds-button size=\"lg\" variant=\"ghost\">Large</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'This is a helpful tooltip',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-tooltip [text]=\"text\">\r\n        <ds-button variant=\"primary\">Hover me</ds-button>\r\n      </ds-tooltip>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "DifferentPlacements",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 4rem; padding: 4rem; place-items: center;\">\r\n        <ds-tooltip text=\"Tooltip on top\">\r\n          <ds-button>Top</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Tooltip on right\">\r\n          <ds-button>Right</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Tooltip on bottom\">\r\n          <ds-button>Bottom</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Tooltip on left\">\r\n          <ds-button>Left</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Auto placement\">\r\n          <ds-button>Auto</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Another tooltip\">\r\n          <ds-button>Center</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "IconButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-tooltip text=\"Add to favorites\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixStarLine\" \r\n            ariaLabel=\"Favorite\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Settings and preferences\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixSettingsLine\" \r\n            ariaLabel=\"Settings\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"More options menu\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixMoreLine\" \r\n            ariaLabel=\"More options\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Delete permanently\">\r\n          <ds-button \r\n            [iconOnly]=\"true\" \r\n            leadingIcon=\"remixDeleteBinLine\" \r\n            ariaLabel=\"Delete\"\r\n            variant=\"ghost\"\r\n          ></ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    text: 'Click to see the action',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      clickCount: 0,\r\n      onClick: function() {\r\n        this['clickCount']++;\r\n        console.log('Button clicked from tooltip!');\r\n      }\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\r\n        <ds-tooltip [text]=\"text\">\r\n          <ds-button (clicked)=\"onClick()\">\r\n            Click me ({{clickCount}})\r\n          </ds-button>\r\n        </ds-tooltip>\r\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\r\n          Click count: {{clickCount}}\r\n        </p>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "LongText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tooltip text=\"This is a very long tooltip text that should wrap properly and demonstrate how the tooltip handles longer content gracefully without breaking the layout.\">\r\n        <ds-button>Long tooltip text</ds-button>\r\n      </ds-tooltip>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTooltipComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Tooltip',\r\n  component: DsTooltipComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    text: {\r\n      control: { type: 'text' },\r\n      description: 'The text content to display in the tooltip',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\r\n        <ds-tooltip text=\"Primary action button\">\r\n          <ds-button variant=\"primary\">Primary</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Secondary action button\">\r\n          <ds-button variant=\"secondary\">Secondary</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Ghost style button\">\r\n          <ds-button variant=\"ghost\">Ghost</ds-button>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Destructive action - use with caution\">\r\n          <ds-button variant=\"destructive\">Delete</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "WithFormElements",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 2rem; align-items: flex-start; width: 300px;\">\r\n        <ds-tooltip text=\"Enter your email address\">\r\n          <ds-input \r\n            type=\"email\" \r\n            placeholder=\"Email address\"\r\n            variant=\"default\"\r\n          />\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Check this to receive notifications\">\r\n          <div style=\"display: flex; align-items: center; gap: 8px;\">\r\n            <ds-checkbox />\r\n            <ds-label>Subscribe to notifications</ds-label>\r\n          </div>\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"This icon represents settings\">\r\n          <ds-icon name=\"remixSettingsLine\" size=\"24px\" style=\"cursor: pointer;\" />\r\n        </ds-tooltip>\r\n        \r\n        <ds-tooltip text=\"Submit your information\">\r\n          <ds-button variant=\"primary\" size=\"sm\">Submit</ds-button>\r\n        </ds-tooltip>\r\n      </div>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsTooltipComponent, DsInputComponent, DsCheckboxComponent, DsLabelComponent, DsIconComponent, DsButtonComponent],\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/editable-table/ds-editable-table.stories.ts": [
                {
                    "name": "categoryOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\r\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\r\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\r\n  { id: 'office', label: 'Office', value: 'Office' },\r\n]"
                },
                {
                    "name": "EmptyState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      emptyData: signal([]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: '',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('First row added:', row);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"emptyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [emptyMessage]=\"'No invoice lines yet'\"\r\n        [addRowButtonText]=\"'Add first line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "invoiceColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'description',\r\n    header: 'Description',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Add description...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n        maxWidth: 'xl',\r\n        truncate: true,\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'quantity',\r\n    header: 'Quantity',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.5,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'unitPrice',\r\n    header: 'Unit Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'discount',\r\n    header: 'Discount',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'total',\r\n    header: 'Total',\r\n    cell: (info) => info.getValue(),\r\n    enableSorting: true,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n]"
                },
                {
                    "name": "InvoiceLinesReorderable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceData: signal([...sampleInvoiceLines]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        description: 'Add description',\r\n        quantity: 1,\r\n        unitPrice: 0,\r\n        discount: 0,\r\n        total: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"invoiceData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [showDragHandle]=\"true\"\r\n        [addRowButtonText]=\"'Add invoice line'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsEditableTableComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Editable Table',\r\n  component: DsEditableTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixDeleteBinLine,\r\n          remixDraggable,\r\n          remixInboxLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display and edit (two-way binding)',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    reorderable: {\r\n      control: 'boolean',\r\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\r\n    },\r\n    allowAddRow: {\r\n      control: 'boolean',\r\n      description: 'Allow adding new rows',\r\n    },\r\n    allowDeleteRow: {\r\n      control: 'boolean',\r\n      description: 'Allow deleting rows',\r\n    },\r\n    showDragHandle: {\r\n      control: 'boolean',\r\n      description: 'Show drag handle column (only when reorderable is true)',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    addRowButtonText: {\r\n      control: 'text',\r\n      description: 'Text for add row button',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "NoDeleteAllowed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      lockedData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"lockedData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"false\"\r\n        [addRowButtonText]=\"'Add line'\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "NoDragHandle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      noDragData: signal([...sampleProducts]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"noDragData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [showDragHandle]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "priorityOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: 'low', label: 'Low', value: 'Low' },\r\n  { id: 'medium', label: 'Medium', value: 'Medium' },\r\n  { id: 'high', label: 'High', value: 'High' },\r\n]"
                },
                {
                    "name": "productColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter product name...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'sku',\r\n    header: 'SKU',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'SKU-000'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: categoryOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 0.01,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    cell: (info) => editableNumberCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      min: 0,\r\n      step: 1,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n]"
                },
                {
                    "name": "ProductsSortable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      productData: signal([...sampleProducts]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        name: '',\r\n        sku: '',\r\n        category: 'Electronics',\r\n        price: 0,\r\n        stock: 0\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onSortingChanged: (sorting: any) => {\r\n        console.log('Sorting changed:', sorting);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"productData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add product'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (sortingChanged)=\"onSortingChanged($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: productColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "ReadOnlyMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      readOnlyData: signal([...sampleInvoiceLines]),\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"readOnlyData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"false\"\r\n        [allowAddRow]=\"false\"\r\n        [allowDeleteRow]=\"false\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: invoiceColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "sampleInvoiceLines",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InvoiceLine[]",
                    "defaultValue": "[\r\n  { \r\n    id: '1', \r\n    name: 'Administration fee', \r\n    description: 'Covers handling and coordination', \r\n    quantity: 1, \r\n    unitPrice: 500, \r\n    discount: 0, \r\n    total: 500 \r\n  },\r\n  { \r\n    id: '2', \r\n    name: 'Miscellaneous', \r\n    description: 'Various small items', \r\n    quantity: 2, \r\n    unitPrice: 400, \r\n    discount: 0, \r\n    total: 800 \r\n  },\r\n  { \r\n    id: '3', \r\n    name: 'Technical Manager', \r\n    description: 'Consulting services', \r\n    quantity: 6.5, \r\n    unitPrice: 800, \r\n    discount: 0, \r\n    total: 5200 \r\n  },\r\n]"
                },
                {
                    "name": "sampleProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "defaultValue": "[\r\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\r\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\r\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\r\n]"
                },
                {
                    "name": "sampleTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "defaultValue": "[\r\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\r\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\r\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\r\n]"
                },
                {
                    "name": "statusOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: 'todo', label: 'To Do', value: 'To Do' },\r\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\r\n  { id: 'done', label: 'Done', value: 'Done' },\r\n]"
                },
                {
                    "name": "taskColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  {\r\n    accessorKey: 'title',\r\n    header: 'Task',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Enter task title...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'lg',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'assignee',\r\n    header: 'Assignee',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      placeholder: 'Assign to...'\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'priority',\r\n    header: 'Priority',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: priorityOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    cell: (info) => editableSelectCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n      options: statusOptions,\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'dueDate',\r\n    header: 'Due Date',\r\n    cell: (info) => editableTextCell({\r\n      row: info.row.original,\r\n      rowIndex: info.row.index,\r\n      value: info.getValue(),\r\n    }),\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md',\r\n      }\r\n    } as DsEditableTableColumnMeta,\r\n  },\r\n]"
                },
                {
                    "name": "TasksWithSelects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      taskData: signal([...sampleTasks]),\r\n      newRowTemplate: {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        title: '',\r\n        assignee: '',\r\n        priority: 'Medium',\r\n        status: 'To Do',\r\n        dueDate: ''\r\n      },\r\n      onCellEdited: (event: any) => {\r\n        console.log('Cell edited:', event);\r\n      },\r\n      onRowAdded: (row: any) => {\r\n        console.log('Row added:', row);\r\n      },\r\n      onRowDeleted: (event: any) => {\r\n        console.log('Row deleted:', event);\r\n      },\r\n      onRowReordered: (event: any) => {\r\n        console.log('Row reordered:', event);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-editable-table\r\n        [(data)]=\"taskData\"\r\n        [columns]=\"columns\"\r\n        [reorderable]=\"true\"\r\n        [allowAddRow]=\"true\"\r\n        [allowDeleteRow]=\"true\"\r\n        [addRowButtonText]=\"'Add task'\"\r\n        [newRowTemplate]=\"newRowTemplate\"\r\n        (cellEdited)=\"onCellEdited($event)\"\r\n        (rowAdded)=\"onRowAdded($event)\"\r\n        (rowDeleted)=\"onRowDeleted($event)\"\r\n        (rowReordered)=\"onRowReordered($event)\"\r\n      />\r\n    `,\r\n  }),\r\n  args: {\r\n    columns: taskColumns,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/input/ds-input.stories.ts": [
                {
                    "name": "Clearable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { clearable: true, placeholder: 'Type to see clear button' },\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { disabled: true, placeholder: 'Disabled input' },\r\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { variant: 'error', placeholder: 'Error state' },\r\n}"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { ghost: true, placeholder: 'Ghost input...' },\r\n}"
                },
                {
                    "name": "GhostWithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { ghost: true, leadingIcon: 'remixSearchLine', placeholder: 'Search...' },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsInputComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Input',\r\n  component: DsInputComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      }\r\n    }\r\n  },\r\n  decorators: [\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\r\n    type: { control: { type: 'select' }, options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'] },\r\n    placeholder: { control: 'text' },\r\n    disabled: { control: 'boolean' },\r\n    readonly: { control: 'boolean' },\r\n    required: { control: 'boolean' },\r\n    clearable: { control: 'boolean' },\r\n    ghost: { control: 'boolean' },\r\n    leadingIcon: { control: 'text' },\r\n    trailingIcon: { control: 'text' },\r\n    ariaLabel: { control: 'text' },\r\n    ariaDescribedBy: { control: 'text' },\r\n  },\r\n  args: {\r\n    variant: 'default',\r\n    type: 'text',\r\n    placeholder: 'Enter text...',\r\n    disabled: false,\r\n    readonly: false,\r\n    required: false,\r\n    clearable: false,\r\n    ghost: false,\r\n  },\r\n}"
                },
                {
                    "name": "Readonly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { readonly: true, placeholder: 'Readonly input' },\r\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { variant: 'success', placeholder: 'Success state' },\r\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { variant: 'warning', placeholder: 'Warning state' },\r\n}"
                },
                {
                    "name": "WithLeadingIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { leadingIcon: 'remixUserLine', placeholder: 'Username' },\r\n}"
                }
            ],
            "src/app/components/ui/data-table/ds-data-table.stories.ts": [
                {
                    "name": "ClickableRows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    rowClickable: true,\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      onRowClicked: (row: User) => {\r\n        alert(`Clicked on: ${row.name}`);\r\n      },\r\n    },\r\n    template: `\r\n      <ds-data-table\r\n        [data]=\"data\"\r\n        [columns]=\"columns\"\r\n        [searchable]=\"searchable\"\r\n        [paginated]=\"paginated\"\r\n        [pageSize]=\"pageSize\"\r\n        [rowClickable]=\"rowClickable\"\r\n        (rowClicked)=\"onRowClicked($event)\"\r\n      />\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "CompactView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    showColumnVisibility: false,\r\n  },\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "EmptyState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: [],\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    emptyMessage: 'No users found',\r\n  },\r\n}"
                },
                {
                    "name": "LargeDataset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: Array.from({ length: 100 }, (_, i) => ({\r\n      id: i + 1,\r\n      name: `User ${i + 1}`,\r\n      email: `user${i + 1}@example.com`,\r\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\r\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\r\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\r\n    })),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 10,\r\n    pageSizeOptions: [10, 25, 50, 100],\r\n    showColumnVisibility: true,\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsDataTableComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Data Table',\r\n  component: DsDataTableComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixArrowUpDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n          remixEyeLine,\r\n          remixEditLine,\r\n          remixDeleteBinLine,\r\n          remixLoader4Line,\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    data: {\r\n      control: false,\r\n      description: 'Array of data to display in the table',\r\n    },\r\n    columns: {\r\n      control: false,\r\n      description: 'Column definitions for the table',\r\n    },\r\n    searchable: {\r\n      control: 'boolean',\r\n      description: 'Enable global search functionality',\r\n    },\r\n    searchPlaceholder: {\r\n      control: 'text',\r\n      description: 'Placeholder text for search input',\r\n    },\r\n    paginated: {\r\n      control: 'boolean',\r\n      description: 'Enable pagination',\r\n    },\r\n    pageSize: {\r\n      control: 'number',\r\n      description: 'Number of rows per page',\r\n    },\r\n    showColumnVisibility: {\r\n      control: 'boolean',\r\n      description: 'Show column visibility toggle',\r\n    },\r\n    emptyMessage: {\r\n      control: 'text',\r\n      description: 'Message to display when table is empty',\r\n    },\r\n    rowClickable: {\r\n      control: 'boolean',\r\n      description: 'Make rows clickable',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "productColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Product Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'category',\r\n    header: 'Category',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'price',\r\n    header: 'Price',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const price = info.getValue() as number;\r\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'stock',\r\n    header: 'Stock',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const stock = info.getValue() as number;\r\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\r\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        in_stock: 'success',\r\n        low_stock: 'warning',\r\n        out_of_stock: 'destructive',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      const label = status.replace('_', ' ').toUpperCase();\r\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\r\n    },\r\n  },\r\n]"
                },
                {
                    "name": "Products",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleProducts,\r\n    columns: productColumns,\r\n    searchable: true,\r\n    searchPlaceholder: 'Search products...',\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "sampleProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "defaultValue": "[\r\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\r\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\r\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\r\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\r\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\r\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\r\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\r\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\r\n]"
                },
                {
                    "name": "sampleUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "defaultValue": "[\r\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\r\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\r\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\r\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\r\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\r\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\r\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\r\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\r\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\r\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\r\n]"
                },
                {
                    "name": "userColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px\r\n        maxWidth: 'lg',  // 256px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'md',  // 192px\r\n        maxWidth: 'xl',  // 320px\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const variantMap: Record<string, string> = {\r\n        active: 'success',\r\n        inactive: 'grey',\r\n        pending: 'warning',\r\n      };\r\n      const variant = variantMap[status] || 'grey';\r\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n]"
                },
                {
                    "name": "userColumnsWithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  ...userColumns,\r\n  {\r\n    id: 'actions',\r\n    header: 'Actions',\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'sm', // 128px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      return `\r\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\r\n            title=\"Edit\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n            </svg>\r\n          </button>\r\n          <button \r\n            class=\"action-btn\"\r\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\r\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\r\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\r\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\r\n            title=\"Delete\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\r\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      `;\r\n    },\r\n  },\r\n]"
                },
                {
                    "name": "userColumnsWithSizing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'xs', // 96px - narrow fixed width\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: 'Name',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',  // 128px minimum\r\n        maxWidth: 'lg',  // 256px maximum\r\n        truncate: true,  // Show ellipsis\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email Address (Very Long Header Name)',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: '300px', // Custom pixel value\r\n        truncate: true,\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'role',\r\n    header: 'Role',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'xs',\r\n        maxWidth: 'sm',\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      sizing: {\r\n        minWidth: 'sm',\r\n        maxWidth: 'md',\r\n        truncate: false, // Allow wrapping instead of truncating\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n    cell: (info) => {\r\n      const status = info.getValue() as string;\r\n      const statusColors: Record<string, string> = {\r\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\r\n      };\r\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: 'joinDate',\r\n    header: 'Join Date',\r\n    meta: {\r\n      sizing: {\r\n        maxWidth: 'md', // 192px\r\n      }\r\n    } as DsDataTableColumnMeta,\r\n  },\r\n]"
                },
                {
                    "name": "WithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n    rowClickable: false,\r\n  },\r\n}"
                },
                {
                    "name": "WithColumnManagement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumnsWithActions,\r\n    searchable: true,\r\n    paginated: true,\r\n    pageSize: 8,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\r\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\r\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\r\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\r\n- **Persistent State**: Selected columns are reflected with checkmarks\r\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\r\n\r\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithColumnSizing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: [\r\n      ...sampleUsers.slice(0, 3),\r\n      // Add some users with very long content to demonstrate truncation\r\n      {\r\n        id: 11,\r\n        name: 'Alexandra Maximillian Constantine',\r\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\r\n        role: 'SuperAdmin',\r\n        status: 'active' as const,\r\n        joinDate: '2023-11-01',\r\n      },\r\n      {\r\n        id: 12,\r\n        name: 'Benjamin Christopher Wellington',\r\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\r\n        role: 'Editor',\r\n        status: 'pending' as const,\r\n        joinDate: '2023-12-15',\r\n      },\r\n    ],\r\n    columns: userColumnsWithSizing,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: `Advanced column sizing demonstration showing:\r\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\r\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\r\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\r\n- **Text truncation** with ellipsis (default when maxWidth is set)\r\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\r\n\r\nTry resizing the browser to see how columns behave with long content.`,\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithoutPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers.slice(0, 5),\r\n    columns: userColumns,\r\n    searchable: true,\r\n    paginated: false,\r\n    showColumnVisibility: true,\r\n  },\r\n}"
                },
                {
                    "name": "WithoutSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    data: sampleUsers,\r\n    columns: userColumns,\r\n    searchable: false,\r\n    paginated: true,\r\n    pageSize: 5,\r\n    showColumnVisibility: true,\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/icon/ds-icon.stories.ts": [
                {
                    "name": "Colors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n        <div style=\"display: flex; align-items: center; gap: 16px;\">\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"primary\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"secondary\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"tertiary\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"brand\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"success\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"warning\"></ds-icon>\r\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"destructive\"></ds-icon>\r\n        </div>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "ColorTest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px; padding: 20px;\">\r\n        <!-- Test 1: Hardcoded colors for reference -->\r\n        <div>\r\n          <h4>Reference Colors (hardcoded)</h4>\r\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\r\n            <div style=\"color: #202227;\">■ primary (#202227)</div>\r\n            <div style=\"color: #545B66;\">■ secondary (#545B66)</div>\r\n            <div style=\"color: #626B78;\">■ tertiary (#626B78)</div>\r\n            <div style=\"color: #6B5FF5;\">■ brand (#6B5FF5)</div>\r\n            <div style=\"color: #158452;\">■ success (#158452)</div>\r\n            <div style=\"color: #d97706;\">■ warning (#d97706)</div>\r\n            <div style=\"color: #dc2626;\">■ destructive (#dc2626)</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Test 2: Our icon component -->\r\n        <div>\r\n          <h4>Icon Component Colors</h4>\r\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"primary\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"secondary\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"tertiary\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"brand\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"success\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"warning\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"destructive\"></ds-icon>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Test 3: Custom colors that bypass CSS classes -->\r\n        <div>\r\n          <h4>Custom Colors (bypass CSS)</h4>\r\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#202227\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#545B66\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#626B78\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#6B5FF5\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#158452\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#d97706\"></ds-icon>\r\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#dc2626\"></ds-icon>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "CustomSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    name: 'remixSearchLine',\r\n    size: '48px',\r\n    color: 'brand'\r\n  }\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    name: 'remixHomeLine',\r\n    size: '20px'\r\n  }\r\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    name: 'remixSettingsLine',\r\n    size: '24px',\r\n    color: 'brand',\r\n    interactive: true\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsIconComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Icon',\r\n  component: DsIconComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    name: {\r\n      control: { type: 'text' },\r\n      description: 'The name of the icon to display',\r\n    },\r\n    size: {\r\n      control: { type: 'select' },\r\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\r\n      description: 'The size of the icon (pixel values or custom CSS value)',\r\n    },\r\n    color: {\r\n      control: { type: 'text' },\r\n      description: 'The color of the icon. Use predefined values (primary, secondary, tertiary, brand, success, warning, destructive) or any CSS color value (#hex, rgb(), hsl(), var(), etc.)',\r\n    },\r\n    interactive: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the icon has interactive states (hover, active)',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\r\n        <ds-icon name=\"remixHomeLine\" size=\"12px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"14px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"16px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"18px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"20px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"22px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"24px\"></ds-icon>\r\n        <ds-icon name=\"remixHomeLine\" size=\"32px\"></ds-icon>\r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "src/app/components/ui/listbox/ds-listbox.stories.ts": [
                {
                    "name": "ColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Name', value: 'name' },\r\n      { id: '2', label: 'Email', value: 'email' },\r\n      { id: '3', label: 'Role', value: 'role' },\r\n      { id: '4', label: 'Status', value: 'status' },\r\n      { id: '5', label: 'Join Date', value: 'joinDate' },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-icon-button icon=\"remixSettings3Line\" variant=\"ghost\" ariaLabel=\"Select columns\" />\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "CustomWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Short', value: 1 },\r\n      { id: '2', label: 'Medium Length Option', value: 2 },\r\n      { id: '3', label: 'Very Long Option Name Here', value: 3 },\r\n    ],\r\n    multiple: false,\r\n    disabled: false,\r\n    width: '300px',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"secondary\">Custom Width</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    multiple: false,\r\n    disabled: true,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Disabled Listbox</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "FilterPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Active', value: 'active' },\r\n      { id: '2', label: 'Inactive', value: 'inactive' },\r\n      { id: '3', label: 'Pending', value: 'pending' },\r\n      { id: '4', label: 'Archived', value: 'archived' },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"ghost\" leadingIcon=\"remixFilterLine\">Filter Status</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsListboxComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Listbox',\r\n  component: DsListboxComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormsModule, DsButtonComponent, DsIconButtonComponent],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  argTypes: {\r\n    multiple: {\r\n      control: 'boolean',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    width: {\r\n      control: 'text',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Read', value: 'read' },\r\n      { id: '2', label: 'Write', value: 'write' },\r\n      { id: '3', label: 'Delete', value: 'delete' },\r\n      { id: '4', label: 'Admin', value: 'admin' },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Select Permissions</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "simpleOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsListboxOption[]",
                    "defaultValue": "[\r\n  { id: '1', label: 'Option 1', value: 1 },\r\n  { id: '2', label: 'Option 2', value: 2 },\r\n  { id: '3', label: 'Option 3', value: 3 },\r\n  { id: '4', label: 'Option 4', value: 4 },\r\n]"
                },
                {
                    "name": "SingleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    multiple: false,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Select Option</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithDisabledOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Available Option 1', value: 1 },\r\n      { id: '2', label: 'Disabled Option', value: 2, disabled: true },\r\n      { id: '3', label: 'Available Option 2', value: 3 },\r\n      { id: '4', label: 'Another Disabled', value: 4, disabled: true },\r\n    ],\r\n    multiple: true,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\">Select Options</ds-button>\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithIconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    multiple: false,\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\r\n        <ds-icon-button icon=\"remixMoreLine\" variant=\"ghost\" ariaLabel=\"More options\" />\r\n      </ds-listbox>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/tile/ds-tile.stories.ts": [
                {
                    "name": "ComplexExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      invoiceLines: sampleInvoiceLines,\r\n      invoiceColumns: invoiceColumns,\r\n    },\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <ds-tile orientation=\"vertical\">\r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>\r\n                <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\r\n                Invoice #INV-2024-001\r\n              </header-title>\r\n              <header-actions>\r\n                <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Download</ds-button>\r\n                <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\r\n              <ds-data-item label=\"Client\" value=\"Acme Corporation\" layout=\"vertical\" />\r\n              <ds-data-item label=\"Issue Date\" value=\"2024-03-01\" layout=\"vertical\" />\r\n              <ds-data-item label=\"Due Date\" value=\"2024-03-31\" layout=\"vertical\" />\r\n              <ds-data-item \r\n                label=\"Status\" \r\n                value=\"Pending\" \r\n                valueType=\"badge\"\r\n                layout=\"vertical\"\r\n                badgeVariant=\"warning\"\r\n                badgeContent=\"Pending\" />\r\n            </div>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section [padding]=\"false\">\r\n            <ds-data-table \r\n              [data]=\"invoiceLines\" \r\n              [columns]=\"invoiceColumns\"\r\n              [searchable]=\"false\"\r\n              [showColumnVisibility]=\"false\"\r\n              [paginated]=\"false\">\r\n            </ds-data-table>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section>\r\n            <div style=\"display: flex; justify-content: flex-end; gap: 8px;\">\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Subtotal\" \r\n                  value=\"$4,598.83\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'ui-xs-regular'\"\r\n                  [valueClassName]=\"'ui-lg-medium'\" />\r\n              </div>\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Tax (10%)\" \r\n                  value=\"$459.88\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'ui-xs-regular'\"\r\n                  [valueClassName]=\"'ui-lg-medium'\" />\r\n              </div>\r\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\r\n                <ds-data-item \r\n                  label=\"Total\" \r\n                  value=\"$5,058.71\" \r\n                  layout=\"vertical\"\r\n                  [labelClassName]=\"'body-sm-semibold'\"\r\n                  [valueClassName]=\"'ui-lg-medium tw-text-brand'\" />\r\n              </div>\r\n            </div>\r\n          </ds-tile-section>\r\n        </ds-tile>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    orientation: 'vertical',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-tile [orientation]=\"orientation\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Section Title</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\">Action</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">This is a simple tile section with a header and some content.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "invoiceColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\r\n  { accessorKey: 'id', header: 'ID' },\r\n  { accessorKey: 'description', header: 'Description' },\r\n  { accessorKey: 'quantity', header: 'Qty' },\r\n  { accessorKey: 'unitPrice', header: 'Unit Price', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\r\n  { accessorKey: 'total', header: 'Total', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\r\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTileComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Tile',\r\n  component: DsTileComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixAddLine,\r\n          remixEditLine,\r\n          remixMoreLine,\r\n          remixFileList3Line,\r\n          remixUserLine,\r\n          remixDownloadLine,\r\n          remixFilterLine,\r\n          remixSearchLine,\r\n          remixLayoutColumnLine,\r\n          remixCloseLine,\r\n          remixArrowUpLine,\r\n          remixArrowDownLine,\r\n          remixInboxLine,\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n        }),\r\n      ],\r\n    }),\r\n    moduleMetadata({\r\n      imports: [\r\n        DsTileSectionComponent,\r\n        TileHeaderComponent,\r\n        DsButtonComponent,\r\n        DsIconButtonComponent,\r\n        DsIconComponent,\r\n        DsAvatarComponent,\r\n        DsDataTableComponent,\r\n        DsBadgeComponent,\r\n        DsDataItemComponent,\r\n        DsMetadataItemComponent,\r\n      ],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    layout: 'padded',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    orientation: {\r\n      control: 'select',\r\n      options: ['vertical', 'horizontal'],\r\n      description: 'Layout orientation of tile sections',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "MultipleActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Document Manager</header-title>\r\n            <header-actions>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixFilterLine\">Filter</ds-button>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">New</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">Manage your documents with multiple action options.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "MultipleSectionsHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"horizontal\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Overview</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\r\n            <ds-data-item \r\n              label=\"Total Revenue\" \r\n              value=\"$45,231\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-lg'\" />\r\n            <ds-data-item \r\n              label=\"Growth\" \r\n              value=\"+20.1%\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-md tw-text-success-strong'\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Activity</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\r\n            <ds-data-item \r\n              label=\"New Users\" \r\n              value=\"1,234\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-lg'\" />\r\n            <ds-data-item \r\n              label=\"Conversion\" \r\n              value=\"3.2%\" \r\n              layout=\"vertical\"\r\n              [labelClassName]=\"'ui-xs-regular'\"\r\n              [valueClassName]=\"'heading-md'\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "MultipleSectionsVertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Personal Information</header-title>\r\n            <header-actions>\r\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Name\" value=\"Jane Smith\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Email\" value=\"jane.smith@example.com\" layout=\"horizontal\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Account Settings</header-title>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Plan\" value=\"Professional\" layout=\"horizontal\" />\r\n            <ds-data-item \r\n              label=\"Status\" \r\n              value=\"Active\" \r\n              valueType=\"badge\"\r\n              layout=\"horizontal\"\r\n              badgeVariant=\"success\"\r\n              badgeContent=\"Active\" />\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Preferences</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\" variant=\"ghost\">Reset</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">Configure your application preferences here.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "ResponsiveLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\r\n        <p style=\"margin: 0; font-size: 14px; color: var(--text-color-default-secondary);\">\r\n          Resize your browser to see the responsive behavior. Horizontal tiles stack vertically on mobile, \r\n          and section headers stack their title and actions.\r\n        </p>\r\n        \r\n        <ds-tile orientation=\"horizontal\">\r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>Left Section</header-title>\r\n              <header-actions>\r\n                <ds-button size=\"sm\" variant=\"ghost\">Action</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <p style=\"margin: 0;\">This section is on the left on desktop and stacks on top on mobile.</p>\r\n          </ds-tile-section>\r\n          \r\n          <ds-tile-section>\r\n            <tile-header>\r\n              <header-title>Right Section</header-title>\r\n              <header-actions>\r\n                <ds-button size=\"sm\">Action</ds-button>\r\n              </header-actions>\r\n            </tile-header>\r\n            <p style=\"margin: 0;\">This section is on the right on desktop and stacks below on mobile.</p>\r\n          </ds-tile-section>\r\n        </ds-tile>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "sampleInvoiceLines",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InvoiceLine[]",
                    "defaultValue": "[\r\n  { id: 1, description: 'Professional Services - Consulting', quantity: 10, unitPrice: 150.00, total: 1500.00 },\r\n  { id: 2, description: 'Software License - Annual', quantity: 5, unitPrice: 299.99, total: 1499.95 },\r\n  { id: 3, description: 'Cloud Hosting - Monthly', quantity: 12, unitPrice: 49.99, total: 599.88 },\r\n  { id: 4, description: 'Support & Maintenance', quantity: 1, unitPrice: 999.00, total: 999.00 },\r\n]"
                },
                {
                    "name": "SectionWithoutHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <p style=\"margin: 0;\">This section has no header, just content with default padding.</p>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Section with Header</header-title>\r\n          </tile-header>\r\n          <p style=\"margin: 0;\">This section has a header for comparison.</p>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "SectionWithoutPadding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>With Padding (Default)</header-title>\r\n          </tile-header>\r\n          <div style=\"background: #f0f0f0; padding: 8px; border-radius: 4px;\">\r\n            This content has the default 20px padding around it.\r\n          </div>\r\n        </ds-tile-section>\r\n        \r\n        <ds-tile-section [padding]=\"false\">\r\n          <div style=\"background: #f0f0f0; padding: 20px;\">\r\n            This content has no section padding. The gray box extends to the edges.\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithDataTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    orientation: 'vertical',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n      invoiceLines: sampleInvoiceLines,\r\n      invoiceColumns: invoiceColumns,\r\n    },\r\n    template: `\r\n      <ds-tile [orientation]=\"orientation\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>Invoice Lines</header-title>\r\n            <header-actions>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">Add line</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n        </ds-tile-section>\r\n        <ds-tile-section [padding]=\"false\">\r\n          <ds-data-table \r\n            [data]=\"invoiceLines\" \r\n            [columns]=\"invoiceColumns\"\r\n            [searchable]=\"false\"\r\n            [showColumnVisibility]=\"false\"\r\n            [paginated]=\"false\">\r\n          </ds-data-table>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithTitleAndAvatar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>\r\n              <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\" />\r\n              User Profile\r\n            </header-title>\r\n            <header-actions>\r\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\r\n            <ds-data-item label=\"Name\" value=\"John Doe\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Email\" value=\"john.doe@example.com\" layout=\"horizontal\" />\r\n            <ds-data-item label=\"Role\" value=\"Administrator\" layout=\"horizontal\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithTitleAndIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-tile orientation=\"vertical\">\r\n        <ds-tile-section>\r\n          <tile-header>\r\n            <header-title>\r\n              <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\r\n              Invoice Details\r\n            </header-title>\r\n            <header-actions>\r\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\r\n              <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\r\n            </header-actions>\r\n          </tile-header>\r\n          <div style=\"display: flex; gap: 12px;\">\r\n            <ds-metadata-item icon=\"remixFileTextLine\" value=\"Invoice #12345\" />\r\n            <ds-metadata-item icon=\"remixCalendarLine\" value=\"Due Date: 2024-03-15\" />\r\n          </div>\r\n        </ds-tile-section>\r\n      </ds-tile>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/button/ds-icon-button.stories.ts": [
                {
                    "name": "CustomContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    ariaLabel: 'Star item'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-icon-button [variant]=\"variant\" [size]=\"size\" [ariaLabel]=\"ariaLabel\">\r\n        <ds-icon name=\"remixStarFill\" />\r\n      </ds-icon-button>\r\n    `,\r\n    moduleMetadata: {\r\n      imports: [DsIconComponent]\r\n    }\r\n  })\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    icon: 'remixDeleteBinLine',\r\n    variant: 'destructive',\r\n    size: 'md',\r\n    disabled: true,\r\n    ariaLabel: 'Delete item',\r\n    tooltip: 'Cannot delete this item'\r\n  }\r\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    icon: 'remixRefreshLine',\r\n    variant: 'secondary',\r\n    size: 'md',\r\n    loading: true,\r\n    ariaLabel: 'Refreshing'\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsIconButtonComponent>",
                    "defaultValue": "{\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [provideAllRemixIcons()]\r\n    })\r\n  ],\r\n  parameters: {\r\n    layout: 'centered'\r\n  },\r\n  title: 'Primitives/IconButton',\r\n  component: DsIconButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\r\n      description: 'Visual style variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'ghost' }\r\n      }\r\n    },\r\n    size: {\r\n      control: 'select',\r\n      options: ['sm', 'md', 'lg'],\r\n      description: 'Size variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'md' }\r\n      }\r\n    },\r\n    icon: {\r\n      control: 'text',\r\n      description: 'Icon name to display (only used when no custom content is projected)',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the button is disabled',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    loading: {\r\n      control: 'boolean',\r\n      description: 'Whether the button is in a loading state',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    pressed: {\r\n      control: 'boolean',\r\n      description: 'Whether the button is in a pressed state (for toggle buttons)',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    expanded: {\r\n      control: 'boolean',\r\n      description: 'Whether the button controls an expanded element',\r\n      table: {\r\n        defaultValue: { summary: 'false' }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      control: 'text',\r\n      description: 'Accessible label for the button (required for icon buttons)',\r\n    },\r\n    tooltip: {\r\n      control: 'text',\r\n      description: 'Tooltip text to display on hover',\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "SimpleIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    icon: 'remixEditLine',\r\n    variant: 'ghost',\r\n    size: 'md',\r\n    ariaLabel: 'Edit item',\r\n    tooltip: 'Edit this item'\r\n  }\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n        <ds-icon-button\r\n          icon=\"remixSettingsLine\"\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          ariaLabel=\"Small settings button\"\r\n          tooltip=\"Settings (small)\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixSettingsLine\"\r\n          variant=\"ghost\"\r\n          size=\"md\"\r\n          ariaLabel=\"Medium settings button\"\r\n          tooltip=\"Settings (medium)\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixSettingsLine\"\r\n          variant=\"ghost\"\r\n          size=\"lg\"\r\n          ariaLabel=\"Large settings button\"\r\n          tooltip=\"Settings (large)\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"primary\"\r\n          ariaLabel=\"Primary variant\"\r\n          tooltip=\"Primary action\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"secondary\"\r\n          ariaLabel=\"Secondary variant\"\r\n          tooltip=\"Secondary action\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"ghost\"\r\n          ariaLabel=\"Ghost variant\"\r\n          tooltip=\"Ghost action\"\r\n        />\r\n        <ds-icon-button\r\n          icon=\"remixHeartLine\"\r\n          variant=\"destructive\"\r\n          ariaLabel=\"Destructive variant\"\r\n          tooltip=\"Destructive action\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "src/app/components/ui/combobox/ds-combobox.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Select an option'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { disabled: true },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Disabled'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsComboboxComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Combobox',\r\n  component: DsComboboxComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 300,\r\n      }\r\n    }\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsButtonComponent, DsIconButtonComponent, DsSelectComponent],\r\n    }),\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 300px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    placeholder: { control: 'text' },\r\n    disabled: { control: 'boolean' },\r\n    width: { control: 'text' },\r\n    options: { control: { type: 'object' } },\r\n  },\r\n  args: {\r\n    placeholder: 'Search...',\r\n    disabled: false,\r\n    width: 'auto',\r\n    options: [\r\n      'Marty McFly',\r\n      'Doc Brown',\r\n      'Biff Tannen',\r\n      'George McFly',\r\n      'Jennifer Parker',\r\n      'Emmett Brown',\r\n      'Einstein',\r\n      'Clara Clayton',\r\n      'Needles',\r\n      'Goldie Wilson',\r\n      'Marvin Berry',\r\n      'Lorraine Baines',\r\n      'Strickland',\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "WithFewOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    options: ['Option 1', 'Option 2', 'Option 3'],\r\n    placeholder: 'Search options...'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Select option'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithFilterIconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-icon-button icon=\"remixFilter3Line\" variant=\"secondary\" ariaLabel=\"Filter options\" />\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithGhostButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"ghost\">Filter</ds-button>\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithIconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-icon-button icon=\"remixSettings3Line\" variant=\"ghost\" ariaLabel=\"Open menu\" />\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithManyOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    placeholder: 'Search users...',\r\n    options: [\r\n      'Alice Anderson',\r\n      'Bob Brown',\r\n      'Charlie Chen',\r\n      'David Davis',\r\n      'Eve Edwards',\r\n      'Frank Foster',\r\n      'Grace Green',\r\n      'Henry Hill',\r\n      'Ivy Irving',\r\n      'Jack Johnson',\r\n      'Karen King',\r\n      'Larry Lee',\r\n      'Mary Martin',\r\n      'Nancy Nelson',\r\n      'Oliver Owen'\r\n    ]\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox \r\n        [options]=\"options\" \r\n        [placeholder]=\"placeholder\" \r\n        [selectPlaceholder]=\"'Select user'\"\r\n        [disabled]=\"disabled\" \r\n        [width]=\"width\"\r\n      />\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithPrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"primary\">Choose option</ds-button>\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithSecondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-combobox [options]=\"options\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [width]=\"width\">\r\n        <ds-button variant=\"secondary\">Select an option</ds-button>\r\n      </ds-combobox>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/datepicker/ds-datepicker.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    template: `\r\n      <ds-datepicker [variant]=\"variant\" [disabled]=\"disabled\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n    props: args,\r\n  }),\r\n  args: {\r\n    variant: 'default',\r\n    disabled: false,\r\n  },\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker [disabled]=\"true\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "ErrorVariant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker variant=\"error\">\r\n        <ds-button variant=\"destructive\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\r\n    }),\r\n  ],\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-interactive',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\r\n      template: `\r\n        <div class=\"tw-space-y-4\">\r\n          <ds-datepicker \r\n            [variant]=\"variant()\" \r\n            [disabled]=\"disabled()\"\r\n            (dateChange)=\"onDateChange($event)\">\r\n            <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n              {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'Select Date' }}\r\n            </ds-button>\r\n          </ds-datepicker>\r\n          \r\n          <div class=\"tw-flex tw-gap-2\">\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('default')\">\r\n              Default\r\n            </button>\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('error')\">\r\n              Error\r\n            </button>\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('warning')\">\r\n              Warning\r\n            </button>\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"variant.set('success')\">\r\n              Success\r\n            </button>\r\n          </div>\r\n          \r\n          <div class=\"tw-flex tw-gap-2\">\r\n            <button \r\n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\r\n              (click)=\"disabled.set(!disabled())\">\r\n              Toggle Disabled ({{ disabled() ? 'Currently Disabled' : 'Currently Enabled' }})\r\n            </button>\r\n          </div>\r\n          \r\n          <p class=\"body-sm-regular\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\r\n        </div>\r\n      `,\r\n    })\r\n    class DatepickerInteractive {\r\n      variant = signal<'default' | 'error' | 'warning' | 'success'>('default');\r\n      disabled = signal(false);\r\n      selectedDate = signal<Date | null>(null);\r\n      \r\n      onDateChange(date: Date | null) {\r\n        this.selectedDate.set(date);\r\n      }\r\n    }\r\n\r\n    return {\r\n      component: DatepickerInteractive,\r\n      props: {},\r\n    };\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsDatepickerComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Datepicker',\r\n  component: DsDatepickerComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideIcons({\r\n          remixArrowLeftSLine,\r\n          remixArrowRightSLine,\r\n          remixCloseLine,\r\n          remixCalendarLine,\r\n        }),\r\n      ],\r\n    }),\r\n    moduleMetadata({\r\n      imports: [\r\n        DsDatepickerComponent, \r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        DsFormFieldComponent, \r\n        DsButtonComponent,\r\n        DsInputComponent,\r\n      ],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'error', 'warning', 'success'],\r\n      description: 'Visual variant of the datepicker calendar',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Whether the datepicker is disabled',\r\n    },\r\n    disableFutureDates: {\r\n      control: 'boolean',\r\n      description: 'When true, disables all dates after today',\r\n    },\r\n    isDateDisabled: {\r\n      control: false,\r\n      description: 'Advanced: Custom function to determine if a specific date should be disabled. Return true to disable the date.',\r\n      table: {\r\n        type: { summary: '(date: Date) => boolean' },\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "PastAndCurrentDatesOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker [disableFutureDates]=\"true\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Past Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n      <p class=\"body-sm-regular tw-mt-2 tw-text-gray-600\">Future dates are disabled</p>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "SuccessVariant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker variant=\"success\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WarningVariant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-datepicker variant=\"warning\">\r\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\r\n          Select Date\r\n        </ds-button>\r\n      </ds-datepicker>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithFormField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n    }),\r\n  ],\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-with-form-field',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n      template: `\r\n        <ds-form-field \r\n          label=\"Birth Date\" \r\n          description=\"Select your date of birth\">\r\n          <ds-datepicker [formControl]=\"dateControl\" [disableFutureDates]=\"true\">\r\n            <ds-input \r\n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \r\n              placeholder=\"Select your birth date\"\r\n              [readonly]=\"true\"\r\n              [required]=\"true\"\r\n              iconRight=\"remixCalendarLine\" />\r\n          </ds-datepicker>\r\n          @if (dateControl.invalid && dateControl.touched) {\r\n            <p slot=\"error\" class=\"ds-form-field__error\">Please select a valid date</p>\r\n          }\r\n        </ds-form-field>\r\n      `,\r\n    })\r\n    class DatepickerWithFormField {\r\n      dateControl = new FormControl<Date | null>(null);\r\n    }\r\n\r\n    return {\r\n      component: DatepickerWithFormField,\r\n      props: {},\r\n    };\r\n  },\r\n}"
                },
                {
                    "name": "WithInputTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-with-input',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsInputComponent, FormsModule],\r\n      template: `\r\n        <ds-datepicker (dateChange)=\"onDateChange($event)\">\r\n            <ds-input \r\n              [ngModel]=\"selectedDate() ? selectedDate()!.toLocaleDateString() : ''\" \r\n              placeholder=\"Select date\"\r\n              [readonly]=\"true\"\r\n              iconRight=\"remixCalendarLine\" />\r\n        </ds-datepicker>\r\n        <p class=\"body-sm-regular tw-mt-4\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\r\n      `,\r\n    })\r\n    class DatepickerWithInput {\r\n      selectedDate = signal<Date | null>(null);\r\n      \r\n      onDateChange(date: Date | null) {\r\n        this.selectedDate.set(date);\r\n      }\r\n    }\r\n\r\n    return {\r\n      component: DatepickerWithInput,\r\n      props: {},\r\n    };\r\n  },\r\n}"
                },
                {
                    "name": "WithReactiveForms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n    }),\r\n  ],\r\n  render: () => {\r\n    @Component({\r\n      selector: 'datepicker-form-example',\r\n      standalone: true,\r\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\r\n      template: `\r\n        <form>\r\n          <ds-datepicker [formControl]=\"dateControl\">\r\n            <ds-input \r\n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \r\n              placeholder=\"Select date\"\r\n              [readonly]=\"true\"\r\n              iconRight=\"remixCalendarLine\" />\r\n          </ds-datepicker>\r\n          <p class=\"body-sm-regular tw-mt-4\">\r\n            Form Value: {{ dateControl.value ? dateControl.value.toLocaleDateString() : 'None' }}\r\n          </p>\r\n          <p class=\"body-sm-regular\">Valid: {{ dateControl.valid }}</p>\r\n        </form>\r\n      `,\r\n    })\r\n    class DatepickerFormExample {\r\n      dateControl = new FormControl(new Date());\r\n    }\r\n\r\n    return {\r\n      component: DatepickerFormExample,\r\n      props: {},\r\n    };\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/header-details/ds-header-details.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Basic header details example with a primary action and more actions menu. This demonstrates the typical layout for an entity detail page.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Woods Augusthus',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Follow',\r\n    primaryActionIcon: 'remixUserFollowLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: false,\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"User name\"\r\n            value=\"Woods Augusthus\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"WA\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Company name\"\r\n            value=\"Propbinder Inc.\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"PI\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "LeaseDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Lease management example demonstrating how to display lease agreement details with actions for renewal and report generation.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Lease Agreement #LA-2024-001',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Renew Lease',\r\n    primaryActionIcon: 'remixRefreshLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'Generate Report',\r\n    secondaryActionIcon: 'remixFileTextLine',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Tenant\"\r\n            value=\"Michael Chen\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"MC\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Property\"\r\n            value=\"Sunset Blvd Apt 4B\"\r\n            layout=\"vertical\"\r\n            valueType=\"icon-text\"\r\n            iconName=\"remixBuildingLine\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Rent Amount\"\r\n            value=\"$2,400/month\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Lease Term\"\r\n            value=\"12 months\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsHeaderDetailsComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Header Details',\r\n  component: DsHeaderDetailsComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDataItemComponent]\r\n    })\r\n  ],\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        height: 'auto'\r\n      },\r\n      description: {\r\n        component: `\r\n# Header Details Component\r\n\r\nA specialized header component designed for entity detail pages such as Properties, Leases, Inquiries, Assets, and other business entities. It provides a consistent layout with a title row, configurable actions, and flexible content slots for metadata display.\r\n\r\n## Design Principles\r\n\r\n- **Consistent Spacing**: 24px top padding and gaps for visual hierarchy\r\n- **Content-First**: Responsive width (10/12 columns of parent) ensures optimal reading experience  \r\n- **Action-Oriented**: Prominent placement of primary and secondary actions\r\n- **Flexible Content**: Slot-based architecture for customizable metadata layouts\r\n- **Responsive**: Adapts gracefully from desktop to mobile viewports\r\n\r\n## Anatomy\r\n\r\n\\`\\`\\`\r\n┌─────────────────────────────────────────────────────────────┐\r\n│  24px padding-top                                           │\r\n│  ┌───────────────────────────────────────────────────────┐  │\r\n│  │ Title Row                                             │  │\r\n│  │ ┌─────────────────┐           ┌─────────────────────┐ │  │\r\n│  │ │ Entity Title    │           │ Action Buttons      │ │  │\r\n│  │ │ (H1, 2xl-medium)│           │ [Primary][Secondary]│ │  │\r\n│  │ └─────────────────┘           └─────────────────────┘ │  │\r\n│  └───────────────────────────────────────────────────────┘  │\r\n│  24px gap                                                   │\r\n│  ┌───────────────────────────────────────────────────────┐  │\r\n│  │ Details Row (Content Projection)                     │  │\r\n│  │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐     │  │\r\n│  │ │ Data Item 1 │ │ Data Item 2 │ │ Data Item 3 │ ... │  │\r\n│  │ └─────────────┘ └─────────────┘ └─────────────┘     │  │\r\n│  └───────────────────────────────────────────────────────┘  │\r\n│  Width: 83.33% (10/12 columns of parent), centered        │\r\n└─────────────────────────────────────────────────────────────┘\r\n\\`\\`\\`\r\n\r\n## Usage\r\n\r\nPerfect for entity detail pages where you need to display:\r\n- Entity title (e.g., property name, lease reference)\r\n- Action buttons (edit, delete, follow, etc.)\r\n- Metadata items using ds-data-item components\r\n\r\nThe details row uses content projection with \\`slot=\"details\"\\` to allow flexible arrangement of data items.\r\n\r\n## Content Projection\r\n\r\n\\`\\`\\`html\r\n<ds-header-details title=\"Entity Name\">\r\n  <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 24px;\">\r\n    <ds-data-item label=\"Field 1\" value=\"Value 1\" layout=\"horizontal\" />\r\n    <ds-data-item label=\"Field 2\" value=\"Value 2\" layout=\"horizontal\" />\r\n  </div>\r\n</ds-header-details>\r\n\\`\\`\\`\r\n\r\n## Best Practices\r\n\r\n### Do ✅\r\n- Use descriptive, entity-specific titles\r\n- Limit to 2-3 primary actions to avoid overwhelming users\r\n- Use horizontal layout for data items in the details row\r\n- Provide meaningful action labels and icons\r\n\r\n### Don't ❌\r\n- Don't use generic titles like \"Details\" or \"Entity\"\r\n- Don't overcrowd the actions area with too many buttons\r\n- Don't mix vertical and horizontal data item layouts\r\n- Don't forget to handle action click events\r\n\r\n## Responsive Behavior\r\n\r\n- **Desktop (>768px)**: Full horizontal layout with side-by-side title and actions\r\n- **Tablet (≤768px)**: Title and actions stack vertically with reduced spacing  \r\n- **Mobile (≤480px)**: Compact spacing and optimized touch targets\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    title: {\r\n      control: 'text',\r\n      description: 'The main title displayed in the header'\r\n    },\r\n    showPrimaryAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the primary action button'\r\n    },\r\n    primaryActionText: {\r\n      control: 'text',\r\n      description: 'Text for the primary action button'\r\n    },\r\n    primaryActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon for the primary action button'\r\n    },\r\n    primaryActionVariant: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\r\n      description: 'Visual variant for the primary action button'\r\n    },\r\n    showSecondaryAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the secondary action button'\r\n    },\r\n    secondaryActionText: {\r\n      control: 'text',\r\n      description: 'Text for the secondary action button'\r\n    },\r\n    secondaryActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon for the secondary action button'\r\n    },\r\n    secondaryActionVariant: {\r\n      control: 'select',\r\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\r\n      description: 'Visual variant for the secondary action button'\r\n    },\r\n    showMoreActions: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the more actions (three dots) button'\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "MinimalNoActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Minimal header example with no action buttons, useful for read-only entity displays or when actions are handled elsewhere on the page.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Simple Entity Details',\r\n    showPrimaryAction: false,\r\n    showSecondaryAction: false,\r\n    showMoreActions: false\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Created\"\r\n            value=\"March 15, 2024\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Last Modified\"\r\n            value=\"Yesterday\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "MobileView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    title: 'Mobile Responsive Header',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Edit',\r\n    primaryActionIcon: 'remixEditLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'Share',\r\n    secondaryActionIcon: 'remixShareLine',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  parameters: {\r\n    viewport: {\r\n      defaultViewport: 'mobile1'\r\n    },\r\n    docs: {\r\n      description: {\r\n        story: 'Mobile responsive behavior showing how the header adapts to smaller screens with stacked layout and compact spacing. Data items switch to vertical layout for better mobile experience.'\r\n      }\r\n    }\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Owner\"\r\n            value=\"John Doe\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"JD\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "Overview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'The Header Details component provides a consistent layout for entity detail pages with configurable actions and flexible metadata display.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Entity Detail Example',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Edit',\r\n    primaryActionIcon: 'remixEditLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'Share',\r\n    secondaryActionIcon: 'remixShareLine',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n        (primaryActionClick)=\"onPrimaryAction($event)\"\r\n        (secondaryActionClick)=\"onSecondaryAction($event)\"\r\n        (moreActionsClick)=\"onMoreActions($event)\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Owner\"\r\n            value=\"Sarah Johnson\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"SJ\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Created\"\r\n            value=\"March 15, 2024\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Category\"\r\n            value=\"Important\"\r\n            layout=\"vertical\"\r\n            valueType=\"icon-text\"\r\n            iconName=\"remixStarFill\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `,\r\n    methods: {\r\n      onPrimaryAction: (event: MouseEvent) => {\r\n        console.log('Primary action clicked:', event);\r\n      },\r\n      onSecondaryAction: (event: MouseEvent) => {\r\n        console.log('Secondary action clicked:', event);\r\n      },\r\n      onMoreActions: (event: MouseEvent) => {\r\n        console.log('More actions clicked:', event);\r\n      }\r\n    }\r\n  })\r\n}"
                },
                {
                    "name": "PropertyDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: 'Real estate property management example showing how to display property information with relevant actions like editing and viewing related leases.'\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    title: 'Sunset Boulevard Apartments',\r\n    showPrimaryAction: true,\r\n    primaryActionText: 'Edit Property',\r\n    primaryActionIcon: 'remixEditLine',\r\n    primaryActionVariant: 'primary',\r\n    showSecondaryAction: true,\r\n    secondaryActionText: 'View Leases',\r\n    secondaryActionIcon: 'remixFileList3Line',\r\n    secondaryActionVariant: 'secondary',\r\n    showMoreActions: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-header-details\r\n        [title]=\"title\"\r\n        [showPrimaryAction]=\"showPrimaryAction\"\r\n        [primaryActionText]=\"primaryActionText\"\r\n        [primaryActionIcon]=\"primaryActionIcon\"\r\n        [primaryActionVariant]=\"primaryActionVariant\"\r\n        [showSecondaryAction]=\"showSecondaryAction\"\r\n        [secondaryActionText]=\"secondaryActionText\"\r\n        [secondaryActionIcon]=\"secondaryActionIcon\"\r\n        [secondaryActionVariant]=\"secondaryActionVariant\"\r\n        [showMoreActions]=\"showMoreActions\"\r\n      >\r\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\r\n          <ds-data-item\r\n            label=\"Property Type\"\r\n            value=\"Residential\"\r\n            layout=\"vertical\"\r\n            valueType=\"icon-text\"\r\n            iconName=\"remixHome4Line\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Status\"\r\n            value=\"Active\"\r\n            layout=\"vertical\"\r\n            valueType=\"badge\"\r\n            badgeVariant=\"success\"\r\n            badgeContent=\"Active\"\r\n            badgeContentType=\"text\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Owner\"\r\n            value=\"Sarah Johnson\"\r\n            layout=\"vertical\"\r\n            valueType=\"avatar-text\"\r\n            avatarType=\"initials\"\r\n            avatarInitials=\"SJ\"\r\n          />\r\n          <ds-data-item\r\n            label=\"Units\"\r\n            value=\"24 units\"\r\n            layout=\"vertical\"\r\n            valueType=\"text\"\r\n          />\r\n        </div>\r\n      </ds-header-details>\r\n    `\r\n  })\r\n}"
                }
            ],
            "src/app/components/ui/form-field/ds-form-field.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"width: 360px;\">\r\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\r\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\r\n        </ds-form-field>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsFormFieldComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Form Field',\r\n  component: DsFormFieldComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsFormFieldComponent, DsInputComponent, NgpError],\r\n    }),\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: { layout: 'centered' },\r\n  argTypes: {\r\n    label: { control: 'text' },\r\n    description: { control: 'text' },\r\n    labelId: { control: 'text' },\r\n    descriptionId: { control: 'text' },\r\n  },\r\n  args: {\r\n    label: 'Email',\r\n    description: 'We will never share your email.',\r\n    labelId: 'email-label',\r\n    descriptionId: 'email-desc',\r\n  },\r\n}"
                },
                {
                    "name": "WithError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"width: 360px;\">\r\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\r\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\r\n          <p ngpError ngpErrorValidator=\"required\">Email is required.</p>\r\n        </ds-form-field>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                }
            ],
            "src/app/components/ui/label/ds-label.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    className: '',\r\n    size: 'md',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args\r\n    },\r\n    styles: [`\r\n      :host {\r\n        display: block;\r\n        padding: 1rem;\r\n        background: white;\r\n      }\r\n    `],\r\n    template: `\r\n      <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\r\n        Label Text\r\n      </ds-label>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsLabelComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Label',\r\n  component: DsLabelComponent,\r\n  tags: ['autodocs'],\r\n  parameters: { layout: 'centered' },\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsInputComponent],\r\n    })\r\n  ],\r\n  argTypes: {\r\n    className: {\r\n      control: 'text',\r\n      description: 'Additional CSS classes to apply to the label',\r\n    },\r\n    for: {\r\n      control: 'text',\r\n      description: 'The ID of the form control this label is associated with',\r\n    },\r\n    id: {\r\n      control: 'text',\r\n      description: 'The ID of the label element',\r\n    },\r\n    size: {\r\n      control: 'radio',\r\n      options: ['sm', 'md'],\r\n      description: 'The size of the label text (sm = ui-xs-regular, md = ui-sm-regular)',\r\n      defaultValue: 'md',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    className: '',\r\n  },\r\n  render: () => ({\r\n    styles: [`\r\n      :host {\r\n        display: block;\r\n        padding: 1rem;\r\n        background: white;\r\n      }\r\n      .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 1rem;\r\n      }\r\n    `],\r\n    template: `\r\n      <div class=\"container\">\r\n        <ds-label size=\"sm\">\r\n          Small Label (ui-xs-regular)\r\n        </ds-label>\r\n        <ds-label size=\"md\">\r\n          Medium Label (ui-sm-regular)\r\n        </ds-label>\r\n      </div>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "WithInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    className: '',\r\n    for: 'example-input',\r\n    size: 'md',\r\n  },\r\n  render: (args) => ({\r\n    props: {\r\n      ...args\r\n    },\r\n    styles: [`\r\n      :host {\r\n        display: block;\r\n        padding: 1rem;\r\n        background: white;\r\n      }\r\n      .container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 0.5rem;\r\n      }\r\n    `],\r\n    template: `\r\n      <div class=\"container\">\r\n        <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\r\n          Input Label\r\n        </ds-label>\r\n        <ds-input id=\"example-input\" placeholder=\"Enter text...\"></ds-input>\r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "src/app/components/ui/link/ds-link.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'This is a link',\r\n    href: '#',\r\n    showIcon: false,\r\n  },\r\n}"
                },
                {
                    "name": "InteractiveExamples",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\r\n        <ds-link href=\"#\" content=\"Simple link\"></ds-link>\r\n        <ds-link href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\" [showIcon]=\"true\" iconName=\"remixExternalLinkLine\" content=\"External link\"></ds-link>\r\n        <ds-link href=\"mailto:test@example.com\" [showIcon]=\"true\" iconName=\"remixMailLine\" content=\"Email link\"></ds-link>\r\n        <ds-link href=\"#\" [showIcon]=\"true\" iconName=\"remixDownloadLine\" content=\"Download link\"></ds-link>\r\n        <ds-link href=\"#\">Link with <strong>formatted</strong> content</ds-link>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsLinkComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Link',\r\n  component: DsLinkComponent,\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    href: {\r\n      control: 'text',\r\n    },\r\n    target: {\r\n      control: 'select',\r\n      options: ['_self', '_blank', '_parent', '_top'],\r\n    },\r\n    rel: {\r\n      control: 'text',\r\n    },\r\n    content: {\r\n      control: 'text',\r\n    },\r\n    showIcon: {\r\n      control: 'boolean',\r\n    },\r\n    iconName: {\r\n      control: 'text',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "SlotContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    href: '#',\r\n    showIcon: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\">\r\n        Link with <strong>formatted</strong> content\r\n      </ds-link>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "SlotContentWithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    href: 'mailto:contact@example.com',\r\n    showIcon: true,\r\n    iconName: 'remixMailLine',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\" [iconName]=\"iconName\">\r\n        Send us an <em>email</em>\r\n      </ds-link>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithCustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'Download file',\r\n    href: '#',\r\n    showIcon: true,\r\n    iconName: 'remixDownloadLine',\r\n  },\r\n}"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    content: 'External link',\r\n    href: 'https://example.com',\r\n    target: '_blank',\r\n    rel: 'noopener noreferrer',\r\n    showIcon: true,\r\n    iconName: 'remixExternalLinkLine',\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/select/ds-select.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'default',\r\n    disabled: false,\r\n    required: false,\r\n    ghost: false,\r\n  },\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    disabled: true,\r\n  },\r\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'error',\r\n  },\r\n}"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Ghost select',\r\n    ghost: true,\r\n  },\r\n}"
                },
                {
                    "name": "GhostWithGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: groupedOptions,\r\n    placeholder: 'Ghost select with groups',\r\n    ghost: true,\r\n  },\r\n}"
                },
                {
                    "name": "groupedOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsSelectOption[]",
                    "defaultValue": "[\r\n  { id: '1', label: 'Apple', value: 'apple', group: 'Fruits' },\r\n  { id: '2', label: 'Banana', value: 'banana', group: 'Fruits' },\r\n  { id: '3', label: 'Orange', value: 'orange', group: 'Fruits' },\r\n  { id: '4', label: 'Carrot', value: 'carrot', group: 'Vegetables' },\r\n  { id: '5', label: 'Broccoli', value: 'broccoli', group: 'Vegetables' },\r\n  { id: '6', label: 'Potato', value: 'potato', group: 'Vegetables' },\r\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsSelectComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Select',\r\n  component: DsSelectComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormsModule],\r\n    }),\r\n    componentWrapperDecorator(\r\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\r\n    )\r\n  ],\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    docs: {\r\n      story: {\r\n        inline: true,\r\n        iframeHeight: 100,\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['default', 'error', 'warning', 'success'],\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    required: {\r\n      control: 'boolean',\r\n    },\r\n    ghost: {\r\n      control: 'boolean',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "simpleOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsSelectOption[]",
                    "defaultValue": "[\r\n  { id: '1', label: 'Option 1', value: 1 },\r\n  { id: '2', label: 'Option 2', value: 2 },\r\n  { id: '3', label: 'Option 3', value: 3 },\r\n  { id: '4', label: 'Option 4', value: 4 },\r\n]"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'success',\r\n  },\r\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: simpleOptions,\r\n    placeholder: 'Select an option',\r\n    variant: 'warning',\r\n  },\r\n}"
                },
                {
                    "name": "WithDisabledOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: [\r\n      { id: '1', label: 'Option 1', value: 1 },\r\n      { id: '2', label: 'Option 2', value: 2, disabled: true },\r\n      { id: '3', label: 'Option 3', value: 3 },\r\n      { id: '4', label: 'Option 4', value: 4, disabled: true },\r\n    ],\r\n    placeholder: 'Select an option',\r\n  },\r\n}"
                },
                {
                    "name": "WithGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    options: groupedOptions,\r\n    placeholder: 'Select food',\r\n    variant: 'default',\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/textarea/ds-textarea.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "LargeTextarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    placeholder: 'This is a large textarea for longer content...',\r\n    rows: 8,\r\n    size: 'lg',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTextareaComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Textarea',\r\n  component: DsTextareaComponent,\r\n  parameters: { layout: 'centered' },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\r\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\r\n    placeholder: { control: 'text' },\r\n    disabled: { control: 'boolean' },\r\n    readonly: { control: 'boolean' },\r\n    required: { control: 'boolean' },\r\n    rows: { control: { type: 'number', min: 1, max: 20 } },\r\n    cols: { control: { type: 'number', min: 10, max: 100 } },\r\n    maxlength: { control: { type: 'number', min: 1, max: 1000 } },\r\n    minlength: { control: { type: 'number', min: 0, max: 100 } },\r\n    ariaLabel: { control: 'text' },\r\n    ariaDescribedBy: { control: 'text' },\r\n    ariaLabelledBy: { control: 'text' },\r\n  },\r\n  args: {\r\n    variant: 'default',\r\n    size: 'md',\r\n    placeholder: 'Enter your message...',\r\n    disabled: false,\r\n    readonly: false,\r\n    required: false,\r\n    rows: 4,\r\n  },\r\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\r\n        <ds-textarea size=\"sm\" placeholder=\"Small textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea size=\"md\" placeholder=\"Medium textarea\" rows=\"4\"></ds-textarea>\r\n        <ds-textarea size=\"lg\" placeholder=\"Large textarea\" rows=\"5\"></ds-textarea>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\r\n        <ds-textarea placeholder=\"Normal textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea placeholder=\"Disabled textarea\" [disabled]=\"true\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea placeholder=\"Readonly textarea\" [readonly]=\"true\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea placeholder=\"Required textarea\" [required]=\"true\" rows=\"3\"></ds-textarea>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\r\n        <ds-textarea variant=\"default\" placeholder=\"Default textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea variant=\"success\" placeholder=\"Success textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea variant=\"warning\" placeholder=\"Warning textarea\" rows=\"3\"></ds-textarea>\r\n        <ds-textarea variant=\"error\" placeholder=\"Error textarea\" rows=\"3\"></ds-textarea>\r\n      </div>\r\n    `,\r\n  }),\r\n}"
                },
                {
                    "name": "WithFormField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <ds-form-field \r\n        label=\"Message\" \r\n        description=\"Please provide detailed feedback\"\r\n        style=\"width: 400px;\">\r\n        <ds-textarea \r\n          placeholder=\"Enter your feedback here...\" \r\n          rows=\"5\"\r\n          [required]=\"true\">\r\n        </ds-textarea>\r\n      </ds-form-field>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    docs: {\r\n      source: {\r\n        code: `<ds-form-field \r\n  label=\"Message\" \r\n  description=\"Please provide detailed feedback\">\r\n  <ds-textarea \r\n    placeholder=\"Enter your feedback here...\" \r\n    rows=\"5\"\r\n    [required]=\"true\">\r\n  </ds-textarea>\r\n</ds-form-field>`,\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "WithLimits",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    placeholder: 'This textarea has a 100 character limit...',\r\n    maxlength: 100,\r\n    minlength: 10,\r\n    rows: 4,\r\n  },\r\n}"
                },
                {
                    "name": "WithPlaceholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: { \r\n    placeholder: 'Write your thoughts here...',\r\n    rows: 6 \r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/topbar/ds-topbar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "LongTitleWithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'This is a Very Long Page Title That Should Be Truncated',\r\n    iconName: 'remixFileTextLine',\r\n    userInitials: 'LT',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Documents', path: '/documents', isLast: false },\r\n      { label: 'Reports', path: '/documents/reports', isLast: false },\r\n      { label: 'This is a Very Long Page Title That Should Be Truncated', path: '/documents/reports/long-title', isLast: true }\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTopbarComponent>",
                    "defaultValue": "{\r\n  title: 'Application shell/Topbar',\r\n  component: DsTopbarComponent,\r\n  parameters: {\r\n    layout: 'fullscreen',\r\n    docs: {\r\n      description: {\r\n        component: 'A page header component that displays a page title with icon on the left and action buttons with user avatar on the right. Can optionally show breadcrumb navigation for nested pages.',\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    pageTitle: {\r\n      control: 'text',\r\n      description: 'The title of the page',\r\n    },\r\n    iconName: {\r\n      control: 'text',\r\n      description: 'Icon name to display next to the page title',\r\n    },\r\n    userInitials: {\r\n      control: 'text',\r\n      description: 'User initials to display in the avatar',\r\n    },\r\n    showBreadcrumbs: {\r\n      control: 'boolean',\r\n      description: 'Whether to show breadcrumb navigation',\r\n    },\r\n    breadcrumbItems: {\r\n      control: 'object',\r\n      description: 'Array of breadcrumb items to display',\r\n    },\r\n    showFirstAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the first action button',\r\n    },\r\n    firstActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon name for the first action button',\r\n    },\r\n    firstActionLabel: {\r\n      control: 'text',\r\n      description: 'Aria label for the first action button',\r\n    },\r\n    showSecondAction: {\r\n      control: 'boolean',\r\n      description: 'Whether to show the second action button',\r\n    },\r\n    secondActionIcon: {\r\n      control: 'text',\r\n      description: 'Icon name for the second action button',\r\n    },\r\n    secondActionLabel: {\r\n      control: 'text',\r\n      description: 'Aria label for the second action button',\r\n    },\r\n  },\r\n  args: {\r\n    pageTitle: 'Dashboard',\r\n    iconName: 'remixHome4Line',\r\n    userInitials: 'JD',\r\n    showBreadcrumbs: false,\r\n    breadcrumbItems: [],\r\n    showFirstAction: true,\r\n    firstActionIcon: 'remixNotification3Line',\r\n    firstActionLabel: 'Notifications',\r\n    showSecondAction: true,\r\n    secondActionIcon: 'remixSettings3Line',\r\n    secondActionLabel: 'Settings',\r\n  },\r\n}"
                },
                {
                    "name": "MobileViewWithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  parameters: {\r\n    viewport: {\r\n      defaultViewport: 'mobile1',\r\n    },\r\n  },\r\n  args: {\r\n    pageTitle: 'Account Details',\r\n    iconName: 'remixSmartphoneLine',\r\n    userInitials: 'MB',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Settings', path: '/settings', isLast: false },\r\n      { label: 'Account', path: '/settings/account', isLast: false },\r\n      { label: 'Details', path: '/settings/account/details', isLast: true }\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "NestedPageWithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Edit Profile',\r\n    iconName: 'remixUser3Line',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Settings', path: '/settings', isLast: false },\r\n      { label: 'Users', path: '/settings/users', isLast: false },\r\n      { label: 'Edit Profile', path: '/settings/users/profile', isLast: true }\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "NoActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Read Only Page',\r\n    iconName: 'remixEyeLine',\r\n    userInitials: 'RO',\r\n    showFirstAction: false,\r\n    showSecondAction: false,\r\n  },\r\n}"
                },
                {
                    "name": "ProjectOverview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Project Overview',\r\n    iconName: 'remixFolderLine',\r\n    userInitials: 'AM',\r\n  },\r\n}"
                },
                {
                    "name": "SingleAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'Profile',\r\n    iconName: 'remixUser3Line',\r\n    userInitials: 'SA',\r\n    showFirstAction: true,\r\n    showSecondAction: false,\r\n    firstActionIcon: 'remixEditLine',\r\n    firstActionLabel: 'Edit Profile',\r\n  },\r\n}"
                },
                {
                    "name": "UserSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'User Settings',\r\n    iconName: 'remixSettings3Line',\r\n    userInitials: 'SM',\r\n    firstActionIcon: 'remixSaveLine',\r\n    firstActionLabel: 'Save Settings',\r\n    secondActionIcon: 'remixRefreshLine',\r\n    secondActionLabel: 'Reset Settings',\r\n  },\r\n}"
                },
                {
                    "name": "WithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    pageTitle: 'PFA Pension',\r\n    iconName: 'remixBuilding4Line',\r\n    showBreadcrumbs: true,\r\n    breadcrumbItems: [\r\n      { label: 'Customers', path: '/customers', isLast: false },\r\n      { label: 'PFA Pension', path: '/customers/pfa-pension', isLast: true }\r\n    ],\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    sparkImagePath: './Assets/ai-spark.png',\r\n    isLoading: true\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AiSparksLoadingComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/AISparksLoading',\r\n  component: AiSparksLoadingComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    sparkImagePath: {\r\n      control: { type: 'text' },\r\n      description: 'Path to the spark image asset'\r\n    },\r\n    isLoading: {\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the loading animation is active'\r\n    },\r\n    customSparks: {\r\n      control: { type: 'object' },\r\n      description: 'Optional custom spark configurations'\r\n    }\r\n  }\r\n}"
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    sparkImagePath: './Assets/ai-spark.png',\r\n    animationState: 'static'\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AiSparksStaticComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/AISparksStatic',\r\n  component: AiSparksStaticComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    sparkImagePath: {\r\n      control: { type: 'text' },\r\n      description: 'Path to the spark image asset'\r\n    },\r\n    animationState: {\r\n      control: { type: 'select' },\r\n      options: ['appear', 'static', 'disappear'],\r\n      description: 'Current animation state'\r\n    },\r\n    customSparks: {\r\n      control: { type: 'object' },\r\n      description: 'Optional custom spark configurations'\r\n    }\r\n  }\r\n}"
                }
            ],
            "src/app/components/ui/data-item/ds-data-item.stories.ts": [
                {
                    "name": "HorizontalAvatarIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Owner',\r\n    value: 'System User',\r\n    layout: 'horizontal',\r\n    valueType: 'avatar-text',\r\n    avatarType: 'icon',\r\n    avatarIconName: 'remixRobotFill',\r\n  },\r\n}"
                },
                {
                    "name": "HorizontalAvatarPhoto",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Created by',\r\n    value: 'Sarah Wilson',\r\n    layout: 'horizontal',\r\n    valueType: 'avatar-text',\r\n    avatarType: 'photo',\r\n    avatarSrc: '/Dummy-avatars/dummy-portrait-woman.jpg',\r\n  },\r\n}"
                },
                {
                    "name": "HorizontalBadgeIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Status',\r\n    layout: 'horizontal',\r\n    valueType: 'badge',\r\n    badgeVariant: 'success',\r\n    badgeContentType: 'icon-text',\r\n    badgeContent: 'Completed',\r\n    badgeIcon: 'remixCheckboxCircleFill',\r\n  },\r\n}"
                },
                {
                    "name": "HorizontalBadgeIndicator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Type',\r\n    layout: 'horizontal',\r\n    valueType: 'badge',\r\n    badgeVariant: 'brand',\r\n    badgeContentType: 'indicator-text',\r\n    badgeContent: 'Premium',\r\n    badgeIndicatorShape: 'circle',\r\n  },\r\n}"
                },
                {
                    "name": "HorizontalIconLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Download',\r\n    value: 'Download PDF report',\r\n    layout: 'horizontal',\r\n    valueType: 'icon-link',\r\n    linkHref: 'https://example.com/report.pdf',\r\n    linkTarget: '_blank',\r\n    iconName: 'remixFileDownloadLine',\r\n  },\r\n}"
                },
                {
                    "name": "HorizontalIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Location',\r\n    value: 'New York, NY',\r\n    layout: 'horizontal',\r\n    iconName: 'remixMapPin2Fill',\r\n  },\r\n}"
                },
                {
                    "name": "HorizontalText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Full Name',\r\n    value: 'John Doe',\r\n    layout: 'horizontal',\r\n    valueType: 'text',\r\n  },\r\n}"
                },
                {
                    "name": "LayoutComparison",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 24px; max-width: 400px;\">\r\n        <div>\r\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Vertical Layout</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n            <ds-data-item\r\n              label=\"Email address\"\r\n              value=\"user@example.com\"\r\n              layout=\"vertical\"\r\n              valueType=\"text\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Status\"\r\n              value=\"Active\"\r\n              layout=\"vertical\"\r\n              valueType=\"icon-text\"\r\n              iconName=\"remixCheckboxCircleFill\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Assigned to\"\r\n              value=\"John Doe\"\r\n              layout=\"vertical\"\r\n              valueType=\"avatar-text\"\r\n              avatarType=\"initials\"\r\n              avatarInitials=\"JD\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Horizontal Layout</h3>\r\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\r\n            <ds-data-item\r\n              label=\"Email address\"\r\n              value=\"user@example.com\"\r\n              layout=\"horizontal\"\r\n              valueType=\"text\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Status\"\r\n              value=\"Active\"\r\n              layout=\"horizontal\"\r\n              valueType=\"icon-text\"\r\n              iconName=\"remixCheckboxCircleFill\"\r\n            />\r\n            <ds-data-item\r\n              label=\"Assigned to\"\r\n              value=\"John Doe\"\r\n              layout=\"horizontal\"\r\n              valueType=\"avatar-text\"\r\n              avatarType=\"initials\"\r\n              avatarInitials=\"JD\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsDataItemComponent>",
                    "defaultValue": "{\r\n  title: 'Primitives/Data Item',\r\n  component: DsDataItemComponent,\r\n  parameters: {\r\n    layout: 'padded',\r\n    docs: {\r\n      description: {\r\n        component: `\r\nA flexible data item component for displaying label-value pairs with multiple layout options and value types. Perfect for user profiles, task details, settings panels, and structured data displays.\r\n\r\n## Features\r\n\r\n- **Two Layout Types**: Vertical and horizontal arrangements for different use cases\r\n- **Fixed Value Height**: 32px height for consistent alignment across all value types\r\n- **Six Value Types**: Text, Icon+Text, Avatar+Text, Badge, Link, and Icon+Link variants\r\n- **Responsive Design**: Horizontal layout automatically collapses to vertical on mobile\r\n- **Consistent Spacing**: 8px gap between elements in value container\r\n- **Semantic Typography**: Uses ui-sm-regular (14px, 400 weight) for value text\r\n\r\n## Layout Types\r\n\r\n### Vertical Layout\r\nStacks label above value with 4px gap. Ideal for compact displays, mobile layouts, and when you need to conserve horizontal space.\r\n\r\n### Horizontal Layout\r\nPlaces label and value side-by-side with 12px gap. Label container has fixed 128px width for consistent alignment across multiple data items.\r\n\r\n## Value Types\r\n\r\n### Text Only\r\nSimple text display using ui-sm-regular typography with primary text color.\r\n\r\n### Icon + Text\r\n16px icon with secondary color paired with text. Perfect for status indicators, locations, or categorized information.\r\n\r\n### Avatar + Text\r\n20x20px avatar (xs size) with text. Supports all avatar types: initials, photo, and icon. Ideal for user assignments, ownership, or person-related data.\r\n\r\n### Badge\r\nFull badge component with all variants and content types. Perfect for status, priority, categories, or any labeled information.\r\n\r\n### Link\r\nClickable link using the ds-link component. Ideal for navigation, references, or any interactive text that should lead to another page or action.\r\n\r\n### Icon + Link\r\nLink with a leading icon for enhanced visual context. Perfect for document links, external references, or any clickable content that benefits from visual indicators.\r\n\r\nFor complete documentation, properties reference, and implementation guidelines, see the [Data Item README](/?path=/docs/components-data-item--docs).\r\n        `,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    label: {\r\n      control: 'text',\r\n      description: 'The label text to display',\r\n    },\r\n    value: {\r\n      control: 'text',\r\n      description: 'The value text to display (not used for badge type)',\r\n    },\r\n    layout: {\r\n      control: 'select',\r\n      options: ['vertical', 'horizontal'],\r\n      description: 'Layout arrangement of label and value',\r\n    },\r\n    valueType: {\r\n      control: 'select',\r\n      options: ['text', 'icon-text', 'avatar-text', 'badge', 'link', 'icon-link'],\r\n      description: 'Type of value display',\r\n    },\r\n    iconName: {\r\n      control: 'text',\r\n      description: 'Icon name for icon-text and icon-link types',\r\n    },\r\n    avatarType: {\r\n      control: 'select',\r\n      options: ['initials', 'photo', 'icon'],\r\n      description: 'Avatar type for avatar-text type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    avatarInitials: {\r\n      control: 'text',\r\n      description: 'Avatar initials for initials type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    avatarSrc: {\r\n      control: 'text',\r\n      description: 'Avatar image source for photo type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    avatarIconName: {\r\n      control: 'text',\r\n      description: 'Avatar icon name for icon type',\r\n      if: { arg: 'valueType', eq: 'avatar-text' },\r\n    },\r\n    badgeVariant: {\r\n      control: 'select',\r\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\r\n      description: 'Badge color variant',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeContentType: {\r\n      control: 'select',\r\n      options: ['text', 'icon-text', 'indicator-text'],\r\n      description: 'Badge content type',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeContent: {\r\n      control: 'text',\r\n      description: 'Badge content text',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeIcon: {\r\n      control: 'text',\r\n      description: 'Badge icon name for icon-text type',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    badgeIndicatorShape: {\r\n      control: 'select',\r\n      options: ['circle', 'square'],\r\n      description: 'Badge indicator shape for indicator-text type',\r\n      if: { arg: 'valueType', eq: 'badge' },\r\n    },\r\n    linkHref: {\r\n      control: 'text',\r\n      description: 'Link URL',\r\n      if: { arg: 'valueType', eq: 'link' },\r\n    },\r\n    linkTarget: {\r\n      control: 'select',\r\n      options: ['_blank', '_self'],\r\n      description: 'Link target (_blank for new tab)',\r\n      if: { arg: 'valueType', eq: 'link' },\r\n    },\r\n    // iconName is used for both icon-text and icon-link types\r\n  },\r\n  args: {\r\n    label: 'Email',\r\n    value: 'user@example.com',\r\n    layout: 'vertical',\r\n    valueType: 'text',\r\n  },\r\n}"
                },
                {
                    "name": "TaskDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\r\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">Task Details</h3>\r\n        \r\n        <ds-data-item\r\n          label=\"Title\"\r\n          value=\"Implement user authentication\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Priority\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"warning\"\r\n          badgeContentType=\"text\"\r\n          badgeContent=\"High\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Status\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"blue\"\r\n          badgeContentType=\"indicator-text\"\r\n          badgeContent=\"In Progress\"\r\n          badgeIndicatorShape=\"circle\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Assignee\"\r\n          value=\"Sarah Wilson\"\r\n          layout=\"horizontal\"\r\n          valueType=\"avatar-text\"\r\n          avatarType=\"photo\"\r\n          avatarSrc=\"/Dummy-avatars/dummy-portrait-woman.jpg\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Due date\"\r\n          value=\"March 15, 2024\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-text\"\r\n          iconName=\"remixCalendarLine\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
                },
                {
                    "name": "UserProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\r\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">User Profile</h3>\r\n        \r\n        <ds-data-item\r\n          label=\"Full name\"\r\n          value=\"Sarah Wilson\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Email\"\r\n          value=\"sarah.wilson@company.com\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Role\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"brand\"\r\n          badgeContentType=\"text\"\r\n          badgeContent=\"Admin\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Status\"\r\n          value=\"Online\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-text\"\r\n          iconName=\"remixCheckboxCircleFill\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Manager\"\r\n          value=\"John Doe\"\r\n          layout=\"horizontal\"\r\n          valueType=\"avatar-text\"\r\n          avatarType=\"initials\"\r\n          avatarInitials=\"JD\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
                },
                {
                    "name": "ValueTypesShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\r\n        <ds-data-item\r\n          label=\"Text value\"\r\n          value=\"Simple text content\"\r\n          layout=\"horizontal\"\r\n          valueType=\"text\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Icon + Text\"\r\n          value=\"With icon prefix\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-text\"\r\n          iconName=\"remixStarFill\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Avatar + Text\"\r\n          value=\"John Doe\"\r\n          layout=\"horizontal\"\r\n          valueType=\"avatar-text\"\r\n          avatarType=\"initials\"\r\n          avatarInitials=\"JD\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Badge value\"\r\n          layout=\"horizontal\"\r\n          valueType=\"badge\"\r\n          badgeVariant=\"success\"\r\n          badgeContentType=\"icon-text\"\r\n          badgeContent=\"Verified\"\r\n          badgeIcon=\"remixShieldCheckFill\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Link value\"\r\n          value=\"Visit documentation\"\r\n          layout=\"horizontal\"\r\n          valueType=\"link\"\r\n          linkHref=\"https://example.com/docs\"\r\n          linkTarget=\"_blank\"\r\n        />\r\n        <ds-data-item\r\n          label=\"Icon + Link\"\r\n          value=\"Download report\"\r\n          layout=\"horizontal\"\r\n          valueType=\"icon-link\"\r\n          linkHref=\"https://example.com/report.pdf\"\r\n          linkTarget=\"_blank\"\r\n          iconName=\"remixFileDownloadLine\"\r\n        />\r\n      </div>\r\n    `,\r\n  }),\r\n  parameters: {\r\n    controls: { disable: true },\r\n  },\r\n}"
                },
                {
                    "name": "VerticalAvatarInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Assigned to',\r\n    value: 'John Doe',\r\n    layout: 'vertical',\r\n    valueType: 'avatar-text',\r\n    avatarType: 'initials',\r\n    avatarInitials: 'JD',\r\n  },\r\n}"
                },
                {
                    "name": "VerticalBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Priority',\r\n    layout: 'vertical',\r\n    valueType: 'badge',\r\n    badgeVariant: 'destructive',\r\n    badgeContentType: 'text',\r\n    badgeContent: 'High',\r\n  },\r\n}"
                },
                {
                    "name": "VerticalIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Status',\r\n    value: 'Active',\r\n    layout: 'vertical',\r\n    iconName: 'remixCheckboxCircleFill',\r\n  },\r\n}"
                },
                {
                    "name": "VerticalLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Documentation',\r\n    value: 'View API docs',\r\n    layout: 'vertical',\r\n    valueType: 'link',\r\n    linkHref: 'https://api.example.com/docs',\r\n    linkTarget: '_blank',\r\n  },\r\n}"
                },
                {
                    "name": "VerticalText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Email Address',\r\n    value: 'user@example.com',\r\n    layout: 'vertical',\r\n    valueType: 'text',\r\n  },\r\n}"
                }
            ],
            "src/app/components/ui/drawer/ds-drawer.stories.ts": [
                {
                    "name": "LeftDrawer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    position: 'left'\r\n  },\r\n  render: Template\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DrawerStoryProps>",
                    "defaultValue": "{\r\n  title: 'Primitives/Drawer',\r\n  component: DsDrawerComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsDrawerComponent, DsButtonComponent, NgpDialogTrigger, NgpDialogOverlay, NgpDialog],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    position: {\r\n      control: 'select',\r\n      options: ['left', 'right'],\r\n      description: 'Position of the drawer',\r\n      defaultValue: 'right'\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "RightDrawer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    position: 'right'\r\n  },\r\n  render: Template\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  template: `\r\n    <div style=\"padding: 20px;\">\r\n      <ds-button [ngpDialogTrigger]=\"drawer\" variant=\"primary\">Open Drawer</ds-button>\r\n      <p>This is the main page content. When you open the drawer, it should overlay this content with a semi-transparent background.</p>\r\n    </div>\r\n\r\n    <ng-template #drawer let-close=\"close\">\r\n      <div ngpDialogOverlay class=\"ds-drawer-overlay\">\r\n        <ds-drawer ngpDialog [position]=\"position\">\r\n          <h2 slot=\"header\" class=\"tw-text-xl tw-font-semibold\">Drawer Title</h2>\r\n          <div slot=\"content\">\r\n            <p class=\"tw-text-neutral-700 tw-mb-4\">This is the main content of the drawer.</p>\r\n            <p class=\"tw-text-neutral-600 tw-mb-4\">You can put any content here including forms, lists, or other components.</p>\r\n            <div class=\"tw-p-4 tw-bg-gray-50 tw-rounded-lg\">\r\n              <h3 class=\"tw-font-medium tw-mb-2\">Example Content</h3>\r\n              <p class=\"tw-text-sm tw-text-gray-600\">This drawer should slide in from the {{ position }} side of the screen.</p>\r\n            </div>\r\n          </div>\r\n          <div slot=\"footer\">\r\n            <ds-button variant=\"ghost\" (click)=\"close()\">Cancel</ds-button>\r\n            <ds-button variant=\"primary\" (click)=\"close()\">Save Changes</ds-button>\r\n          </div>\r\n        </ds-drawer>\r\n      </div>\r\n    </ng-template>\r\n  `\r\n})"
                }
            ],
            "src/app/components/ui/accordion/ds-accordion.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsAccordion>",
                    "defaultValue": "{\r\n  title: 'Primitives/Accordion',\r\n  component: DsAccordion,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [DsAccordion, DsAccordionItem, NgIcon],\r\n      providers: [\r\n        provideIcons({ remixArrowDownSLine })\r\n      ]\r\n    })\r\n  ],\r\n}"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'multiple'\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-accordion [type]=\"type\">\r\n        <ds-accordion-item value=\"features\" heading=\"Key Features\">\r\n          <ul class=\"tw-list-disc\">\r\n            <li>Property Management</li>\r\n            <li>Tenant Portal</li>\r\n            <li>Maintenance Tracking</li>\r\n            <li>Financial Reports</li>\r\n          </ul>\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"pricing\" heading=\"Pricing Plans\">\r\n          <ul class=\"tw-list-disc\">\r\n            <li>Basic: Free</li>\r\n            <li>Professional: $29/month</li>\r\n            <li>Enterprise: Custom pricing</li>\r\n          </ul>\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"support\" heading=\"Support Options\">\r\n          <ul class=\"tw-list-disc\">\r\n            <li>24/7 Email Support</li>\r\n            <li>Live Chat</li>\r\n            <li>Phone Support (Enterprise)</li>\r\n          </ul>\r\n        </ds-accordion-item>\r\n      </ds-accordion>\r\n    `\r\n  })\r\n}"
                },
                {
                    "name": "Single",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'single',\r\n    collapsible: true\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <ds-accordion [type]=\"type\" [collapsible]=\"collapsible\">\r\n        <ds-accordion-item value=\"item-1\" heading=\"What is Propbinder?\">\r\n          Propbinder is a modern property management platform that helps you manage your properties efficiently.\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"item-2\" heading=\"How does it work?\">\r\n          Our platform provides tools for property listing, tenant management, maintenance tracking, and financial reporting.\r\n        </ds-accordion-item>\r\n        <ds-accordion-item value=\"item-3\" heading=\"Is it secure?\">\r\n          Yes, we use industry-standard encryption and security practices to protect your data.\r\n        </ds-accordion-item>\r\n      </ds-accordion>\r\n    `\r\n  })\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [\r\n        provideAllRemixIcons()\r\n      ]\r\n    })\r\n  ],\r\n  parameters: {\r\n    actions: { argTypesRegex: '^on[A-Z].*' },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n    options: {\r\n      storySort: {\r\n        order: ['*'],\r\n        method: 'alphabetical'\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/ui/accordion/ds-accordion.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsAccordion>",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/badge/ds-badge.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsBadgeComponent>",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/app-layout/ds-app-layout.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsAppLayoutComponent>",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/avatar/ds-avatar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsAvatarComponent>",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/button/ds-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsButtonComponent>",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/button/ds-icon-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsIconButtonComponent>",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/checkbox/ds-checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsCheckboxComponent>",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/combobox/ds-combobox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsComboboxComponent>",
                    "file": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/datepicker/ds-datepicker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsDatepickerComponent>",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/data-item/ds-data-item.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsDataItemComponent>",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/data-table/ds-data-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsDataTableComponent>",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/drawer/ds-drawer.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DrawerStoryProps>",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/editable-table/ds-editable-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsEditableTableComponent>",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/header-details/ds-header-details.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsHeaderDetailsComponent>",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/icon/ds-icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsIconComponent>",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/inline-message/ds-inline-message.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsInlineMessageComponent>",
                    "file": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/form-field/ds-form-field.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsFormFieldComponent>",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/input/ds-input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsInputComponent>",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/label/ds-label.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsLabelComponent>",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/link/ds-link.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsLinkComponent>",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/list/ds-list.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsListComponent>",
                    "file": "src/app/components/ui/list/ds-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/list-item/ds-list-item.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsListItemComponent>",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/listbox/ds-listbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsListboxComponent>",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/loading-label/ds-loading-label.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsLoadingLabelComponent>",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/menu/ds-menu.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsMenuComponent>",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsMetadataItemComponent>",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/select/ds-select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsSelectComponent>",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsShapeIndicatorComponent>",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/sidebar/ds-sidebar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsSidebarComponent>",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AiSparksLoadingComponent>",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AiSparksStaticComponent>",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/spinner/ds-spinner.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsSpinnerComponent>",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/tabs/ds-tabs.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTabs>",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/textarea/ds-textarea.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTextareaComponent>",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/tile/ds-tile.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTileComponent>",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/tooltip/ds-tooltip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTooltipComponent>",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ui/topbar/ds-topbar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTopbarComponent>",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Single",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DebugWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoResponsive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitiallyCollapsed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopbarDebug",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitialsType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PhotoType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Static",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllColorVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentTypeComparison",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextBrand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextDestructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextBrand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextDestructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextGrey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextLightPurple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextLimeGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextPink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextSalmonOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBrand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextDestructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextGrey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLightPurple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLimeGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextPink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSalmonOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AIVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtonVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadingStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllSizesAndVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LabelToggle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFewOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFilterIconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithGhostButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithManyOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithSecondaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/combobox/ds-combobox.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalAvatarIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalAvatarPhoto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalBadgeIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalBadgeIndicator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalIconLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LayoutComparison",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TaskDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ValueTypesShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalAvatarInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClickableRows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CompactView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeDataset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Products",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumnsWithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumnsWithSizing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithColumnManagement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithColumnSizing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PastAndCurrentDatesOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInputTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithReactiveForms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DrawerStoryProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoiceLine",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categoryOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "invoiceColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InvoiceLinesReorderable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDeleteAllowed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDragHandle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "priorityOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductsSortable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ReadOnlyMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleInvoiceLines",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TasksWithSelects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeaseDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MinimalNoActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MobileView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Overview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropertyDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorTest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentWidths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Information",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutDescription",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/inline-message/ds-inline-message.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Clearable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GhostWithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Readonly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLeadingIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractiveExamples",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SlotContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SlotContentWithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Complete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list/ds-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list/ds-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list/ds-list.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simpleOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDisabledOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AIProcessing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargerText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutShimmer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicMenuItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuWithDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuWithIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDisabledItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommonUseCases",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TaskMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTooltip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GhostWithGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "groupedOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simpleOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDisabledOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllShapes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Circle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Diamond",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pentagon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Triangle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsageExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActiveItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Collapsed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CollapsedWithGlobalAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithGlobalAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeTextarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLimits",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPlaceholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoiceLine",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComplexExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "invoiceColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleSectionsHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleSectionsVertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleInvoiceLines",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SectionWithoutHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SectionWithoutPadding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDataTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTitleAndAvatar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTitleAndIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentPlacements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTitleWithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MobileViewWithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NestedPageWithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProjectOverview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}