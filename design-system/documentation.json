{
    "pipes": [],
    "interfaces": [
        {
            "name": "DrawerStoryProps",
            "id": "interface-DrawerStoryProps-02c38f544101185555142992d8614cd50fa3431bc2e8e18f01746dfc8910810df48cbe172948edef1f9eac6da3de39a5911339632fded632420e00781310f5b1",
            "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\nimport { DsDrawerComponent } from './ds-drawer';\nimport { DsButtonComponent } from '../button/ds-button';\nimport { NgpDialogTrigger, NgpDialogOverlay, NgpDialog } from 'ng-primitives/dialog';\n\ninterface DrawerStoryProps {\n  position: 'left' | 'right';\n}\n\nconst meta: Meta<DrawerStoryProps> = {\n  title: 'Primitives/Drawer',\n  component: DsDrawerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsDrawerComponent, DsButtonComponent, NgpDialogTrigger, NgpDialogOverlay, NgpDialog],\n    }),\n  ],\n  argTypes: {\n    position: {\n      control: 'select',\n      options: ['left', 'right'],\n      description: 'Position of the drawer',\n      defaultValue: 'right'\n    }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj<DrawerStoryProps>;\n\nconst Template: Story['render'] = (args) => ({\n  props: args,\n  template: `\n    <div style=\"padding: 20px;\">\n      <ds-button [ngpDialogTrigger]=\"drawer\" variant=\"primary\">Open Drawer</ds-button>\n      <p>This is the main page content. When you open the drawer, it should overlay this content with a semi-transparent background.</p>\n    </div>\n\n    <ng-template #drawer let-close=\"close\">\n      <div ngpDialogOverlay class=\"ds-drawer-overlay\">\n        <ds-drawer ngpDialog [position]=\"position\">\n          <h2 slot=\"header\" class=\"tw-text-xl tw-font-semibold\">Drawer Title</h2>\n          <div slot=\"content\">\n            <p class=\"tw-text-neutral-700 tw-mb-4\">This is the main content of the drawer.</p>\n            <p class=\"tw-text-neutral-600 tw-mb-4\">You can put any content here including forms, lists, or other components.</p>\n            <div class=\"tw-p-4 tw-bg-gray-50 tw-rounded-lg\">\n              <h3 class=\"tw-font-medium tw-mb-2\">Example Content</h3>\n              <p class=\"tw-text-sm tw-text-gray-600\">This drawer should slide in from the {{ position }} side of the screen.</p>\n            </div>\n          </div>\n          <div slot=\"footer\">\n            <ds-button variant=\"ghost\" (click)=\"close()\">Cancel</ds-button>\n            <ds-button variant=\"primary\" (click)=\"close()\">Save Changes</ds-button>\n          </div>\n        </ds-drawer>\n      </div>\n    </ng-template>\n  `\n});\n\nexport const RightDrawer: Story = {\n  args: {\n    position: 'right'\n  },\n  render: Template\n};\n\nexport const LeftDrawer: Story = {\n  args: {\n    position: 'left'\n  },\n  render: Template\n};",
            "properties": [
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ExampleOption",
            "id": "interface-ExampleOption-e7c8036a7754d961f24542d328a6c96d4f6c4a6970317c7460104b40a8a5a8ababee828d9efb4922f3df8dcca4f623d4e218391a6951bfbcf369c9e008d3b3d2",
            "file": "src/app/components/ui/select/ds-select.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata, componentWrapperDecorator } from '@storybook/angular';\nimport { FormsModule } from '@angular/forms';\nimport { DsSelectComponent, DsSelectOption } from './ds-select';\n\ninterface ExampleOption {\n  id: string;\n  name: string;\n}\n\nconst meta: Meta<DsSelectComponent> = {\n  title: 'Primitives/Select',\n  component: DsSelectComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [FormsModule],\n    }),\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\n    )\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'error', 'warning', 'success'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    required: {\n      control: 'boolean',\n    },\n    ghost: {\n      control: 'boolean',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsSelectComponent>;\n\nconst simpleOptions: DsSelectOption[] = [\n  { id: '1', label: 'Option 1', value: 1 },\n  { id: '2', label: 'Option 2', value: 2 },\n  { id: '3', label: 'Option 3', value: 3 },\n  { id: '4', label: 'Option 4', value: 4 },\n];\n\nconst groupedOptions: DsSelectOption[] = [\n  { id: '1', label: 'Apple', value: 'apple', group: 'Fruits' },\n  { id: '2', label: 'Banana', value: 'banana', group: 'Fruits' },\n  { id: '3', label: 'Orange', value: 'orange', group: 'Fruits' },\n  { id: '4', label: 'Carrot', value: 'carrot', group: 'Vegetables' },\n  { id: '5', label: 'Broccoli', value: 'broccoli', group: 'Vegetables' },\n  { id: '6', label: 'Potato', value: 'potato', group: 'Vegetables' },\n];\n\nexport const Default: Story = {\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'default',\n    disabled: false,\n    required: false,\n    ghost: false,\n  },\n};\n\nexport const WithGroups: Story = {\n  args: {\n    options: groupedOptions,\n    placeholder: 'Select food',\n    variant: 'default',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    disabled: true,\n  },\n};\n\nexport const Error: Story = {\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'error',\n  },\n};\n\nexport const Warning: Story = {\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'warning',\n  },\n};\n\nexport const Success: Story = {\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'success',\n  },\n};\n\nexport const WithDisabledOptions: Story = {\n  args: {\n    options: [\n      { id: '1', label: 'Option 1', value: 1 },\n      { id: '2', label: 'Option 2', value: 2, disabled: true },\n      { id: '3', label: 'Option 3', value: 3 },\n      { id: '4', label: 'Option 4', value: 4, disabled: true },\n    ],\n    placeholder: 'Select an option',\n  },\n};\n\nexport const Ghost: Story = {\n  args: {\n    options: simpleOptions,\n    placeholder: 'Ghost select',\n    ghost: true,\n  },\n};\n\nexport const GhostWithGroups: Story = {\n  args: {\n    options: groupedOptions,\n    placeholder: 'Ghost select with groups',\n    ghost: true,\n  },\n};\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InvoiceLine",
            "id": "interface-InvoiceLine-5615bdef278506c0abaf8e39c97cb6ec22d4300dc11ba4fbcb086f084791754a707b675681d4e93bff54f571c8812276f2084353f6715d00451ec12990c7694a",
            "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\nimport { signal } from '@angular/core';\nimport { DsEditableTableComponent, type DsEditableTableColumnMeta } from './ds-editable-table';\nimport { editableTextCell, editableNumberCell, editableSelectCell } from './editable-cell-helpers';\nimport { provideIcons } from '@ng-icons/core';\nimport { \n  remixAddLine,\n  remixDeleteBinLine,\n  remixDraggable,\n  remixInboxLine,\n  remixArrowUpLine,\n  remixArrowDownLine,\n} from '@ng-icons/remixicon';\nimport type { ColumnDef } from '@tanstack/angular-table';\n\n// Sample data types\ninterface InvoiceLine {\n  id: string;\n  name: string;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  discount: number;\n  total: number;\n}\n\ninterface Product {\n  id: string;\n  name: string;\n  sku: string;\n  category: string;\n  price: number;\n  stock: number;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  assignee: string;\n  priority: string;\n  status: string;\n  dueDate: string;\n}\n\n// Sample data\nconst sampleInvoiceLines: InvoiceLine[] = [\n  { \n    id: '1', \n    name: 'Administration fee', \n    description: 'Covers handling and coordination', \n    quantity: 1, \n    unitPrice: 500, \n    discount: 0, \n    total: 500 \n  },\n  { \n    id: '2', \n    name: 'Miscellaneous', \n    description: 'Various small items', \n    quantity: 2, \n    unitPrice: 400, \n    discount: 0, \n    total: 800 \n  },\n  { \n    id: '3', \n    name: 'Technical Manager', \n    description: 'Consulting services', \n    quantity: 6.5, \n    unitPrice: 800, \n    discount: 0, \n    total: 5200 \n  },\n];\n\nconst sampleProducts: Product[] = [\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\n];\n\nconst sampleTasks: Task[] = [\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\n];\n\n// Priority options for select\nconst priorityOptions = [\n  { id: 'low', label: 'Low', value: 'Low' },\n  { id: 'medium', label: 'Medium', value: 'Medium' },\n  { id: 'high', label: 'High', value: 'High' },\n];\n\n// Status options for select\nconst statusOptions = [\n  { id: 'todo', label: 'To Do', value: 'To Do' },\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\n  { id: 'done', label: 'Done', value: 'Done' },\n];\n\n// Category options for select\nconst categoryOptions = [\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\n  { id: 'office', label: 'Office', value: 'Office' },\n];\n\n// Column definitions\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'description',\n    header: 'Description',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Add description...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n        maxWidth: 'xl',\n        truncate: true,\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'quantity',\n    header: 'Quantity',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.5,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'unitPrice',\n    header: 'Unit Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'discount',\n    header: 'Discount',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'total',\n    header: 'Total',\n    cell: (info) => info.getValue(),\n    enableSorting: true,\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst productColumns: ColumnDef<Product>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter product name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'sku',\n    header: 'SKU',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'SKU-000'\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: categoryOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 1,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst taskColumns: ColumnDef<Task>[] = [\n  {\n    accessorKey: 'title',\n    header: 'Task',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter task title...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'assignee',\n    header: 'Assignee',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Assign to...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'priority',\n    header: 'Priority',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: priorityOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: statusOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'dueDate',\n    header: 'Due Date',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst meta: Meta<DsEditableTableComponent> = {\n  title: 'Components/Editable Table',\n  component: DsEditableTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixDeleteBinLine,\n          remixDraggable,\n          remixInboxLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display and edit (two-way binding)',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    reorderable: {\n      control: 'boolean',\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\n    },\n    allowAddRow: {\n      control: 'boolean',\n      description: 'Allow adding new rows',\n    },\n    allowDeleteRow: {\n      control: 'boolean',\n      description: 'Allow deleting rows',\n    },\n    showDragHandle: {\n      control: 'boolean',\n      description: 'Show drag handle column (only when reorderable is true)',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    addRowButtonText: {\n      control: 'text',\n      description: 'Text for add row button',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsEditableTableComponent>;\n\nexport const InvoiceLinesReorderable: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceData: signal([...sampleInvoiceLines]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: 'Add description',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"invoiceData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [showDragHandle]=\"true\"\n        [addRowButtonText]=\"'Add invoice line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\n      },\n    },\n  },\n};\n\nexport const ProductsSortable: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      productData: signal([...sampleProducts]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        sku: '',\n        category: 'Electronics',\n        price: 0,\n        stock: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onSortingChanged: (sorting: any) => {\n        console.log('Sorting changed:', sorting);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"productData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add product'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (sortingChanged)=\"onSortingChanged($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\n      },\n    },\n  },\n};\n\nexport const TasksWithSelects: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      taskData: signal([...sampleTasks]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        title: '',\n        assignee: '',\n        priority: 'Medium',\n        status: 'To Do',\n        dueDate: ''\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"taskData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add task'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: taskColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\n      },\n    },\n  },\n};\n\nexport const EmptyState: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      emptyData: signal([]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: '',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onRowAdded: (row: any) => {\n        console.log('First row added:', row);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"emptyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [emptyMessage]=\"'No invoice lines yet'\"\n        [addRowButtonText]=\"'Add first line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (rowAdded)=\"onRowAdded($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\n      },\n    },\n  },\n};\n\nexport const NoDeleteAllowed: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      lockedData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"lockedData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"false\"\n        [addRowButtonText]=\"'Add line'\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\n      },\n    },\n  },\n};\n\nexport const NoDragHandle: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      noDragData: signal([...sampleProducts]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"noDragData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [showDragHandle]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\n      },\n    },\n  },\n};\n\nexport const ReadOnlyMode: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      readOnlyData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"readOnlyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"false\"\n        [allowDeleteRow]=\"false\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\n      },\n    },\n  },\n};\n\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InvoiceLine",
            "id": "interface-InvoiceLine-cb2c5ca6bde4b398c594262428c85575fe4e314698a3afcd10fc387af6b1db650992ad0fe98459d074879bb427531dae89ca04c51b3c37bf5739075944abd3e3-1",
            "file": "src/app/components/ui/tile/ds-tile.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig, moduleMetadata } from '@storybook/angular';\nimport { DsTileComponent } from './ds-tile';\nimport { DsTileSectionComponent } from './ds-tile-section';\nimport { TileHeaderComponent } from './tile-header';\nimport { DsButtonComponent } from '../button/ds-button';\nimport { DsIconButtonComponent } from '../button/ds-icon-button';\nimport { DsIconComponent } from '../icon/ds-icon';\nimport { DsAvatarComponent } from '../avatar/ds-avatar';\nimport { DsDataTableComponent } from '../data-table/ds-data-table';\nimport { DsBadgeComponent } from '../badge/ds-badge';\nimport { DsDataItemComponent } from '../data-item/ds-data-item';\nimport { DsMetadataItemComponent } from '../metadata-item/ds-metadata-item';\nimport { provideIcons } from '@ng-icons/core';\nimport {\n  remixAddLine,\n  remixEditLine,\n  remixMoreLine,\n  remixFileList3Line,\n  remixUserLine,\n  remixDownloadLine,\n  remixFilterLine,\n  remixSearchLine,\n  remixLayoutColumnLine,\n  remixCloseLine,\n  remixArrowUpLine,\n  remixArrowDownLine,\n  remixInboxLine,\n  remixArrowLeftSLine,\n  remixArrowRightSLine,\n} from '@ng-icons/remixicon';\nimport type { ColumnDef } from '@tanstack/angular-table';\n\ninterface InvoiceLine {\n  id: number;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  total: number;\n}\n\nconst sampleInvoiceLines: InvoiceLine[] = [\n  { id: 1, description: 'Professional Services - Consulting', quantity: 10, unitPrice: 150.00, total: 1500.00 },\n  { id: 2, description: 'Software License - Annual', quantity: 5, unitPrice: 299.99, total: 1499.95 },\n  { id: 3, description: 'Cloud Hosting - Monthly', quantity: 12, unitPrice: 49.99, total: 599.88 },\n  { id: 4, description: 'Support & Maintenance', quantity: 1, unitPrice: 999.00, total: 999.00 },\n];\n\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\n  { accessorKey: 'id', header: 'ID' },\n  { accessorKey: 'description', header: 'Description' },\n  { accessorKey: 'quantity', header: 'Qty' },\n  { accessorKey: 'unitPrice', header: 'Unit Price', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\n  { accessorKey: 'total', header: 'Total', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\n];\n\nconst meta: Meta<DsTileComponent> = {\n  title: 'Layout/Tile',\n  component: DsTileComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixEditLine,\n          remixMoreLine,\n          remixFileList3Line,\n          remixUserLine,\n          remixDownloadLine,\n          remixFilterLine,\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n        }),\n      ],\n    }),\n    moduleMetadata({\n      imports: [\n        DsTileSectionComponent,\n        TileHeaderComponent,\n        DsButtonComponent,\n        DsIconButtonComponent,\n        DsIconComponent,\n        DsAvatarComponent,\n        DsDataTableComponent,\n        DsBadgeComponent,\n        DsDataItemComponent,\n        DsMetadataItemComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    orientation: {\n      control: 'select',\n      options: ['vertical', 'horizontal'],\n      description: 'Layout orientation of tile sections',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsTileComponent>;\n\n// Basic Examples\nexport const Default: Story = {\n  args: {\n    orientation: 'vertical',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-tile [orientation]=\"orientation\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Section Title</header-title>\n            <header-actions>\n              <ds-button size=\"sm\">Action</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">This is a simple tile section with a header and some content.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const WithDataTable: Story = {\n  args: {\n    orientation: 'vertical',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceLines: sampleInvoiceLines,\n      invoiceColumns: invoiceColumns,\n    },\n    template: `\n      <ds-tile [orientation]=\"orientation\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Invoice Lines</header-title>\n            <header-actions>\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">Add line</ds-button>\n            </header-actions>\n          </tile-header>\n        </ds-tile-section>\n        <ds-tile-section [padding]=\"false\">\n          <ds-data-table \n            [data]=\"invoiceLines\" \n            [columns]=\"invoiceColumns\"\n            [searchable]=\"false\"\n            [showColumnVisibility]=\"false\"\n            [paginated]=\"false\">\n          </ds-data-table>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const WithTitleAndAvatar: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>\n              <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\" />\n              User Profile\n            </header-title>\n            <header-actions>\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Name\" value=\"John Doe\" layout=\"horizontal\" />\n            <ds-data-item label=\"Email\" value=\"john.doe@example.com\" layout=\"horizontal\" />\n            <ds-data-item label=\"Role\" value=\"Administrator\" layout=\"horizontal\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const WithTitleAndIcon: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>\n              <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\n              Invoice Details\n            </header-title>\n            <header-actions>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\n              <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item icon=\"remixFileTextLine\" value=\"Invoice #12345\" />\n            <ds-metadata-item icon=\"remixCalendarLine\" value=\"Due Date: 2024-03-15\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const MultipleActions: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Document Manager</header-title>\n            <header-actions>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixFilterLine\">Filter</ds-button>\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">New</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">Manage your documents with multiple action options.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const MultipleSectionsVertical: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Personal Information</header-title>\n            <header-actions>\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Name\" value=\"Jane Smith\" layout=\"horizontal\" />\n            <ds-data-item label=\"Email\" value=\"jane.smith@example.com\" layout=\"horizontal\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Account Settings</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Plan\" value=\"Professional\" layout=\"horizontal\" />\n            <ds-data-item \n              label=\"Status\" \n              value=\"Active\" \n              valueType=\"badge\"\n              layout=\"horizontal\"\n              badgeVariant=\"success\"\n              badgeContent=\"Active\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Preferences</header-title>\n            <header-actions>\n              <ds-button size=\"sm\" variant=\"ghost\">Reset</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">Configure your application preferences here.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const MultipleSectionsHorizontal: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"horizontal\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Overview</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\n            <ds-data-item \n              label=\"Total Revenue\" \n              value=\"$45,231\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-lg'\" />\n            <ds-data-item \n              label=\"Growth\" \n              value=\"+20.1%\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-md tw-text-success-strong'\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Activity</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\n            <ds-data-item \n              label=\"New Users\" \n              value=\"1,234\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-lg'\" />\n            <ds-data-item \n              label=\"Conversion\" \n              value=\"3.2%\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-md'\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const SectionWithoutHeader: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <p style=\"margin: 0;\">This section has no header, just content with default padding.</p>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Section with Header</header-title>\n          </tile-header>\n          <p style=\"margin: 0;\">This section has a header for comparison.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const SectionWithoutPadding: Story = {\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>With Padding (Default)</header-title>\n          </tile-header>\n          <div style=\"background: #f0f0f0; padding: 8px; border-radius: 4px;\">\n            This content has the default 20px padding around it.\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section [padding]=\"false\">\n          <div style=\"background: #f0f0f0; padding: 20px;\">\n            This content has no section padding. The gray box extends to the edges.\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n};\n\nexport const ComplexExample: Story = {\n  render: () => ({\n    props: {\n      invoiceLines: sampleInvoiceLines,\n      invoiceColumns: invoiceColumns,\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <ds-tile orientation=\"vertical\">\n          <ds-tile-section>\n            <tile-header>\n              <header-title>\n                <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\n                Invoice #INV-2024-001\n              </header-title>\n              <header-actions>\n                <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Download</ds-button>\n                <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\n              </header-actions>\n            </tile-header>\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\n              <ds-data-item label=\"Client\" value=\"Acme Corporation\" layout=\"vertical\" />\n              <ds-data-item label=\"Issue Date\" value=\"2024-03-01\" layout=\"vertical\" />\n              <ds-data-item label=\"Due Date\" value=\"2024-03-31\" layout=\"vertical\" />\n              <ds-data-item \n                label=\"Status\" \n                value=\"Pending\" \n                valueType=\"badge\"\n                layout=\"vertical\"\n                badgeVariant=\"warning\"\n                badgeContent=\"Pending\" />\n            </div>\n          </ds-tile-section>\n          \n          <ds-tile-section [padding]=\"false\">\n            <ds-data-table \n              [data]=\"invoiceLines\" \n              [columns]=\"invoiceColumns\"\n              [searchable]=\"false\"\n              [showColumnVisibility]=\"false\"\n              [paginated]=\"false\">\n            </ds-data-table>\n          </ds-tile-section>\n          \n          <ds-tile-section>\n            <div style=\"display: flex; justify-content: flex-end; gap: 8px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Subtotal\" \n                  value=\"$4,598.83\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'ui-xs-regular'\"\n                  [valueClassName]=\"'ui-lg-medium'\" />\n              </div>\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Tax (10%)\" \n                  value=\"$459.88\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'ui-xs-regular'\"\n                  [valueClassName]=\"'ui-lg-medium'\" />\n              </div>\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Total\" \n                  value=\"$5,058.71\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'body-sm-semibold'\"\n                  [valueClassName]=\"'ui-lg-medium tw-text-brand'\" />\n              </div>\n            </div>\n          </ds-tile-section>\n        </ds-tile>\n      </div>\n    `,\n  }),\n};\n\nexport const ResponsiveLayout: Story = {\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <p style=\"margin: 0; font-size: 14px; color: var(--text-color-default-secondary);\">\n          Resize your browser to see the responsive behavior. Horizontal tiles stack vertically on mobile, \n          and section headers stack their title and actions.\n        </p>\n        \n        <ds-tile orientation=\"horizontal\">\n          <ds-tile-section>\n            <tile-header>\n              <header-title>Left Section</header-title>\n              <header-actions>\n                <ds-button size=\"sm\" variant=\"ghost\">Action</ds-button>\n              </header-actions>\n            </tile-header>\n            <p style=\"margin: 0;\">This section is on the left on desktop and stacks on top on mobile.</p>\n          </ds-tile-section>\n          \n          <ds-tile-section>\n            <tile-header>\n              <header-title>Right Section</header-title>\n              <header-actions>\n                <ds-button size=\"sm\">Action</ds-button>\n              </header-actions>\n            </tile-header>\n            <p style=\"margin: 0;\">This section is on the right on desktop and stacks below on mobile.</p>\n          </ds-tile-section>\n        </ds-tile>\n      </div>\n    `,\n  }),\n};\n\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "InvoiceLine-1"
        },
        {
            "name": "Product",
            "id": "interface-Product-9aaf0397b79012a4d28061145cb4780017d39247317579c0b89371b85b4273405358de1531e9e6b7c709d80619137fcc7c1874c3419c466bb62f547627a3b093",
            "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\nimport { DsDataTableComponent, type DsDataTableColumnMeta } from './ds-data-table';\nimport { DsBadgeComponent } from '../badge/ds-badge';\nimport { provideIcons } from '@ng-icons/core';\nimport { \n  remixSearchLine,\n  remixLayoutColumnLine,\n  remixCloseLine,\n  remixArrowUpLine,\n  remixArrowDownLine,\n  remixArrowUpDownLine,\n  remixInboxLine,\n  remixArrowLeftSLine,\n  remixArrowRightSLine,\n  remixEyeLine,\n  remixEditLine,\n  remixDeleteBinLine,\n  remixLoader4Line,\n} from '@ng-icons/remixicon';\nimport type { ColumnDef } from '@tanstack/angular-table';\nimport { signal } from '@angular/core';\n\n// Sample data types\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: string;\n  status: 'active' | 'inactive' | 'pending';\n  joinDate: string;\n}\n\ninterface Product {\n  id: number;\n  name: string;\n  category: string;\n  price: number;\n  stock: number;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\n}\n\n// Sample data\nconst sampleUsers: User[] = [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\n];\n\nconst sampleProducts: Product[] = [\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\n];\n\n// Column definitions\nconst userColumns: ColumnDef<User>[] = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px\n        maxWidth: 'lg',  // 256px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        active: 'success',\n        inactive: 'grey',\n        pending: 'warning',\n      };\n      const variant = variantMap[status] || 'grey';\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n];\n\nconst productColumns: ColumnDef<Product>[] = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const price = info.getValue() as number;\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\n    },\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const stock = info.getValue() as number;\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\n    },\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        in_stock: 'success',\n        low_stock: 'warning',\n        out_of_stock: 'destructive',\n      };\n      const variant = variantMap[status] || 'grey';\n      const label = status.replace('_', ' ').toUpperCase();\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\n    },\n  },\n];\n\n// Columns with actions\nconst userColumnsWithActions: ColumnDef<User>[] = [\n  ...userColumns,\n  {\n    id: 'actions',\n    header: 'Actions',\n    enableSorting: false,\n    enableHiding: false,\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      return `\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\n            title=\"Edit\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n            </svg>\n          </button>\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\n            title=\"Delete\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n            </svg>\n          </button>\n        </div>\n      `;\n    },\n  },\n];\n\nconst meta: Meta<DsDataTableComponent> = {\n  title: 'Components/Data Table',\n  component: DsDataTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixArrowUpDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n          remixEyeLine,\n          remixEditLine,\n          remixDeleteBinLine,\n          remixLoader4Line,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display in the table',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    searchable: {\n      control: 'boolean',\n      description: 'Enable global search functionality',\n    },\n    searchPlaceholder: {\n      control: 'text',\n      description: 'Placeholder text for search input',\n    },\n    paginated: {\n      control: 'boolean',\n      description: 'Enable pagination',\n    },\n    pageSize: {\n      control: 'number',\n      description: 'Number of rows per page',\n    },\n    showColumnVisibility: {\n      control: 'boolean',\n      description: 'Show column visibility toggle',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    rowClickable: {\n      control: 'boolean',\n      description: 'Make rows clickable',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsDataTableComponent>;\n\nexport const Default: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\n      },\n    },\n  },\n};\n\nexport const Products: Story = {\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    searchPlaceholder: 'Search products...',\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\n      },\n    },\n  },\n};\n\nexport const WithActions: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n    rowClickable: false,\n  },\n};\n\nexport const WithoutSearch: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: false,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n};\n\nexport const WithoutPagination: Story = {\n  args: {\n    data: sampleUsers.slice(0, 5),\n    columns: userColumns,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n};\n\nexport const LargeDataset: Story = {\n  args: {\n    data: Array.from({ length: 100 }, (_, i) => ({\n      id: i + 1,\n      name: `User ${i + 1}`,\n      email: `user${i + 1}@example.com`,\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\n    })),\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    pageSizeOptions: [10, 25, 50, 100],\n    showColumnVisibility: true,\n  },\n};\n\nexport const EmptyState: Story = {\n  args: {\n    data: [],\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    emptyMessage: 'No users found',\n  },\n};\n\nexport const ClickableRows: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    rowClickable: true,\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      onRowClicked: (row: User) => {\n        alert(`Clicked on: ${row.name}`);\n      },\n    },\n    template: `\n      <ds-data-table\n        [data]=\"data\"\n        [columns]=\"columns\"\n        [searchable]=\"searchable\"\n        [paginated]=\"paginated\"\n        [pageSize]=\"pageSize\"\n        [rowClickable]=\"rowClickable\"\n        (rowClicked)=\"onRowClicked($event)\"\n      />\n    `,\n  }),\n};\n\nexport const CompactView: Story = {\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    showColumnVisibility: false,\n  },\n};\n\n// Column sizing example\nconst userColumnsWithSizing: ColumnDef<User>[] = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px - narrow fixed width\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px minimum\n        maxWidth: 'lg',  // 256px maximum\n        truncate: true,  // Show ellipsis\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email Address (Very Long Header Name)',\n    meta: {\n      sizing: {\n        maxWidth: '300px', // Custom pixel value\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        minWidth: 'xs',\n        maxWidth: 'sm',\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        minWidth: 'sm',\n        maxWidth: 'md',\n        truncate: false, // Allow wrapping instead of truncating\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const statusColors: Record<string, string> = {\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n      };\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n];\n\nexport const WithColumnSizing: Story = {\n  args: {\n    data: [\n      ...sampleUsers.slice(0, 3),\n      // Add some users with very long content to demonstrate truncation\n      {\n        id: 11,\n        name: 'Alexandra Maximillian Constantine',\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\n        role: 'SuperAdmin',\n        status: 'active' as const,\n        joinDate: '2023-11-01',\n      },\n      {\n        id: 12,\n        name: 'Benjamin Christopher Wellington',\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\n        role: 'Editor',\n        status: 'pending' as const,\n        joinDate: '2023-12-15',\n      },\n    ],\n    columns: userColumnsWithSizing,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Advanced column sizing demonstration showing:\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\n- **Text truncation** with ellipsis (default when maxWidth is set)\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\n\nTry resizing the browser to see how columns behave with long content.`,\n      },\n    },\n  },\n};\n\nexport const WithColumnManagement: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 8,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\n- **Persistent State**: Selected columns are reflected with checkmarks\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\n\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\n      },\n    },\n  },\n};\n\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"in_stock\" | \"low_stock\" | \"out_of_stock\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Product",
            "id": "interface-Product-5615bdef278506c0abaf8e39c97cb6ec22d4300dc11ba4fbcb086f084791754a707b675681d4e93bff54f571c8812276f2084353f6715d00451ec12990c7694a-1",
            "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\nimport { signal } from '@angular/core';\nimport { DsEditableTableComponent, type DsEditableTableColumnMeta } from './ds-editable-table';\nimport { editableTextCell, editableNumberCell, editableSelectCell } from './editable-cell-helpers';\nimport { provideIcons } from '@ng-icons/core';\nimport { \n  remixAddLine,\n  remixDeleteBinLine,\n  remixDraggable,\n  remixInboxLine,\n  remixArrowUpLine,\n  remixArrowDownLine,\n} from '@ng-icons/remixicon';\nimport type { ColumnDef } from '@tanstack/angular-table';\n\n// Sample data types\ninterface InvoiceLine {\n  id: string;\n  name: string;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  discount: number;\n  total: number;\n}\n\ninterface Product {\n  id: string;\n  name: string;\n  sku: string;\n  category: string;\n  price: number;\n  stock: number;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  assignee: string;\n  priority: string;\n  status: string;\n  dueDate: string;\n}\n\n// Sample data\nconst sampleInvoiceLines: InvoiceLine[] = [\n  { \n    id: '1', \n    name: 'Administration fee', \n    description: 'Covers handling and coordination', \n    quantity: 1, \n    unitPrice: 500, \n    discount: 0, \n    total: 500 \n  },\n  { \n    id: '2', \n    name: 'Miscellaneous', \n    description: 'Various small items', \n    quantity: 2, \n    unitPrice: 400, \n    discount: 0, \n    total: 800 \n  },\n  { \n    id: '3', \n    name: 'Technical Manager', \n    description: 'Consulting services', \n    quantity: 6.5, \n    unitPrice: 800, \n    discount: 0, \n    total: 5200 \n  },\n];\n\nconst sampleProducts: Product[] = [\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\n];\n\nconst sampleTasks: Task[] = [\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\n];\n\n// Priority options for select\nconst priorityOptions = [\n  { id: 'low', label: 'Low', value: 'Low' },\n  { id: 'medium', label: 'Medium', value: 'Medium' },\n  { id: 'high', label: 'High', value: 'High' },\n];\n\n// Status options for select\nconst statusOptions = [\n  { id: 'todo', label: 'To Do', value: 'To Do' },\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\n  { id: 'done', label: 'Done', value: 'Done' },\n];\n\n// Category options for select\nconst categoryOptions = [\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\n  { id: 'office', label: 'Office', value: 'Office' },\n];\n\n// Column definitions\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'description',\n    header: 'Description',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Add description...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n        maxWidth: 'xl',\n        truncate: true,\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'quantity',\n    header: 'Quantity',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.5,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'unitPrice',\n    header: 'Unit Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'discount',\n    header: 'Discount',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'total',\n    header: 'Total',\n    cell: (info) => info.getValue(),\n    enableSorting: true,\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst productColumns: ColumnDef<Product>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter product name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'sku',\n    header: 'SKU',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'SKU-000'\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: categoryOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 1,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst taskColumns: ColumnDef<Task>[] = [\n  {\n    accessorKey: 'title',\n    header: 'Task',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter task title...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'assignee',\n    header: 'Assignee',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Assign to...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'priority',\n    header: 'Priority',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: priorityOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: statusOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'dueDate',\n    header: 'Due Date',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst meta: Meta<DsEditableTableComponent> = {\n  title: 'Components/Editable Table',\n  component: DsEditableTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixDeleteBinLine,\n          remixDraggable,\n          remixInboxLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display and edit (two-way binding)',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    reorderable: {\n      control: 'boolean',\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\n    },\n    allowAddRow: {\n      control: 'boolean',\n      description: 'Allow adding new rows',\n    },\n    allowDeleteRow: {\n      control: 'boolean',\n      description: 'Allow deleting rows',\n    },\n    showDragHandle: {\n      control: 'boolean',\n      description: 'Show drag handle column (only when reorderable is true)',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    addRowButtonText: {\n      control: 'text',\n      description: 'Text for add row button',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsEditableTableComponent>;\n\nexport const InvoiceLinesReorderable: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceData: signal([...sampleInvoiceLines]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: 'Add description',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"invoiceData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [showDragHandle]=\"true\"\n        [addRowButtonText]=\"'Add invoice line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\n      },\n    },\n  },\n};\n\nexport const ProductsSortable: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      productData: signal([...sampleProducts]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        sku: '',\n        category: 'Electronics',\n        price: 0,\n        stock: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onSortingChanged: (sorting: any) => {\n        console.log('Sorting changed:', sorting);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"productData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add product'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (sortingChanged)=\"onSortingChanged($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\n      },\n    },\n  },\n};\n\nexport const TasksWithSelects: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      taskData: signal([...sampleTasks]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        title: '',\n        assignee: '',\n        priority: 'Medium',\n        status: 'To Do',\n        dueDate: ''\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"taskData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add task'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: taskColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\n      },\n    },\n  },\n};\n\nexport const EmptyState: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      emptyData: signal([]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: '',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onRowAdded: (row: any) => {\n        console.log('First row added:', row);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"emptyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [emptyMessage]=\"'No invoice lines yet'\"\n        [addRowButtonText]=\"'Add first line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (rowAdded)=\"onRowAdded($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\n      },\n    },\n  },\n};\n\nexport const NoDeleteAllowed: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      lockedData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"lockedData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"false\"\n        [addRowButtonText]=\"'Add line'\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\n      },\n    },\n  },\n};\n\nexport const NoDragHandle: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      noDragData: signal([...sampleProducts]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"noDragData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [showDragHandle]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\n      },\n    },\n  },\n};\n\nexport const ReadOnlyMode: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      readOnlyData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"readOnlyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"false\"\n        [allowDeleteRow]=\"false\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\n      },\n    },\n  },\n};\n\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sku",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Product-1"
        },
        {
            "name": "Task",
            "id": "interface-Task-5615bdef278506c0abaf8e39c97cb6ec22d4300dc11ba4fbcb086f084791754a707b675681d4e93bff54f571c8812276f2084353f6715d00451ec12990c7694a",
            "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\nimport { signal } from '@angular/core';\nimport { DsEditableTableComponent, type DsEditableTableColumnMeta } from './ds-editable-table';\nimport { editableTextCell, editableNumberCell, editableSelectCell } from './editable-cell-helpers';\nimport { provideIcons } from '@ng-icons/core';\nimport { \n  remixAddLine,\n  remixDeleteBinLine,\n  remixDraggable,\n  remixInboxLine,\n  remixArrowUpLine,\n  remixArrowDownLine,\n} from '@ng-icons/remixicon';\nimport type { ColumnDef } from '@tanstack/angular-table';\n\n// Sample data types\ninterface InvoiceLine {\n  id: string;\n  name: string;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  discount: number;\n  total: number;\n}\n\ninterface Product {\n  id: string;\n  name: string;\n  sku: string;\n  category: string;\n  price: number;\n  stock: number;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  assignee: string;\n  priority: string;\n  status: string;\n  dueDate: string;\n}\n\n// Sample data\nconst sampleInvoiceLines: InvoiceLine[] = [\n  { \n    id: '1', \n    name: 'Administration fee', \n    description: 'Covers handling and coordination', \n    quantity: 1, \n    unitPrice: 500, \n    discount: 0, \n    total: 500 \n  },\n  { \n    id: '2', \n    name: 'Miscellaneous', \n    description: 'Various small items', \n    quantity: 2, \n    unitPrice: 400, \n    discount: 0, \n    total: 800 \n  },\n  { \n    id: '3', \n    name: 'Technical Manager', \n    description: 'Consulting services', \n    quantity: 6.5, \n    unitPrice: 800, \n    discount: 0, \n    total: 5200 \n  },\n];\n\nconst sampleProducts: Product[] = [\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\n];\n\nconst sampleTasks: Task[] = [\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\n];\n\n// Priority options for select\nconst priorityOptions = [\n  { id: 'low', label: 'Low', value: 'Low' },\n  { id: 'medium', label: 'Medium', value: 'Medium' },\n  { id: 'high', label: 'High', value: 'High' },\n];\n\n// Status options for select\nconst statusOptions = [\n  { id: 'todo', label: 'To Do', value: 'To Do' },\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\n  { id: 'done', label: 'Done', value: 'Done' },\n];\n\n// Category options for select\nconst categoryOptions = [\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\n  { id: 'office', label: 'Office', value: 'Office' },\n];\n\n// Column definitions\nconst invoiceColumns: ColumnDef<InvoiceLine>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'description',\n    header: 'Description',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Add description...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n        maxWidth: 'xl',\n        truncate: true,\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'quantity',\n    header: 'Quantity',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.5,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'unitPrice',\n    header: 'Unit Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'discount',\n    header: 'Discount',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'total',\n    header: 'Total',\n    cell: (info) => info.getValue(),\n    enableSorting: true,\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst productColumns: ColumnDef<Product>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter product name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'sku',\n    header: 'SKU',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'SKU-000'\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: categoryOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 1,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst taskColumns: ColumnDef<Task>[] = [\n  {\n    accessorKey: 'title',\n    header: 'Task',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter task title...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'assignee',\n    header: 'Assignee',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Assign to...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'priority',\n    header: 'Priority',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: priorityOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: statusOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'dueDate',\n    header: 'Due Date',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n];\n\nconst meta: Meta<DsEditableTableComponent> = {\n  title: 'Components/Editable Table',\n  component: DsEditableTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixDeleteBinLine,\n          remixDraggable,\n          remixInboxLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display and edit (two-way binding)',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    reorderable: {\n      control: 'boolean',\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\n    },\n    allowAddRow: {\n      control: 'boolean',\n      description: 'Allow adding new rows',\n    },\n    allowDeleteRow: {\n      control: 'boolean',\n      description: 'Allow deleting rows',\n    },\n    showDragHandle: {\n      control: 'boolean',\n      description: 'Show drag handle column (only when reorderable is true)',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    addRowButtonText: {\n      control: 'text',\n      description: 'Text for add row button',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsEditableTableComponent>;\n\nexport const InvoiceLinesReorderable: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceData: signal([...sampleInvoiceLines]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: 'Add description',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"invoiceData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [showDragHandle]=\"true\"\n        [addRowButtonText]=\"'Add invoice line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\n      },\n    },\n  },\n};\n\nexport const ProductsSortable: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      productData: signal([...sampleProducts]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        sku: '',\n        category: 'Electronics',\n        price: 0,\n        stock: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onSortingChanged: (sorting: any) => {\n        console.log('Sorting changed:', sorting);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"productData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add product'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (sortingChanged)=\"onSortingChanged($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\n      },\n    },\n  },\n};\n\nexport const TasksWithSelects: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      taskData: signal([...sampleTasks]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        title: '',\n        assignee: '',\n        priority: 'Medium',\n        status: 'To Do',\n        dueDate: ''\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"taskData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add task'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: taskColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\n      },\n    },\n  },\n};\n\nexport const EmptyState: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      emptyData: signal([]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: '',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onRowAdded: (row: any) => {\n        console.log('First row added:', row);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"emptyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [emptyMessage]=\"'No invoice lines yet'\"\n        [addRowButtonText]=\"'Add first line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (rowAdded)=\"onRowAdded($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\n      },\n    },\n  },\n};\n\nexport const NoDeleteAllowed: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      lockedData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"lockedData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"false\"\n        [addRowButtonText]=\"'Add line'\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\n      },\n    },\n  },\n};\n\nexport const NoDragHandle: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      noDragData: signal([...sampleProducts]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"noDragData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [showDragHandle]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\n      },\n    },\n  },\n};\n\nexport const ReadOnlyMode: Story = {\n  render: (args) => ({\n    props: {\n      ...args,\n      readOnlyData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"readOnlyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"false\"\n        [allowDeleteRow]=\"false\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\n      },\n    },\n  },\n};\n\n",
            "properties": [
                {
                    "name": "assignee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-9aaf0397b79012a4d28061145cb4780017d39247317579c0b89371b85b4273405358de1531e9e6b7c709d80619137fcc7c1874c3419c466bb62f547627a3b093",
            "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj, applicationConfig } from '@storybook/angular';\nimport { DsDataTableComponent, type DsDataTableColumnMeta } from './ds-data-table';\nimport { DsBadgeComponent } from '../badge/ds-badge';\nimport { provideIcons } from '@ng-icons/core';\nimport { \n  remixSearchLine,\n  remixLayoutColumnLine,\n  remixCloseLine,\n  remixArrowUpLine,\n  remixArrowDownLine,\n  remixArrowUpDownLine,\n  remixInboxLine,\n  remixArrowLeftSLine,\n  remixArrowRightSLine,\n  remixEyeLine,\n  remixEditLine,\n  remixDeleteBinLine,\n  remixLoader4Line,\n} from '@ng-icons/remixicon';\nimport type { ColumnDef } from '@tanstack/angular-table';\nimport { signal } from '@angular/core';\n\n// Sample data types\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: string;\n  status: 'active' | 'inactive' | 'pending';\n  joinDate: string;\n}\n\ninterface Product {\n  id: number;\n  name: string;\n  category: string;\n  price: number;\n  stock: number;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\n}\n\n// Sample data\nconst sampleUsers: User[] = [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\n];\n\nconst sampleProducts: Product[] = [\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\n];\n\n// Column definitions\nconst userColumns: ColumnDef<User>[] = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px\n        maxWidth: 'lg',  // 256px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        active: 'success',\n        inactive: 'grey',\n        pending: 'warning',\n      };\n      const variant = variantMap[status] || 'grey';\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n];\n\nconst productColumns: ColumnDef<Product>[] = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const price = info.getValue() as number;\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\n    },\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const stock = info.getValue() as number;\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\n    },\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        in_stock: 'success',\n        low_stock: 'warning',\n        out_of_stock: 'destructive',\n      };\n      const variant = variantMap[status] || 'grey';\n      const label = status.replace('_', ' ').toUpperCase();\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\n    },\n  },\n];\n\n// Columns with actions\nconst userColumnsWithActions: ColumnDef<User>[] = [\n  ...userColumns,\n  {\n    id: 'actions',\n    header: 'Actions',\n    enableSorting: false,\n    enableHiding: false,\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      return `\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\n            title=\"Edit\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n            </svg>\n          </button>\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\n            title=\"Delete\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n            </svg>\n          </button>\n        </div>\n      `;\n    },\n  },\n];\n\nconst meta: Meta<DsDataTableComponent> = {\n  title: 'Components/Data Table',\n  component: DsDataTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixArrowUpDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n          remixEyeLine,\n          remixEditLine,\n          remixDeleteBinLine,\n          remixLoader4Line,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display in the table',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    searchable: {\n      control: 'boolean',\n      description: 'Enable global search functionality',\n    },\n    searchPlaceholder: {\n      control: 'text',\n      description: 'Placeholder text for search input',\n    },\n    paginated: {\n      control: 'boolean',\n      description: 'Enable pagination',\n    },\n    pageSize: {\n      control: 'number',\n      description: 'Number of rows per page',\n    },\n    showColumnVisibility: {\n      control: 'boolean',\n      description: 'Show column visibility toggle',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    rowClickable: {\n      control: 'boolean',\n      description: 'Make rows clickable',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<DsDataTableComponent>;\n\nexport const Default: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\n      },\n    },\n  },\n};\n\nexport const Products: Story = {\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    searchPlaceholder: 'Search products...',\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\n      },\n    },\n  },\n};\n\nexport const WithActions: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n    rowClickable: false,\n  },\n};\n\nexport const WithoutSearch: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: false,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n};\n\nexport const WithoutPagination: Story = {\n  args: {\n    data: sampleUsers.slice(0, 5),\n    columns: userColumns,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n};\n\nexport const LargeDataset: Story = {\n  args: {\n    data: Array.from({ length: 100 }, (_, i) => ({\n      id: i + 1,\n      name: `User ${i + 1}`,\n      email: `user${i + 1}@example.com`,\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\n    })),\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    pageSizeOptions: [10, 25, 50, 100],\n    showColumnVisibility: true,\n  },\n};\n\nexport const EmptyState: Story = {\n  args: {\n    data: [],\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    emptyMessage: 'No users found',\n  },\n};\n\nexport const ClickableRows: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    rowClickable: true,\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      onRowClicked: (row: User) => {\n        alert(`Clicked on: ${row.name}`);\n      },\n    },\n    template: `\n      <ds-data-table\n        [data]=\"data\"\n        [columns]=\"columns\"\n        [searchable]=\"searchable\"\n        [paginated]=\"paginated\"\n        [pageSize]=\"pageSize\"\n        [rowClickable]=\"rowClickable\"\n        (rowClicked)=\"onRowClicked($event)\"\n      />\n    `,\n  }),\n};\n\nexport const CompactView: Story = {\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    showColumnVisibility: false,\n  },\n};\n\n// Column sizing example\nconst userColumnsWithSizing: ColumnDef<User>[] = [\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px - narrow fixed width\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px minimum\n        maxWidth: 'lg',  // 256px maximum\n        truncate: true,  // Show ellipsis\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email Address (Very Long Header Name)',\n    meta: {\n      sizing: {\n        maxWidth: '300px', // Custom pixel value\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        minWidth: 'xs',\n        maxWidth: 'sm',\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        minWidth: 'sm',\n        maxWidth: 'md',\n        truncate: false, // Allow wrapping instead of truncating\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const statusColors: Record<string, string> = {\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n      };\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n];\n\nexport const WithColumnSizing: Story = {\n  args: {\n    data: [\n      ...sampleUsers.slice(0, 3),\n      // Add some users with very long content to demonstrate truncation\n      {\n        id: 11,\n        name: 'Alexandra Maximillian Constantine',\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\n        role: 'SuperAdmin',\n        status: 'active' as const,\n        joinDate: '2023-11-01',\n      },\n      {\n        id: 12,\n        name: 'Benjamin Christopher Wellington',\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\n        role: 'Editor',\n        status: 'pending' as const,\n        joinDate: '2023-12-15',\n      },\n    ],\n    columns: userColumnsWithSizing,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Advanced column sizing demonstration showing:\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\n- **Text truncation** with ellipsis (default when maxWidth is set)\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\n\nTry resizing the browser to see how columns behave with long content.`,\n      },\n    },\n  },\n};\n\nexport const WithColumnManagement: Story = {\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 8,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\n- **Persistent State**: Selected columns are reflected with checkmarks\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\n\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\n      },\n    },\n  },\n};\n\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"active\" | \"inactive\" | \"pending\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "DebugWrapperComponent",
            "id": "component-DebugWrapperComponent-036c13a7c5c638d858c3f5992ed660d699e6f2ca1a89b960027fab2cee289587e1be014ab790f7b108bfb4096f12285baeebc16ab29239a9dbf9fabd1f89e18f",
            "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ds-debug-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [isMobileOverride]=\"isMobileOverride\"\n  [isSidebarCollapsed]=\"isSidebarCollapsed\"\n  [pageTitle]=\"'Page Title'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n  [showFirstAction]=\"true\"\n  [firstActionIcon]=\"'remixNotification3Line'\"\n  [firstActionLabel]=\"'Notifications'\"\n  [showSecondAction]=\"true\"\n  [secondActionIcon]=\"'remixSettings3Line'\"\n  [secondActionLabel]=\"'Settings'\"\n  (menuOpenChange)=\"handleMenuOpenChange($event)\"\n  (collapsedChange)=\"handleCollapsedChange($event)\"\n>\n  <div style=\"padding: 24px;\">\n    <div style=\"max-width: 64rem; margin: 0 auto;\">\n      <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Main Content Area</h2>\n      <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This is where your main content would go. The layout handles the responsive behavior automatically.</p>\n\n      <div style=\"margin-bottom: 48px;\">\n        <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n          <span class=\"ui-sm-medium\">Debug Information</span>\n          <div style=\"margin-top: 16px;\">\n            <ds-data-item\n              [label]=\"'Window width'\"\n              [value]=\"windowWidth + 'px'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n            <ds-data-item\n              [label]=\"'Is Mobile'\"\n              [value]=\"isMobile() ? 'True' : 'False'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n            <ds-data-item\n              [label]=\"'Menu Open'\"\n              [value]=\"menuOpen ? 'True' : 'False'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n            <ds-data-item\n              [label]=\"'Sidebar Collapsed'\"\n              [value]=\"isSidebarCollapsed ? 'True' : 'False'\"\n              [layout]=\"'horizontal'\"\n              [valueType]=\"'text'\"\n            ></ds-data-item>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ds-app-layout>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isMobile",
                    "defaultValue": "computed(() => this.viewportService.isMobile())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "isMobileOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isSidebarCollapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "resizeTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidebarGroups",
                    "defaultValue": "demoGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "windowWidth",
                    "defaultValue": "typeof window !== 'undefined' ? window.innerWidth : 0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCollapsedChange",
                    "args": [
                        {
                            "name": "isCollapsed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isCollapsed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMenuOpenChange",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "DsAppLayoutComponent",
                    "type": "component"
                },
                {
                    "name": "DsDataItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\nimport { Component, HostListener, OnDestroy, computed } from '@angular/core';\nimport { DsAppLayoutComponent } from './ds-app-layout';\nimport { DsDataItemComponent } from '../data-item/ds-data-item';\nimport { ViewportService } from '../../../lib/viewport.service';\nimport { demoGroups } from '../sidebar/demo-data';\n\n@Component({\n  selector: 'ds-debug-wrapper',\n  standalone: true,\n  imports: [DsAppLayoutComponent, DsDataItemComponent],\n  // ViewportService is now provided at the module level\n  template: `\n    <ds-app-layout\n      [sidebarGroups]=\"sidebarGroups\"\n      [isMobileOverride]=\"isMobileOverride\"\n      [isSidebarCollapsed]=\"isSidebarCollapsed\"\n      [pageTitle]=\"'Page Title'\"\n      [iconName]=\"'remixHome4Line'\"\n      [userInitials]=\"'JD'\"\n      [showFirstAction]=\"true\"\n      [firstActionIcon]=\"'remixNotification3Line'\"\n      [firstActionLabel]=\"'Notifications'\"\n      [showSecondAction]=\"true\"\n      [secondActionIcon]=\"'remixSettings3Line'\"\n      [secondActionLabel]=\"'Settings'\"\n      (menuOpenChange)=\"handleMenuOpenChange($event)\"\n      (collapsedChange)=\"handleCollapsedChange($event)\"\n    >\n      <div style=\"padding: 24px;\">\n        <div style=\"max-width: 64rem; margin: 0 auto;\">\n          <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Main Content Area</h2>\n          <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This is where your main content would go. The layout handles the responsive behavior automatically.</p>\n          \n          <div style=\"margin-bottom: 48px;\">\n            <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n              <span class=\"ui-sm-medium\">Debug Information</span>\n              <div style=\"margin-top: 16px;\">\n                <ds-data-item \n                  [label]=\"'Window width'\" \n                  [value]=\"windowWidth + 'px'\" \n                  [layout]=\"'horizontal'\" \n                  [valueType]=\"'text'\"\n                ></ds-data-item>\n                <ds-data-item \n                  [label]=\"'Is Mobile'\" \n                  [value]=\"isMobile() ? 'True' : 'False'\" \n                  [layout]=\"'horizontal'\" \n                  [valueType]=\"'text'\"\n                ></ds-data-item>\n                <ds-data-item \n                  [label]=\"'Menu Open'\" \n                  [value]=\"menuOpen ? 'True' : 'False'\" \n                  [layout]=\"'horizontal'\" \n                  [valueType]=\"'text'\"\n                ></ds-data-item>\n                <ds-data-item \n                  [label]=\"'Sidebar Collapsed'\" \n                  [value]=\"isSidebarCollapsed ? 'True' : 'False'\" \n                  [layout]=\"'horizontal'\" \n                  [valueType]=\"'text'\"\n                ></ds-data-item>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ds-app-layout>\n  `\n})\nclass DebugWrapperComponent implements OnDestroy {\n  sidebarGroups = demoGroups;\n  isMobileOverride?: boolean;\n  isSidebarCollapsed = false;\n  windowWidth = typeof window !== 'undefined' ? window.innerWidth : 0;\n  menuOpen = false;\n\n  constructor(private viewportService: ViewportService) {}\n\n  isMobile = computed(() => this.viewportService.isMobile());\n\n  private resizeTimeout: any;\n\n  @HostListener('window:resize')\n  onResize() {\n    // Debounce resize updates\n    if (this.resizeTimeout) {\n      clearTimeout(this.resizeTimeout);\n    }\n    this.resizeTimeout = setTimeout(() => {\n      this.windowWidth = window.innerWidth;\n    }, 100);\n  }\n\n  handleMenuOpenChange(isOpen: boolean) {\n    this.menuOpen = isOpen;\n  }\n\n  handleCollapsedChange(isCollapsed: boolean) {\n    this.isSidebarCollapsed = isCollapsed;\n  }\n\n  ngOnDestroy() {\n    if (this.resizeTimeout) {\n      clearTimeout(this.resizeTimeout);\n    }\n  }\n}\n\nconst meta: Meta<DsAppLayoutComponent> = {\n  title: 'Application shell/App Layout',\n  component: DsAppLayoutComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DebugWrapperComponent],\n      providers: [ViewportService]\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe main application layout component that provides a responsive shell with sidebar navigation, topbar, and content area. Automatically adapts between mobile and desktop modes based on viewport size.\n\n## Features\n\n- **Responsive Design**: Automatically switches between mobile drawer and desktop sidebar at 992px breakpoint\n- **Collapsible Sidebar**: Desktop sidebar can be collapsed from 256px to 80px width\n- **Mobile Drawer**: Slide-in navigation drawer with overlay on mobile devices\n- **Sticky Topbar**: Page header remains visible while scrolling content\n- **Integrated Subcomponents**: Both sidebar and topbar are automatically rendered and configured via props\n- **Content Projection**: Default slot for main page content\n- **Smooth Transitions**: Animated sidebar collapse/expand and mobile drawer\n- **Viewport Service**: Automatic mobile detection or manual override for testing\n\n## Architecture\n\nThe component automatically renders both **sidebar** and **topbar** - you don't need to project them as children. Just configure them via props and project your main content.\n\n### Built-in Subcomponents\n\n1. **Sidebar** - Navigation component (always rendered)\n2. **Topbar** - Page header component (always rendered)\n3. **Main Content** - Your page content (via default slot)\n\n## Content Projection\n\nThe component has a **single default slot** for main page content:\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"groups\"\n  [pageTitle]=\"'Dashboard'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n>\n  <!-- Your main content goes here -->\n  <div class=\"content-container\">\n    <h1>Page Content</h1>\n  </div>\n</ds-app-layout>\n\\`\\`\\`\n\n## Props\n\n### Sidebar Configuration\n- \\`sidebarGroups\\`: Array of navigation groups with items\n- \\`isSidebarCollapsed\\`: Control collapsed state (desktop only)\n- \\`activeItemId\\`: Currently active navigation item\n\n**Group Structure:**\n\\`\\`\\`typescript\n{\n  id: 'group-id',\n  label: 'GROUP LABEL',\n  items: [\n    { \n      id: 'item-id', \n      label: 'Item Label', \n      icon: 'remixIconName',\n      badgeText?: '5' // Optional badge\n    }\n  ]\n}\n\\`\\`\\`\n\n### Topbar Configuration\n- \\`pageTitle\\`: The page title text\n- \\`iconName\\`: Icon to display next to the title\n- \\`userInitials\\`: User avatar initials\n- \\`showBreadcrumbs\\`: Enable breadcrumb navigation (default: false)\n- \\`breadcrumbItems\\`: Array of breadcrumb items\n- \\`showFirstAction\\`: Show first action button (default: true)\n- \\`firstActionIcon\\`: Icon for first action (default: 'remixNotification3Line')\n- \\`firstActionLabel\\`: Aria label for first action (default: 'Notifications')\n- \\`showSecondAction\\`: Show second action button (default: true)\n- \\`secondActionIcon\\`: Icon for second action (default: 'remixSettings3Line')\n- \\`secondActionLabel\\`: Aria label for second action (default: 'Settings')\n\n### Layout Configuration\n- \\`isMobileOverride\\`: Override automatic mobile detection for testing\n\n## Events\n\n- \\`(collapsedChange)\\`: Emits when desktop sidebar is collapsed/expanded\n- \\`(menuOpenChange)\\`: Emits when mobile drawer is opened/closed\n\n## Layout Behavior\n\n### Desktop Mode (≥ 992px)\n- Persistent sidebar on the left (256px expanded, 80px collapsed)\n- Grid layout: \\`auto minmax(0, 1fr)\\`\n- Sidebar collapse toggle available\n- Main content adjusts width automatically\n\n### Mobile Mode (< 992px)\n- Minimized sidebar header (64px height) at the top\n- Hamburger menu button to open drawer\n- Full sidebar appears as overlay drawer from left\n- Semi-transparent backdrop overlay\n- Body scroll locked when drawer is open\n\n## Usage Example\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [isSidebarCollapsed]=\"isSidebarCollapsed()\"\n  [activeItemId]=\"'dashboard'\"\n  [pageTitle]=\"'Dashboard'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n  [showFirstAction]=\"true\"\n  [firstActionIcon]=\"'remixNotification3Line'\"\n  [showSecondAction]=\"true\"\n  [secondActionIcon]=\"'remixSettings3Line'\"\n  (collapsedChange)=\"isSidebarCollapsed.set($event)\"\n>\n  <!-- Main Content -->\n  <div class=\"content-container\">\n    <h1>Page Content</h1>\n    <p>Your content goes here...</p>\n  </div>\n</ds-app-layout>\n\\`\\`\\`\n\n### With Breadcrumbs\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [pageTitle]=\"'Property Details'\"\n  [iconName]=\"'remixBuilding2Line'\"\n  [showBreadcrumbs]=\"true\"\n  [breadcrumbItems]=\"[\n    { label: 'Properties', path: '/properties', isLast: false },\n    { label: 'Fælledgården Hub', path: '', isLast: true }\n  ]\"\n  [userInitials]=\"'JD'\"\n>\n  <!-- Content here -->\n</ds-app-layout>\n\\`\\`\\`\n\n## Viewport Testing\n\nUse the viewport toolbar above to test different screen sizes, or use the \\`isMobileOverride\\` prop to force mobile/desktop mode:\n\n\\`\\`\\`html\n<ds-app-layout\n  [isMobileOverride]=\"false\"  <!-- Force desktop mode -->\n  [sidebarGroups]=\"groups\"\n  [pageTitle]=\"'Dashboard'\"\n>\n\\`\\`\\`\n        `,\n      },\n    },\n    layout: 'fullscreen',\n    // Add viewport toolbar to allow easy resizing\n    viewport: {\n      defaultViewport: 'desktop',\n      viewports: {\n        mobile: {\n          name: 'Mobile',\n          styles: {\n            width: '375px',\n            height: '100%',\n          },\n        },\n        tablet: {\n          name: 'Tablet',\n          styles: {\n            width: '768px',\n            height: '100%',\n          },\n        },\n        desktop: {\n          name: 'Desktop',\n          styles: {\n            width: '1024px',\n            height: '100%',\n          },\n        },\n        'large-desktop': {\n          name: 'Large Desktop',\n          styles: {\n            width: '1440px',\n            height: '100%',\n          },\n        },\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<DsAppLayoutComponent>;\n\nexport const Default: Story = {\n  args: {\n    sidebarGroups: demoGroups,\n    isSidebarCollapsed: false,\n  },\n  render: () => ({\n    template: '<ds-debug-wrapper></ds-debug-wrapper>'\n  })\n};\n\nexport const InitiallyCollapsed: Story = {\n  args: {\n    sidebarGroups: demoGroups,\n    isMobileOverride: false, // Force desktop mode\n    isSidebarCollapsed: true,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Initially Collapsed'\"\n        [iconName]=\"'remixHome4Line'\"\n        [userInitials]=\"'JD'\"\n        [showFirstAction]=\"true\"\n        [firstActionIcon]=\"'remixNotification3Line'\"\n        [firstActionLabel]=\"'Notifications'\"\n        [showSecondAction]=\"true\"\n        [secondActionIcon]=\"'remixSettings3Line'\"\n        [secondActionLabel]=\"'Settings'\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Initially Collapsed Sidebar</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story demonstrates the sidebar starting in a collapsed state on desktop. Users can expand it using the collapse toggle button.</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Is Mobile'\" \n                    [value]=\"'False (Desktop mode forced)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Sidebar Collapsed'\" \n                    [value]=\"'True'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Note'\" \n                    [value]=\"'Click the collapse toggle to expand the sidebar'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n};\n\n// Debug story to test topbar in isolation\nexport const AutoResponsive: Story = {\n  args: {\n    sidebarGroups: demoGroups,\n    // No isMobileOverride - let ViewportService handle automatic detection\n    isSidebarCollapsed: false,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Auto Responsive'\"\n        [iconName]=\"'remixSmartphoneLine'\"\n        [userInitials]=\"'AR'\"\n        [showFirstAction]=\"true\"\n        [firstActionIcon]=\"'remixNotification3Line'\"\n        [firstActionLabel]=\"'Notifications'\"\n        [showSecondAction]=\"true\"\n        [secondActionIcon]=\"'remixSettings3Line'\"\n        [secondActionLabel]=\"'Settings'\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Auto-Responsive Layout</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This layout automatically detects your viewport size and switches between mobile and desktop modes at 992px breakpoint. Try resizing your browser window or using the viewport toolbar!</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Breakpoint'\" \n                    [value]=\"'992px'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Mobile Mode'\" \n                    [value]=\"'≤ 991px (drawer menu)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Desktop Mode'\" \n                    [value]=\"'≥ 992px (persistent sidebar)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Detection'\" \n                    [value]=\"'Automatic via ViewportService'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n};\n\nexport const TopbarDebug: Story = {\n  args: {\n    sidebarGroups: demoGroups,\n    isMobileOverride: false, // Force desktop mode\n    isSidebarCollapsed: false,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Debug Page'\"\n        [iconName]=\"'remixHome4Line'\"\n        [userInitials]=\"'DB'\"\n        [showFirstAction]=\"false\"\n        [showSecondAction]=\"false\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Topbar Debug</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story tests the topbar component with minimal props to ensure it renders correctly in the app layout.</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Topbar Slot'\" \n                    [value]=\"'Using slot=topbar attribute'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'First Action'\" \n                    [value]=\"'Hidden (showFirstAction=false)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Second Action'\" \n                    [value]=\"'Hidden (showSecondAction=false)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n};",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewportService",
                        "type": "ViewportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "viewportService",
                        "type": "ViewportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ]
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "ActionMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    items: [\n      { id: '1', label: 'View Details', icon: 'remixEyeLine' },\n      { id: '2', label: 'Edit Properties', icon: 'remixEditLine' },\n      { id: 'sep1', label: '', separator: true },\n      { id: '3', label: 'Make a Copy', icon: 'remixFileCopyLine' },\n      { id: '4', label: 'Move to...', icon: 'remixFolderTransferLine' },\n      { id: '5', label: 'Add to Favorites', icon: 'remixStarLine' },\n      { id: 'sep2', label: '', separator: true },\n      { id: '6', label: 'Remove', icon: 'remixDeleteBinLine', destructive: true },\n    ],\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-icon-button icon=\"remixMore2Line\" variant=\"ghost\" ariaLabel=\"Item actions\" />\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsIconButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "ActiveItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { \n    activeItemId: 'inbox' \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [activeItemId]=\"activeItemId\" />\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AIProcessing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    messages: [\n      'Training AI model',\n      'Processing historical data',\n      'Generating predictions',\n      'Optimizing results',\n    ],\n    styleClass: 'body-sm-regular',\n  },\n}"
            },
            {
                "name": "AIVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\n          <span>Generate suggestions</span>\n        </ds-button>\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\n          <span>Generate suggestions</span>\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\n        <ds-spinner color=\"primary\" />\n        <ds-spinner color=\"secondary\" />\n        <ds-spinner color=\"tertiary\" />\n        <ds-spinner color=\"brand\" />\n        <ds-spinner color=\"success\" />\n        <ds-spinner color=\"warning\" />\n        <ds-spinner color=\"destructive\" />\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "AllColorVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <h3 style=\"margin: 0; font-size: 16px; font-weight: 600;\">All Badge Color Variants</h3>\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; max-width: 600px;\">\n          <ds-badge content=\"Default\" variant=\"default\"></ds-badge>\n          <ds-badge content=\"Brand\" variant=\"brand\"></ds-badge>\n          <ds-badge content=\"Success\" variant=\"success\"></ds-badge>\n          <ds-badge content=\"Warning\" variant=\"warning\"></ds-badge>\n          <ds-badge content=\"Destructive\" variant=\"destructive\"></ds-badge>\n          <ds-badge content=\"Blue\" variant=\"blue\"></ds-badge>\n          <ds-badge content=\"Light Purple\" variant=\"light-purple\"></ds-badge>\n          <ds-badge content=\"Pink\" variant=\"pink\"></ds-badge>\n          <ds-badge content=\"Salmon Orange\" variant=\"salmon-orange\"></ds-badge>\n          <ds-badge content=\"Orange\" variant=\"orange\"></ds-badge>\n          <ds-badge content=\"Lime Green\" variant=\"lime-green\"></ds-badge>\n          <ds-badge content=\"Grey\" variant=\"grey\"></ds-badge>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllShapes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Shape Variants (8x8px)</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\" label=\"Stage tags\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"triangle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"pentagon\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\n        <ds-spinner size=\"12px\" />\n        <ds-spinner size=\"16px\" />\n        <ds-spinner size=\"20px\" />\n        <ds-spinner size=\"24px\" />\n        <ds-spinner size=\"32px\" />\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "AllSizesAndVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 24px;\">\n        <div>\n          <h4>Small Size</h4>\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\n            <ds-checkbox size=\"sm\" variant=\"default\" label=\"Default small\"></ds-checkbox>\n            <ds-checkbox size=\"sm\" variant=\"success\" label=\"Success small\"></ds-checkbox>\n            <ds-checkbox size=\"sm\" variant=\"warning\" label=\"Warning small\"></ds-checkbox>\n            <ds-checkbox size=\"sm\" variant=\"error\" label=\"Error small\"></ds-checkbox>\n          </div>\n        </div>\n        \n        <div>\n          <h4>Medium Size</h4>\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\n            <ds-checkbox size=\"md\" variant=\"default\" label=\"Default medium\"></ds-checkbox>\n            <ds-checkbox size=\"md\" variant=\"success\" label=\"Success medium\"></ds-checkbox>\n            <ds-checkbox size=\"md\" variant=\"warning\" label=\"Warning medium\"></ds-checkbox>\n            <ds-checkbox size=\"md\" variant=\"error\" label=\"Error medium\"></ds-checkbox>\n          </div>\n        </div>\n        \n        <div>\n          <h4>Large Size</h4>\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\n            <ds-checkbox size=\"lg\" variant=\"default\" label=\"Default large\"></ds-checkbox>\n            <ds-checkbox size=\"lg\" variant=\"success\" label=\"Success large\"></ds-checkbox>\n            <ds-checkbox size=\"lg\" variant=\"warning\" label=\"Warning large\"></ds-checkbox>\n            <ds-checkbox size=\"lg\" variant=\"error\" label=\"Error large\"></ds-checkbox>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 2rem; align-items: start; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Initials (Always Round)</h3>\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\n            <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\n            <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\n            <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\n            <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Photo (Always Round)</h3>\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\n            <ds-avatar \n              type=\"photo\" \n              size=\"sm\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n            <ds-avatar \n              type=\"photo\" \n              size=\"md\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n            <ds-avatar \n              type=\"photo\" \n              size=\"lg\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n            <ds-avatar \n              type=\"photo\" \n              size=\"xl\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Icon (Brand Background + Depth)</h3>\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\n            <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\n            <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\n            <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\n            <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\n          </div>\n          <div style=\"font-size: 12px; color: var(--text-color-default-secondary);\">\n            6px → 8px → 12px → 16px radius<br/>\n            depth-sm → depth-sm → depth-md → depth-lg\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AutoResponsive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    // No isMobileOverride - let ViewportService handle automatic detection\n    isSidebarCollapsed: false,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Auto Responsive'\"\n        [iconName]=\"'remixSmartphoneLine'\"\n        [userInitials]=\"'AR'\"\n        [showFirstAction]=\"true\"\n        [firstActionIcon]=\"'remixNotification3Line'\"\n        [firstActionLabel]=\"'Notifications'\"\n        [showSecondAction]=\"true\"\n        [secondActionIcon]=\"'remixSettings3Line'\"\n        [secondActionLabel]=\"'Settings'\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Auto-Responsive Layout</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This layout automatically detects your viewport size and switches between mobile and desktop modes at 992px breakpoint. Try resizing your browser window or using the viewport toolbar!</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Breakpoint'\" \n                    [value]=\"'992px'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Mobile Mode'\" \n                    [value]=\"'≤ 991px (drawer menu)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Desktop Mode'\" \n                    [value]=\"'≥ 992px (persistent sidebar)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Detection'\" \n                    [value]=\"'Automatic via ViewportService'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list/ds-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-list>\n        <ds-list-item title=\"Review documentation changes\">\n          <div slot=\"metadata\">\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n          </div>\n          <div slot=\"actions\">\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n            <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\n          </div>\n        </ds-list-item>\n        <ds-list-item title=\"Update user settings\">\n          <div slot=\"metadata\">\n            <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to you\" />\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"1 day ago\" />\n          </div>\n          <div slot=\"actions\">\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n            <ds-button variant=\"primary\" size=\"sm\">Update</ds-button>\n          </div>\n        </ds-list-item>\n        <ds-list-item title=\"Deploy new features\">\n          <div slot=\"metadata\">\n            <ds-metadata-item icon=\"remixRocketLine\" value=\"Release\" variant=\"success\" />\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\n          </div>\n          <div slot=\"actions\">\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n            <ds-button variant=\"primary\" size=\"sm\">Deploy</ds-button>\n          </div>\n        </ds-list-item>\n      </ds-list>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Review documentation changes',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'remixTimeLine',\n    value: '4 hours ago',\n  },\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      value: signal('tab1'),\n    },\n    template: `\n      <ds-tabs [(value)]=\"value\">\n        <ds-tab value=\"tab1\" label=\"First Tab\">\n          <p>Content for first tab</p>\n        </ds-tab>\n        <ds-tab value=\"tab2\" label=\"Second Tab\">\n          <p>Content for second tab</p>\n        </ds-tab>\n        <ds-tab value=\"tab3\" label=\"Third Tab\">\n          <p>Content for third tab</p>\n        </ds-tab>\n      </ds-tabs>\n    `,\n  }),\n}"
            },
            {
                "name": "basicMenuItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsMenuItem[]",
                "defaultValue": "[\n  { id: '1', label: 'Edit', action: () => console.log('Edit clicked') },\n  { id: '2', label: 'Duplicate', action: () => console.log('Duplicate clicked') },\n  { id: '3', label: 'Archive', action: () => console.log('Archive clicked') },\n  { id: 'sep1', label: '', separator: true },\n  { id: '4', label: 'Delete', destructive: true, action: () => console.log('Delete clicked') },\n]"
            },
            {
                "name": "ButtonSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\n        <ds-tooltip text=\"Small button tooltip\">\n          <ds-button size=\"sm\" variant=\"primary\">Small</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Medium button tooltip\">\n          <ds-button size=\"md\" variant=\"secondary\">Medium</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Large button tooltip\">\n          <ds-button size=\"lg\" variant=\"ghost\">Large</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "categoryOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\n  { id: 'office', label: 'Office', value: 'Office' },\n]"
            },
            {
                "name": "Circle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    shape: 'circle',\n    variant: 'brand',\n    label: 'Received',\n  },\n}"
            },
            {
                "name": "Clearable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { clearable: true, placeholder: 'Type to see clear button' },\n}"
            },
            {
                "name": "ClickableRows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    rowClickable: true,\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      onRowClicked: (row: User) => {\n        alert(`Clicked on: ${row.name}`);\n      },\n    },\n    template: `\n      <ds-data-table\n        [data]=\"data\"\n        [columns]=\"columns\"\n        [searchable]=\"searchable\"\n        [paginated]=\"paginated\"\n        [pageSize]=\"pageSize\"\n        [rowClickable]=\"rowClickable\"\n        (rowClicked)=\"onRowClicked($event)\"\n      />\n    `,\n  }),\n}"
            },
            {
                "name": "Collapsed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { \n    collapsed: true \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [collapsed]=\"collapsed\" />\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CollapsedWithGlobalAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { \n    collapsed: true, \n    showGlobalAction: true, \n    globalActionLabel: 'Create New', \n    globalActionIcon: 'remixAddLine' \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar \n          [groups]=\"groups\" \n          [collapsed]=\"collapsed\" \n          [showGlobalAction]=\"showGlobalAction\" \n          [globalActionLabel]=\"globalActionLabel\" \n          [globalActionIcon]=\"globalActionIcon\" \n        />\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Colors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"display: flex; align-items: center; gap: 16px;\">\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"primary\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"secondary\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"tertiary\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"brand\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"success\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"warning\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"destructive\"></ds-icon>\n        </div>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "ColorTest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px; padding: 20px;\">\n        <!-- Test 1: Hardcoded colors for reference -->\n        <div>\n          <h4>Reference Colors (hardcoded)</h4>\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\n            <div style=\"color: #202227;\">■ primary (#202227)</div>\n            <div style=\"color: #545B66;\">■ secondary (#545B66)</div>\n            <div style=\"color: #626B78;\">■ tertiary (#626B78)</div>\n            <div style=\"color: #6B5FF5;\">■ brand (#6B5FF5)</div>\n            <div style=\"color: #158452;\">■ success (#158452)</div>\n            <div style=\"color: #d97706;\">■ warning (#d97706)</div>\n            <div style=\"color: #dc2626;\">■ destructive (#dc2626)</div>\n          </div>\n        </div>\n        \n        <!-- Test 2: Our icon component -->\n        <div>\n          <h4>Icon Component Colors</h4>\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"primary\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"secondary\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"tertiary\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"brand\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"success\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"warning\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"destructive\"></ds-icon>\n          </div>\n        </div>\n        \n        <!-- Test 3: Custom colors that bypass CSS classes -->\n        <div>\n          <h4>Custom Colors (bypass CSS)</h4>\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#202227\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#545B66\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#626B78\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#6B5FF5\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#158452\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#d97706\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#dc2626\"></ds-icon>\n          </div>\n        </div>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "ColorVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Color Variants</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center; max-width: 600px;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"default\" label=\"Default\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Brand\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"success\" label=\"Success\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"warning\" label=\"Warning\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"destructive\" label=\"Destructive\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Blue\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"light-purple\" label=\"Light Purple\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"pink\" label=\"Pink\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"salmon-orange\" label=\"Salmon Orange\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"orange\" label=\"Orange\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"lime-green\" label=\"Lime Green\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"grey\" label=\"Grey\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Name', value: 'name' },\n      { id: '2', label: 'Email', value: 'email' },\n      { id: '3', label: 'Role', value: 'role' },\n      { id: '4', label: 'Status', value: 'status' },\n      { id: '5', label: 'Join Date', value: 'joinDate' },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-icon-button icon=\"remixSettings3Line\" variant=\"ghost\" ariaLabel=\"Select columns\" />\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "CommonUseCases",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <!-- Status indicators -->\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Status Indicators</h3>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item\n              icon=\"remixSparklingFill\"\n              value=\"Important\"\n              tooltip=\"High priority item\"\n            />\n            <ds-metadata-item\n              icon=\"remixCheckLine\"\n              value=\"Verified\"\n              tooltip=\"Verified by system\"\n            />\n          </div>\n        </div>\n\n        <!-- Time-related -->\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Time Information</h3>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item\n              icon=\"remixTimeLine\"\n              value=\"4 hours ago\"\n            />\n            <ds-metadata-item\n              icon=\"remixCalendarLine\"\n              value=\"Due tomorrow\"\n              tooltip=\"Due on March 15, 2024\"\n            />\n          </div>\n        </div>\n\n        <!-- Data sources -->\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Data Sources</h3>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item\n              icon=\"remixSurveyLine\"\n              value=\"Based on 12 inquiries\"\n              tooltip=\"Data from recent customer interactions\"\n            />\n            <ds-metadata-item\n              icon=\"remixDatabaseLine\"\n              value=\"System generated\"\n              tooltip=\"Generated by AI analysis\"\n            />\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
            },
            {
                "name": "CompactView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    showColumnVisibility: false,\n  },\n}"
            },
            {
                "name": "Complete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Inspect for signs of leaks or dampness',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixAlertLine\" value=\"Important\" variant=\"warning\" />\n          <ds-metadata-item icon=\"remixTeamLine\" value=\"Based on 12 inquiries\" />\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\n        </div>\n        <div slot=\"actions\">\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n          <ds-button variant=\"primary\" size=\"sm\">Create task</ds-button>\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
            },
            {
                "name": "ComplexExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      invoiceLines: sampleInvoiceLines,\n      invoiceColumns: invoiceColumns,\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <ds-tile orientation=\"vertical\">\n          <ds-tile-section>\n            <tile-header>\n              <header-title>\n                <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\n                Invoice #INV-2024-001\n              </header-title>\n              <header-actions>\n                <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Download</ds-button>\n                <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\n              </header-actions>\n            </tile-header>\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\n              <ds-data-item label=\"Client\" value=\"Acme Corporation\" layout=\"vertical\" />\n              <ds-data-item label=\"Issue Date\" value=\"2024-03-01\" layout=\"vertical\" />\n              <ds-data-item label=\"Due Date\" value=\"2024-03-31\" layout=\"vertical\" />\n              <ds-data-item \n                label=\"Status\" \n                value=\"Pending\" \n                valueType=\"badge\"\n                layout=\"vertical\"\n                badgeVariant=\"warning\"\n                badgeContent=\"Pending\" />\n            </div>\n          </ds-tile-section>\n          \n          <ds-tile-section [padding]=\"false\">\n            <ds-data-table \n              [data]=\"invoiceLines\" \n              [columns]=\"invoiceColumns\"\n              [searchable]=\"false\"\n              [showColumnVisibility]=\"false\"\n              [paginated]=\"false\">\n            </ds-data-table>\n          </ds-tile-section>\n          \n          <ds-tile-section>\n            <div style=\"display: flex; justify-content: flex-end; gap: 8px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Subtotal\" \n                  value=\"$4,598.83\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'ui-xs-regular'\"\n                  [valueClassName]=\"'ui-lg-medium'\" />\n              </div>\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Tax (10%)\" \n                  value=\"$459.88\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'ui-xs-regular'\"\n                  [valueClassName]=\"'ui-lg-medium'\" />\n              </div>\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Total\" \n                  value=\"$5,058.71\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'body-sm-semibold'\"\n                  [valueClassName]=\"'ui-lg-medium tw-text-brand'\" />\n              </div>\n            </div>\n          </ds-tile-section>\n        </ds-tile>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ContentTypeComparison",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Text Only</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n            <ds-badge content=\"Default\" contentType=\"text\" variant=\"default\"></ds-badge>\n            <ds-badge content=\"Brand\" contentType=\"text\" variant=\"brand\"></ds-badge>\n            <ds-badge content=\"Success\" contentType=\"text\" variant=\"success\"></ds-badge>\n            <ds-badge content=\"Warning\" contentType=\"text\" variant=\"warning\"></ds-badge>\n            <ds-badge content=\"Destructive\" contentType=\"text\" variant=\"destructive\"></ds-badge>\n            <ds-badge content=\"Blue\" contentType=\"text\" variant=\"blue\"></ds-badge>\n            <ds-badge content=\"Light Purple\" contentType=\"text\" variant=\"light-purple\"></ds-badge>\n            <ds-badge content=\"Pink\" contentType=\"text\" variant=\"pink\"></ds-badge>\n            <ds-badge content=\"Salmon Orange\" contentType=\"text\" variant=\"salmon-orange\"></ds-badge>\n            <ds-badge content=\"Orange\" contentType=\"text\" variant=\"orange\"></ds-badge>\n            <ds-badge content=\"Lime Green\" contentType=\"text\" variant=\"lime-green\"></ds-badge>\n            <ds-badge content=\"Grey\" contentType=\"text\" variant=\"grey\"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icon + Text</h3>\n          <div style=\"display: flex; gap: 8px;\">\n            <ds-badge content=\"Feature\" contentType=\"icon-text\" leadingIcon=\"remixStarLine\" variant=\"default\"></ds-badge>\n            <ds-badge content=\"Premium\" contentType=\"icon-text\" leadingIcon=\"remixStarFill\" variant=\"brand\"></ds-badge>\n            <ds-badge content=\"Verified\" contentType=\"icon-text\" leadingIcon=\"remixCheckboxCircleFill\" variant=\"success\"></ds-badge>\n            <ds-badge content=\"Alert\" contentType=\"icon-text\" leadingIcon=\"remixAlertFill\" variant=\"warning\"></ds-badge>\n            <ds-badge content=\"Error\" contentType=\"icon-text\" leadingIcon=\"remixErrorWarningFill\" variant=\"destructive\"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Indicator + Text (Always white background)</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n            <ds-badge content=\"Default\" contentType=\"indicator-text\" variant=\"default\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Brand\" contentType=\"indicator-text\" variant=\"brand\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Success\" contentType=\"indicator-text\" variant=\"success\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Warning\" contentType=\"indicator-text\" variant=\"warning\" indicatorShape=\"triangle\"></ds-badge>\n            <ds-badge content=\"Destructive\" contentType=\"indicator-text\" variant=\"destructive\" indicatorShape=\"square\"></ds-badge>\n            <ds-badge content=\"Blue\" contentType=\"indicator-text\" variant=\"blue\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Light Purple\" contentType=\"indicator-text\" variant=\"light-purple\" indicatorShape=\"diamond\"></ds-badge>\n            <ds-badge content=\"Pink\" contentType=\"indicator-text\" variant=\"pink\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Salmon Orange\" contentType=\"indicator-text\" variant=\"salmon-orange\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Orange\" contentType=\"indicator-text\" variant=\"orange\" indicatorShape=\"triangle\"></ds-badge>\n            <ds-badge content=\"Lime Green\" contentType=\"indicator-text\" variant=\"lime-green\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Grey\" contentType=\"indicator-text\" variant=\"grey\" indicatorShape=\"circle\"></ds-badge>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "CustomContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    ariaLabel: 'Star item'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-icon-button [variant]=\"variant\" [size]=\"size\" [ariaLabel]=\"ariaLabel\">\n        <ds-icon name=\"remixStarFill\" />\n      </ds-icon-button>\n    `,\n    moduleMetadata: {\n      imports: [DsIconComponent]\n    }\n  })\n}"
            },
            {
                "name": "CustomSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'remixSearchLine',\n    size: '48px',\n    color: 'brand'\n  }\n}"
            },
            {
                "name": "CustomWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Short', value: 1 },\n      { id: '2', label: 'Medium Length Option', value: 2 },\n      { id: '3', label: 'Very Long Option Name Here', value: 3 },\n    ],\n    multiple: false,\n    disabled: false,\n    width: '300px',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\" [width]=\"width\">\n        <ds-button variant=\"secondary\">Custom Width</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    isSidebarCollapsed: false,\n  },\n  render: () => ({\n    template: '<ds-debug-wrapper></ds-debug-wrapper>'\n  })\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'initials',\n    size: 'md',\n    initials: 'JD',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Badge',\n    contentType: 'text',\n    variant: 'default',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    disabled: false,\n    loading: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<ds-button [variant]=\"variant\" [size]=\"size\" [disabled]=\"disabled\" [loading]=\"loading\">Default Button</ds-button>`,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 360px;\">\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\n        </ds-form-field>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    template: `\n      <ds-datepicker [variant]=\"variant\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n    props: args,\n  }),\n  args: {\n    variant: 'default',\n    disabled: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic header details example with a primary action and more actions menu. This demonstrates the typical layout for an entity detail page.'\n      }\n    }\n  },\n  args: {\n    title: 'Woods Augusthus',\n    showPrimaryAction: true,\n    primaryActionText: 'Follow',\n    primaryActionIcon: 'remixUserFollowLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: false,\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"User name\"\n            value=\"Woods Augusthus\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"WA\"\n          />\n          <ds-data-item\n            label=\"Company name\"\n            value=\"Propbinder Inc.\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"PI\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'remixHomeLine',\n    size: '20px'\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    className: '',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: {\n      ...args\n    },\n    styles: [`\n      :host {\n        display: block;\n        padding: 1rem;\n        background: white;\n      }\n    `],\n    template: `\n      <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\n        Label Text\n      </ds-label>\n    `\n  })\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'This is a link',\n    href: '#',\n    showIcon: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    messages: [\n      'Reviewing tenant inquiries',\n      'Summarising maintenance patterns',\n      'Updating your recommendations',\n      'Analyzing property data',\n    ],\n    styleClass: 'body-sm-regular',\n    useShimmer: true,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    items: basicMenuItems,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-button variant=\"secondary\">Actions</ds-button>\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'default',\n    disabled: false,\n    required: false,\n    ghost: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    ariaLabel: 'Main navigation',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [ariaLabel]=\"ariaLabel\" />\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div class=\"tw-flex\">\n        <ds-spinner size=\"20px\" color=\"tertiary\" />\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    orientation: 'vertical',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-tile [orientation]=\"orientation\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Section Title</header-title>\n            <header-actions>\n              <ds-button size=\"sm\">Action</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">This is a simple tile section with a header and some content.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'This is a helpful tooltip',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-tooltip [text]=\"text\">\n        <ds-button variant=\"primary\">Hover me</ds-button>\n      </ds-tooltip>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Diamond",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    shape: 'diamond',\n    variant: 'brand',\n    label: 'Contact',\n  },\n}"
            },
            {
                "name": "DifferentPlacements",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 4rem; padding: 4rem; place-items: center;\">\n        <ds-tooltip text=\"Tooltip on top\">\n          <ds-button>Top</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Tooltip on right\">\n          <ds-button>Right</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Tooltip on bottom\">\n          <ds-button>Bottom</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Tooltip on left\">\n          <ds-button>Left</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Auto placement\">\n          <ds-button>Auto</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Another tooltip\">\n          <ds-button>Center</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'remixDeleteBinLine',\n    variant: 'destructive',\n    size: 'md',\n    disabled: true,\n    ariaLabel: 'Delete item',\n    tooltip: 'Cannot delete this item'\n  }\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker [disabled]=\"true\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { disabled: true, placeholder: 'Disabled input' },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    multiple: false,\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Disabled Listbox</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    disabled: true,\n  },\n}"
            },
            {
                "name": "EmptyState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: [],\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    emptyMessage: 'No users found',\n  },\n}"
            },
            {
                "name": "EmptyState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      emptyData: signal([]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: '',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onRowAdded: (row: any) => {\n        console.log('First row added:', row);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"emptyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [emptyMessage]=\"'No invoice lines yet'\"\n        [addRowButtonText]=\"'Add first line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (rowAdded)=\"onRowAdded($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'error', placeholder: 'Error state' },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'error',\n  },\n}"
            },
            {
                "name": "ErrorVariant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker variant=\"error\">\n        <ds-button variant=\"destructive\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    sparkImagePath: './Assets/ai-spark.png',\n    isLoading: true\n  }\n}"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    sparkImagePath: './Assets/ai-spark.png',\n    animationState: 'static'\n  }\n}"
            },
            {
                "name": "FilterPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Active', value: 'active' },\n      { id: '2', label: 'Inactive', value: 'inactive' },\n      { id: '3', label: 'Pending', value: 'pending' },\n      { id: '4', label: 'Archived', value: 'archived' },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"ghost\" leadingIcon=\"remixFilterLine\">Filter Status</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { ghost: true, placeholder: 'Ghost input...' },\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Ghost select',\n    ghost: true,\n  },\n}"
            },
            {
                "name": "GhostWithGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: groupedOptions,\n    placeholder: 'Ghost select with groups',\n    ghost: true,\n  },\n}"
            },
            {
                "name": "GhostWithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { ghost: true, leadingIcon: 'remixSearchLine', placeholder: 'Search...' },\n}"
            },
            {
                "name": "groupedOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsSelectOption[]",
                "defaultValue": "[\n  { id: '1', label: 'Apple', value: 'apple', group: 'Fruits' },\n  { id: '2', label: 'Banana', value: 'banana', group: 'Fruits' },\n  { id: '3', label: 'Orange', value: 'orange', group: 'Fruits' },\n  { id: '4', label: 'Carrot', value: 'carrot', group: 'Vegetables' },\n  { id: '5', label: 'Broccoli', value: 'broccoli', group: 'Vegetables' },\n  { id: '6', label: 'Potato', value: 'potato', group: 'Vegetables' },\n]"
            },
            {
                "name": "HorizontalAvatarIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Owner',\n    value: 'System User',\n    layout: 'horizontal',\n    valueType: 'avatar-text',\n    avatarType: 'icon',\n    avatarIconName: 'remixRobotFill',\n  },\n}"
            },
            {
                "name": "HorizontalAvatarPhoto",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Created by',\n    value: 'Sarah Wilson',\n    layout: 'horizontal',\n    valueType: 'avatar-text',\n    avatarType: 'photo',\n    avatarSrc: '/Dummy-avatars/dummy-portrait-woman.jpg',\n  },\n}"
            },
            {
                "name": "HorizontalBadgeIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Status',\n    layout: 'horizontal',\n    valueType: 'badge',\n    badgeVariant: 'success',\n    badgeContentType: 'icon-text',\n    badgeContent: 'Completed',\n    badgeIcon: 'remixCheckboxCircleFill',\n  },\n}"
            },
            {
                "name": "HorizontalBadgeIndicator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Type',\n    layout: 'horizontal',\n    valueType: 'badge',\n    badgeVariant: 'brand',\n    badgeContentType: 'indicator-text',\n    badgeContent: 'Premium',\n    badgeIndicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "HorizontalIconLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Download',\n    value: 'Download PDF report',\n    layout: 'horizontal',\n    valueType: 'icon-link',\n    linkHref: 'https://example.com/report.pdf',\n    linkTarget: '_blank',\n    iconName: 'remixFileDownloadLine',\n  },\n}"
            },
            {
                "name": "HorizontalIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Location',\n    value: 'New York, NY',\n    layout: 'horizontal',\n    iconName: 'remixMapPin2Fill',\n  },\n}"
            },
            {
                "name": "HorizontalText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Full Name',\n    value: 'John Doe',\n    layout: 'horizontal',\n    valueType: 'text',\n  },\n}"
            },
            {
                "name": "IconButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <ds-tooltip text=\"Add to favorites\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixStarLine\" \n            ariaLabel=\"Favorite\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Settings and preferences\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixSettingsLine\" \n            ariaLabel=\"Settings\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"More options menu\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixMoreLine\" \n            ariaLabel=\"More options\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Delete permanently\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixDeleteBinLine\" \n            ariaLabel=\"Delete\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "IconButtonVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixStarLine\" \n          ariaLabel=\"Favorite\"\n          variant=\"primary\"\n        ></ds-button>\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixSettingsLine\" \n          ariaLabel=\"Settings\"\n          variant=\"secondary\"\n        ></ds-button>\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixMoreLine\" \n          ariaLabel=\"More options\"\n          variant=\"ghost\"\n        ></ds-button>\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixDeleteBinLine\" \n          ariaLabel=\"Delete\"\n          variant=\"destructive\"\n        ></ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "IconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icons Only</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"diamond\" variant=\"success\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"triangle\" variant=\"warning\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"pentagon\" variant=\"blue\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "IconTextBrand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'New Feature',\n    contentType: 'icon-text',\n    leadingIcon: 'remixStarFill',\n    variant: 'brand',\n  },\n}"
            },
            {
                "name": "IconTextDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Feature',\n    contentType: 'icon-text',\n    leadingIcon: 'remixStarLine',\n    variant: 'default',\n  },\n}"
            },
            {
                "name": "IconTextDestructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Critical',\n    contentType: 'icon-text',\n    leadingIcon: 'remixErrorWarningFill',\n    variant: 'destructive',\n  },\n}"
            },
            {
                "name": "IconTextSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Verified',\n    contentType: 'icon-text',\n    leadingIcon: 'remixCheckboxCircleFill',\n    variant: 'success',\n  },\n}"
            },
            {
                "name": "IconTextWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Attention',\n    contentType: 'icon-text',\n    leadingIcon: 'remixAlertFill',\n    variant: 'warning',\n  },\n}"
            },
            {
                "name": "IconType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (6px radius)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (8px radius)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (12px radius)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (16px radius)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "IconVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Default User</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixTeamFill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Team</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixBuildingFill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Organization</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixRobotFill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Bot</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "IndicatorTextBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Info',\n    contentType: 'indicator-text',\n    variant: 'blue',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextBrand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'In Progress',\n    contentType: 'indicator-text',\n    variant: 'brand',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Default',\n    contentType: 'indicator-text',\n    variant: 'default',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextDestructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Failed',\n    contentType: 'indicator-text',\n    variant: 'destructive',\n    indicatorShape: 'square',\n  },\n}"
            },
            {
                "name": "IndicatorTextGrey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Neutral',\n    contentType: 'indicator-text',\n    variant: 'grey',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextLightPurple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Special',\n    contentType: 'indicator-text',\n    variant: 'light-purple',\n    indicatorShape: 'diamond',\n  },\n}"
            },
            {
                "name": "IndicatorTextLimeGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Fresh',\n    contentType: 'indicator-text',\n    variant: 'lime-green',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Alert',\n    contentType: 'indicator-text',\n    variant: 'orange',\n    indicatorShape: 'triangle',\n  },\n}"
            },
            {
                "name": "IndicatorTextPink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Accent',\n    contentType: 'indicator-text',\n    variant: 'pink',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextSalmonOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Warm',\n    contentType: 'indicator-text',\n    variant: 'salmon-orange',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Completed',\n    contentType: 'indicator-text',\n    variant: 'success',\n    indicatorShape: 'circle',\n  },\n}"
            },
            {
                "name": "IndicatorTextWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Pending',\n    contentType: 'indicator-text',\n    variant: 'warning',\n    indicatorShape: 'triangle',\n  },\n}"
            },
            {
                "name": "InitiallyCollapsed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    isMobileOverride: false, // Force desktop mode\n    isSidebarCollapsed: true,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Initially Collapsed'\"\n        [iconName]=\"'remixHome4Line'\"\n        [userInitials]=\"'JD'\"\n        [showFirstAction]=\"true\"\n        [firstActionIcon]=\"'remixNotification3Line'\"\n        [firstActionLabel]=\"'Notifications'\"\n        [showSecondAction]=\"true\"\n        [secondActionIcon]=\"'remixSettings3Line'\"\n        [secondActionLabel]=\"'Settings'\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Initially Collapsed Sidebar</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story demonstrates the sidebar starting in a collapsed state on desktop. Users can expand it using the collapse toggle button.</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Is Mobile'\" \n                    [value]=\"'False (Desktop mode forced)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Sidebar Collapsed'\" \n                    [value]=\"'True'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Note'\" \n                    [value]=\"'Click the collapse toggle to expand the sidebar'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n}"
            },
            {
                "name": "InitialsType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"AS\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"MJ\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"EB\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    leadingIcon: 'remixThumbUpLine',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      clickCount: 0,\n      onClick: function(event: MouseEvent) {\n        this['clickCount']++;\n        console.log('Button clicked!', event);\n      }\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n        <ds-button \n          [variant]=\"variant\"\n          [size]=\"size\"\n          [leadingIcon]=\"leadingIcon\"\n          (clicked)=\"onClick($event)\"\n        >\n          Like ({{clickCount}})\n        </ds-button>\n        <p style=\"font-size: 0.875rem; color: var(--color-gray-600);\">\n          Click count: {{clickCount}}\n        </p>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox \n          label=\"Click me to toggle\" \n          (checkedChange)=\"onCheckedChange($event)\">\n        </ds-checkbox>\n        <ds-checkbox \n          label=\"I'm required\" \n          [required]=\"true\"\n          variant=\"error\">\n        </ds-checkbox>\n        <ds-checkbox \n          label=\"Hover over me\"\n          size=\"lg\">\n        </ds-checkbox>\n      </div>\n    `,\n    props: {\n      onCheckedChange: (checked: boolean) => {\n        console.log('Checkbox checked:', checked);\n      },\n    },\n  }),\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\n    }),\n  ],\n  render: () => {\n    @Component({\n      selector: 'datepicker-interactive',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\n      template: `\n        <div class=\"tw-space-y-4\">\n          <ds-datepicker \n            [variant]=\"variant()\" \n            [disabled]=\"disabled()\"\n            (dateChange)=\"onDateChange($event)\">\n            <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n              {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'Select Date' }}\n            </ds-button>\n          </ds-datepicker>\n          \n          <div class=\"tw-flex tw-gap-2\">\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('default')\">\n              Default\n            </button>\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('error')\">\n              Error\n            </button>\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('warning')\">\n              Warning\n            </button>\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('success')\">\n              Success\n            </button>\n          </div>\n          \n          <div class=\"tw-flex tw-gap-2\">\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"disabled.set(!disabled())\">\n              Toggle Disabled ({{ disabled() ? 'Currently Disabled' : 'Currently Enabled' }})\n            </button>\n          </div>\n          \n          <p class=\"body-sm-regular\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\n        </div>\n      `,\n    })\n    class DatepickerInteractive {\n      variant = signal<'default' | 'error' | 'warning' | 'success'>('default');\n      disabled = signal(false);\n      selectedDate = signal<Date | null>(null);\n      \n      onDateChange(date: Date | null) {\n        this.selectedDate.set(date);\n      }\n    }\n\n    return {\n      component: DatepickerInteractive,\n      props: {},\n    };\n  },\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'remixSettingsLine',\n    size: '24px',\n    color: 'brand',\n    interactive: true\n  }\n}"
            },
            {
                "name": "Interactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Click to see the action',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      clickCount: 0,\n      onClick: function() {\n        this['clickCount']++;\n        console.log('Button clicked from tooltip!');\n      }\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n        <ds-tooltip [text]=\"text\">\n          <ds-button (clicked)=\"onClick()\">\n            Click me ({{clickCount}})\n          </ds-button>\n        </ds-tooltip>\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\n          Click count: {{clickCount}}\n        </p>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "InteractiveExamples",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <ds-link href=\"#\" content=\"Simple link\"></ds-link>\n        <ds-link href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\" [showIcon]=\"true\" iconName=\"remixExternalLinkLine\" content=\"External link\"></ds-link>\n        <ds-link href=\"mailto:test@example.com\" [showIcon]=\"true\" iconName=\"remixMailLine\" content=\"Email link\"></ds-link>\n        <ds-link href=\"#\" [showIcon]=\"true\" iconName=\"remixDownloadLine\" content=\"Download link\"></ds-link>\n        <ds-link href=\"#\">Link with <strong>formatted</strong> content</ds-link>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "invoiceColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'description',\n    header: 'Description',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Add description...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n        maxWidth: 'xl',\n        truncate: true,\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'quantity',\n    header: 'Quantity',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.5,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'unitPrice',\n    header: 'Unit Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'discount',\n    header: 'Discount',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'total',\n    header: 'Total',\n    cell: (info) => info.getValue(),\n    enableSorting: true,\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n]"
            },
            {
                "name": "invoiceColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  { accessorKey: 'id', header: 'ID' },\n  { accessorKey: 'description', header: 'Description' },\n  { accessorKey: 'quantity', header: 'Qty' },\n  { accessorKey: 'unitPrice', header: 'Unit Price', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\n  { accessorKey: 'total', header: 'Total', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\n]"
            },
            {
                "name": "InvoiceLinesReorderable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceData: signal([...sampleInvoiceLines]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: 'Add description',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"invoiceData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [showDragHandle]=\"true\"\n        [addRowButtonText]=\"'Add invoice line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "LabelToggle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <h4>With Labels</h4>\n        <ds-checkbox [showLabel]=\"true\" label=\"I have a visible label\"></ds-checkbox>\n        <ds-checkbox [showLabel]=\"true\" label=\"Me too!\"></ds-checkbox>\n        \n        <h4 style=\"margin-top: 24px;\">Without Labels (using aria-label)</h4>\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 1\"></ds-checkbox>\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 2\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "LargeDataset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: Array.from({ length: 100 }, (_, i) => ({\n      id: i + 1,\n      name: `User ${i + 1}`,\n      email: `user${i + 1}@example.com`,\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\n    })),\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    pageSizeOptions: [10, 25, 50, 100],\n    showColumnVisibility: true,\n  },\n}"
            },
            {
                "name": "LargerText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    messages: [\n      'Processing your data',\n      'Analyzing trends',\n      'Generating insights',\n    ],\n    styleClass: 'body-base-medium',\n  },\n}"
            },
            {
                "name": "LargeTextarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    placeholder: 'This is a large textarea for longer content...',\n    rows: 8,\n    size: 'lg',\n  },\n}"
            },
            {
                "name": "LayoutComparison",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px; max-width: 400px;\">\n        <div>\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Vertical Layout</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n            <ds-data-item\n              label=\"Email address\"\n              value=\"user@example.com\"\n              layout=\"vertical\"\n              valueType=\"text\"\n            />\n            <ds-data-item\n              label=\"Status\"\n              value=\"Active\"\n              layout=\"vertical\"\n              valueType=\"icon-text\"\n              iconName=\"remixCheckboxCircleFill\"\n            />\n            <ds-data-item\n              label=\"Assigned to\"\n              value=\"John Doe\"\n              layout=\"vertical\"\n              valueType=\"avatar-text\"\n              avatarType=\"initials\"\n              avatarInitials=\"JD\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Horizontal Layout</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n            <ds-data-item\n              label=\"Email address\"\n              value=\"user@example.com\"\n              layout=\"horizontal\"\n              valueType=\"text\"\n            />\n            <ds-data-item\n              label=\"Status\"\n              value=\"Active\"\n              layout=\"horizontal\"\n              valueType=\"icon-text\"\n              iconName=\"remixCheckboxCircleFill\"\n            />\n            <ds-data-item\n              label=\"Assigned to\"\n              value=\"John Doe\"\n              layout=\"horizontal\"\n              valueType=\"avatar-text\"\n              avatarType=\"initials\"\n              avatarInitials=\"JD\"\n            />\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
            },
            {
                "name": "LeaseDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Lease management example demonstrating how to display lease agreement details with actions for renewal and report generation.'\n      }\n    }\n  },\n  args: {\n    title: 'Lease Agreement #LA-2024-001',\n    showPrimaryAction: true,\n    primaryActionText: 'Renew Lease',\n    primaryActionIcon: 'remixRefreshLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'Generate Report',\n    secondaryActionIcon: 'remixFileTextLine',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Tenant\"\n            value=\"Michael Chen\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"MC\"\n          />\n          <ds-data-item\n            label=\"Property\"\n            value=\"Sunset Blvd Apt 4B\"\n            layout=\"vertical\"\n            valueType=\"icon-text\"\n            iconName=\"remixBuildingLine\"\n          />\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Rent Amount\"\n            value=\"$2,400/month\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n          <ds-data-item\n            label=\"Lease Term\"\n            value=\"12 months\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
            },
            {
                "name": "LeftDrawer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    position: 'left'\n  },\n  render: Template\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'remixRefreshLine',\n    variant: 'secondary',\n    size: 'md',\n    loading: true,\n    ariaLabel: 'Refreshing'\n  }\n}"
            },
            {
                "name": "LoadingStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button [loading]=\"true\" variant=\"primary\">\n          Saving...\n        </ds-button>\n        <ds-button \n          [loading]=\"true\" \n          variant=\"ghost\"\n          leadingIcon=\"remixUploadLine\"\n        >\n          Uploading...\n        </ds-button>\n        <ds-button \n          [loading]=\"true\" \n          variant=\"secondary\"\n        >\n          Processing\n        </ds-button>\n        <ds-button \n          [loading]=\"true\" \n          variant=\"destructive\"\n        >\n          Deleting...\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "LongText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tooltip text=\"This is a very long tooltip text that should wrap properly and demonstrate how the tooltip handles longer content gracefully without breaking the layout.\">\n        <ds-button>Long tooltip text</ds-button>\n      </ds-tooltip>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "LongTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'This is a very long title that should demonstrate how the component handles longer text content and wrapping behavior while maintaining proper alignment',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"Just now\" />\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
            },
            {
                "name": "LongTitleWithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'This is a Very Long Page Title That Should Be Truncated',\n    iconName: 'remixFileTextLine',\n    userInitials: 'LT',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Documents', path: '/documents', isLast: false },\n      { label: 'Reports', path: '/documents/reports', isLast: false },\n      { label: 'This is a Very Long Page Title That Should Be Truncated', path: '/documents/reports/long-title', isLast: true }\n    ],\n  },\n}"
            },
            {
                "name": "menuWithDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsMenuItem[]",
                "defaultValue": "[\n  { id: '1', label: 'New File', icon: 'remixFileAddLine' },\n  { id: '2', label: 'New Folder', icon: 'remixFolderAddLine' },\n  { id: '3', label: 'Upload', icon: 'remixUploadLine', disabled: true },\n  { id: 'sep1', label: '', separator: true },\n  { id: '4', label: 'Settings', icon: 'remixSettingsLine' },\n]"
            },
            {
                "name": "menuWithIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsMenuItem[]",
                "defaultValue": "[\n  { id: '1', label: 'Edit', icon: 'remixEditLine', action: () => console.log('Edit clicked') },\n  { id: '2', label: 'Copy', icon: 'remixFileCopyLine', action: () => console.log('Copy clicked') },\n  { id: '3', label: 'Share', icon: 'remixShareLine', action: () => console.log('Share clicked') },\n  { id: 'sep1', label: '', separator: true },\n  { id: '4', label: 'Download', icon: 'remixDownloadLine', action: () => console.log('Download clicked') },\n  { id: 'sep2', label: '', separator: true },\n  { id: '5', label: 'Delete', icon: 'remixDeleteBinLine', destructive: true, action: () => console.log('Delete clicked') },\n]"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsAccordion>",
                "defaultValue": "{\n  title: 'Primitives/Accordion',\n  component: DsAccordion,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsAccordion, DsAccordionItem, NgIcon],\n      providers: [\n        provideIcons({ remixArrowDownSLine })\n      ]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsAppLayoutComponent>",
                "defaultValue": "{\n  title: 'Application shell/App Layout',\n  component: DsAppLayoutComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DebugWrapperComponent],\n      providers: [ViewportService]\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe main application layout component that provides a responsive shell with sidebar navigation, topbar, and content area. Automatically adapts between mobile and desktop modes based on viewport size.\n\n## Features\n\n- **Responsive Design**: Automatically switches between mobile drawer and desktop sidebar at 992px breakpoint\n- **Collapsible Sidebar**: Desktop sidebar can be collapsed from 256px to 80px width\n- **Mobile Drawer**: Slide-in navigation drawer with overlay on mobile devices\n- **Sticky Topbar**: Page header remains visible while scrolling content\n- **Integrated Subcomponents**: Both sidebar and topbar are automatically rendered and configured via props\n- **Content Projection**: Default slot for main page content\n- **Smooth Transitions**: Animated sidebar collapse/expand and mobile drawer\n- **Viewport Service**: Automatic mobile detection or manual override for testing\n\n## Architecture\n\nThe component automatically renders both **sidebar** and **topbar** - you don't need to project them as children. Just configure them via props and project your main content.\n\n### Built-in Subcomponents\n\n1. **Sidebar** - Navigation component (always rendered)\n2. **Topbar** - Page header component (always rendered)\n3. **Main Content** - Your page content (via default slot)\n\n## Content Projection\n\nThe component has a **single default slot** for main page content:\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"groups\"\n  [pageTitle]=\"'Dashboard'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n>\n  <!-- Your main content goes here -->\n  <div class=\"content-container\">\n    <h1>Page Content</h1>\n  </div>\n</ds-app-layout>\n\\`\\`\\`\n\n## Props\n\n### Sidebar Configuration\n- \\`sidebarGroups\\`: Array of navigation groups with items\n- \\`isSidebarCollapsed\\`: Control collapsed state (desktop only)\n- \\`activeItemId\\`: Currently active navigation item\n\n**Group Structure:**\n\\`\\`\\`typescript\n{\n  id: 'group-id',\n  label: 'GROUP LABEL',\n  items: [\n    { \n      id: 'item-id', \n      label: 'Item Label', \n      icon: 'remixIconName',\n      badgeText?: '5' // Optional badge\n    }\n  ]\n}\n\\`\\`\\`\n\n### Topbar Configuration\n- \\`pageTitle\\`: The page title text\n- \\`iconName\\`: Icon to display next to the title\n- \\`userInitials\\`: User avatar initials\n- \\`showBreadcrumbs\\`: Enable breadcrumb navigation (default: false)\n- \\`breadcrumbItems\\`: Array of breadcrumb items\n- \\`showFirstAction\\`: Show first action button (default: true)\n- \\`firstActionIcon\\`: Icon for first action (default: 'remixNotification3Line')\n- \\`firstActionLabel\\`: Aria label for first action (default: 'Notifications')\n- \\`showSecondAction\\`: Show second action button (default: true)\n- \\`secondActionIcon\\`: Icon for second action (default: 'remixSettings3Line')\n- \\`secondActionLabel\\`: Aria label for second action (default: 'Settings')\n\n### Layout Configuration\n- \\`isMobileOverride\\`: Override automatic mobile detection for testing\n\n## Events\n\n- \\`(collapsedChange)\\`: Emits when desktop sidebar is collapsed/expanded\n- \\`(menuOpenChange)\\`: Emits when mobile drawer is opened/closed\n\n## Layout Behavior\n\n### Desktop Mode (≥ 992px)\n- Persistent sidebar on the left (256px expanded, 80px collapsed)\n- Grid layout: \\`auto minmax(0, 1fr)\\`\n- Sidebar collapse toggle available\n- Main content adjusts width automatically\n\n### Mobile Mode (< 992px)\n- Minimized sidebar header (64px height) at the top\n- Hamburger menu button to open drawer\n- Full sidebar appears as overlay drawer from left\n- Semi-transparent backdrop overlay\n- Body scroll locked when drawer is open\n\n## Usage Example\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [isSidebarCollapsed]=\"isSidebarCollapsed()\"\n  [activeItemId]=\"'dashboard'\"\n  [pageTitle]=\"'Dashboard'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n  [showFirstAction]=\"true\"\n  [firstActionIcon]=\"'remixNotification3Line'\"\n  [showSecondAction]=\"true\"\n  [secondActionIcon]=\"'remixSettings3Line'\"\n  (collapsedChange)=\"isSidebarCollapsed.set($event)\"\n>\n  <!-- Main Content -->\n  <div class=\"content-container\">\n    <h1>Page Content</h1>\n    <p>Your content goes here...</p>\n  </div>\n</ds-app-layout>\n\\`\\`\\`\n\n### With Breadcrumbs\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [pageTitle]=\"'Property Details'\"\n  [iconName]=\"'remixBuilding2Line'\"\n  [showBreadcrumbs]=\"true\"\n  [breadcrumbItems]=\"[\n    { label: 'Properties', path: '/properties', isLast: false },\n    { label: 'Fælledgården Hub', path: '', isLast: true }\n  ]\"\n  [userInitials]=\"'JD'\"\n>\n  <!-- Content here -->\n</ds-app-layout>\n\\`\\`\\`\n\n## Viewport Testing\n\nUse the viewport toolbar above to test different screen sizes, or use the \\`isMobileOverride\\` prop to force mobile/desktop mode:\n\n\\`\\`\\`html\n<ds-app-layout\n  [isMobileOverride]=\"false\"  <!-- Force desktop mode -->\n  [sidebarGroups]=\"groups\"\n  [pageTitle]=\"'Dashboard'\"\n>\n\\`\\`\\`\n        `,\n      },\n    },\n    layout: 'fullscreen',\n    // Add viewport toolbar to allow easy resizing\n    viewport: {\n      defaultViewport: 'desktop',\n      viewports: {\n        mobile: {\n          name: 'Mobile',\n          styles: {\n            width: '375px',\n            height: '100%',\n          },\n        },\n        tablet: {\n          name: 'Tablet',\n          styles: {\n            width: '768px',\n            height: '100%',\n          },\n        },\n        desktop: {\n          name: 'Desktop',\n          styles: {\n            width: '1024px',\n            height: '100%',\n          },\n        },\n        'large-desktop': {\n          name: 'Large Desktop',\n          styles: {\n            width: '1440px',\n            height: '100%',\n          },\n        },\n      },\n    },\n  },\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsAvatarComponent>",
                "defaultValue": "{\n  title: 'Primitives/Avatar',\n  component: DsAvatarComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    type: {\n      control: { type: 'select' },\n      options: ['initials', 'photo', 'icon'],\n      description: 'The type of avatar display',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg', 'xl'],\n      description: 'The size of the avatar',\n    },\n    initials: {\n      control: { type: 'text' },\n      description: 'Initials to display (for initials type)',\n    },\n    src: {\n      control: { type: 'text' },\n      description: 'Image source URL (for photo type)',\n    },\n    alt: {\n      control: { type: 'text' },\n      description: 'Alternative text for the image',\n    },\n    iconName: {\n      control: { type: 'text' },\n      description: 'Icon name to display (for icon type)',\n    },\n    iconColor: {\n      control: { type: 'text' },\n      description: 'Color of the icon (automatically white for icon avatars)',\n      table: { disable: true }, // Disable control since it's always white for icon avatars\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsBadgeComponent>",
                "defaultValue": "{\n  title: 'Primitives/Badge',\n  component: DsBadgeComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\n    },\n    contentType: {\n      control: 'select',\n      options: ['text', 'icon-text', 'indicator-text'],\n    },\n    content: {\n      control: 'text',\n    },\n    leadingIcon: {\n      control: 'text',\n    },\n    indicatorShape: {\n      control: 'select',\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsButtonComponent>",
                "defaultValue": "{\n  title: 'Primitives/Button',\n  component: DsButtonComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'ghost', 'destructive', 'ai-primary', 'ai-ghost'],\n      description: 'The visual style variant of the button',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n      description: 'The size of the button',\n    },\n    disabled: {\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n    },\n    loading: {\n      control: { type: 'boolean' },\n      description: 'Whether the button is in loading state',\n    },\n    pressed: {\n      control: { type: 'boolean' },\n      description: 'Whether the button appears pressed (for toggle buttons)',\n    },\n    expanded: {\n      control: { type: 'boolean' },\n      description: 'Whether the button is expanded (for dropdown buttons)',\n    },\n    leadingIcon: {\n      control: { type: 'text' },\n      description: 'Icon to display before the button text',\n    },\n    trailingIcon: {\n      control: { type: 'text' },\n      description: 'Icon to display after the button text',\n    },\n    ariaLabel: {\n      control: { type: 'text' },\n      description: 'Accessibility label for the button',\n    },\n    iconOnly: {\n      control: { type: 'boolean' },\n      description: 'Whether the button displays only an icon without text',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsIconButtonComponent>",
                "defaultValue": "{\n  decorators: [\n    applicationConfig({\n      providers: [provideAllRemixIcons()]\n    })\n  ],\n  parameters: {\n    layout: 'centered'\n  },\n  title: 'Primitives/IconButton',\n  component: DsIconButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\n      description: 'Visual style variant of the button',\n      table: {\n        defaultValue: { summary: 'ghost' }\n      }\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n      description: 'Size variant of the button',\n      table: {\n        defaultValue: { summary: 'md' }\n      }\n    },\n    icon: {\n      control: 'text',\n      description: 'Icon name to display (only used when no custom content is projected)',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Whether the button is in a loading state',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    pressed: {\n      control: 'boolean',\n      description: 'Whether the button is in a pressed state (for toggle buttons)',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    expanded: {\n      control: 'boolean',\n      description: 'Whether the button controls an expanded element',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    ariaLabel: {\n      control: 'text',\n      description: 'Accessible label for the button (required for icon buttons)',\n    },\n    tooltip: {\n      control: 'text',\n      description: 'Tooltip text to display on hover',\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsCheckboxComponent>",
                "defaultValue": "{\n  title: 'Primitives/Checkbox',\n  component: DsCheckboxComponent,\n  parameters: { layout: 'centered' },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\n    label: { control: 'text' },\n    showLabel: { control: 'boolean' },\n    disabled: { control: 'boolean' },\n    required: { control: 'boolean' },\n    indeterminate: { control: 'boolean' },\n    checkboxId: { control: 'text' },\n    ariaLabel: { control: 'text' },\n    ariaDescribedBy: { control: 'text' },\n    ariaLabelledBy: { control: 'text' },\n  },\n  args: {\n    variant: 'default',\n    size: 'md',\n    label: 'Accept terms and conditions',\n    showLabel: true,\n    disabled: false,\n    required: false,\n    indeterminate: false,\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsDataItemComponent>",
                "defaultValue": "{\n  title: 'Primitives/Data Item',\n  component: DsDataItemComponent,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA flexible data item component for displaying label-value pairs with multiple layout options and value types. Perfect for user profiles, task details, settings panels, and structured data displays.\n\n## Features\n\n- **Two Layout Types**: Vertical and horizontal arrangements for different use cases\n- **Fixed Value Height**: 32px height for consistent alignment across all value types\n- **Six Value Types**: Text, Icon+Text, Avatar+Text, Badge, Link, and Icon+Link variants\n- **Responsive Design**: Horizontal layout automatically collapses to vertical on mobile\n- **Consistent Spacing**: 8px gap between elements in value container\n- **Semantic Typography**: Uses ui-sm-regular (14px, 400 weight) for value text\n\n## Layout Types\n\n### Vertical Layout\nStacks label above value with 4px gap. Ideal for compact displays, mobile layouts, and when you need to conserve horizontal space.\n\n### Horizontal Layout\nPlaces label and value side-by-side with 12px gap. Label container has fixed 128px width for consistent alignment across multiple data items.\n\n## Value Types\n\n### Text Only\nSimple text display using ui-sm-regular typography with primary text color.\n\n### Icon + Text\n16px icon with secondary color paired with text. Perfect for status indicators, locations, or categorized information.\n\n### Avatar + Text\n20x20px avatar (xs size) with text. Supports all avatar types: initials, photo, and icon. Ideal for user assignments, ownership, or person-related data.\n\n### Badge\nFull badge component with all variants and content types. Perfect for status, priority, categories, or any labeled information.\n\n### Link\nClickable link using the ds-link component. Ideal for navigation, references, or any interactive text that should lead to another page or action.\n\n### Icon + Link\nLink with a leading icon for enhanced visual context. Perfect for document links, external references, or any clickable content that benefits from visual indicators.\n\nFor complete documentation, properties reference, and implementation guidelines, see the [Data Item README](/?path=/docs/components-data-item--docs).\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: {\n      control: 'text',\n      description: 'The label text to display',\n    },\n    value: {\n      control: 'text',\n      description: 'The value text to display (not used for badge type)',\n    },\n    layout: {\n      control: 'select',\n      options: ['vertical', 'horizontal'],\n      description: 'Layout arrangement of label and value',\n    },\n    valueType: {\n      control: 'select',\n      options: ['text', 'icon-text', 'avatar-text', 'badge', 'link', 'icon-link'],\n      description: 'Type of value display',\n    },\n    iconName: {\n      control: 'text',\n      description: 'Icon name for icon-text and icon-link types',\n    },\n    avatarType: {\n      control: 'select',\n      options: ['initials', 'photo', 'icon'],\n      description: 'Avatar type for avatar-text type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    avatarInitials: {\n      control: 'text',\n      description: 'Avatar initials for initials type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    avatarSrc: {\n      control: 'text',\n      description: 'Avatar image source for photo type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    avatarIconName: {\n      control: 'text',\n      description: 'Avatar icon name for icon type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    badgeVariant: {\n      control: 'select',\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\n      description: 'Badge color variant',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeContentType: {\n      control: 'select',\n      options: ['text', 'icon-text', 'indicator-text'],\n      description: 'Badge content type',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeContent: {\n      control: 'text',\n      description: 'Badge content text',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeIcon: {\n      control: 'text',\n      description: 'Badge icon name for icon-text type',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeIndicatorShape: {\n      control: 'select',\n      options: ['circle', 'square'],\n      description: 'Badge indicator shape for indicator-text type',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    linkHref: {\n      control: 'text',\n      description: 'Link URL',\n      if: { arg: 'valueType', eq: 'link' },\n    },\n    linkTarget: {\n      control: 'select',\n      options: ['_blank', '_self'],\n      description: 'Link target (_blank for new tab)',\n      if: { arg: 'valueType', eq: 'link' },\n    },\n    // iconName is used for both icon-text and icon-link types\n  },\n  args: {\n    label: 'Email',\n    value: 'user@example.com',\n    layout: 'vertical',\n    valueType: 'text',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsDataTableComponent>",
                "defaultValue": "{\n  title: 'Components/Data Table',\n  component: DsDataTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixArrowUpDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n          remixEyeLine,\n          remixEditLine,\n          remixDeleteBinLine,\n          remixLoader4Line,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display in the table',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    searchable: {\n      control: 'boolean',\n      description: 'Enable global search functionality',\n    },\n    searchPlaceholder: {\n      control: 'text',\n      description: 'Placeholder text for search input',\n    },\n    paginated: {\n      control: 'boolean',\n      description: 'Enable pagination',\n    },\n    pageSize: {\n      control: 'number',\n      description: 'Number of rows per page',\n    },\n    showColumnVisibility: {\n      control: 'boolean',\n      description: 'Show column visibility toggle',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    rowClickable: {\n      control: 'boolean',\n      description: 'Make rows clickable',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DrawerStoryProps>",
                "defaultValue": "{\n  title: 'Primitives/Drawer',\n  component: DsDrawerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsDrawerComponent, DsButtonComponent, NgpDialogTrigger, NgpDialogOverlay, NgpDialog],\n    }),\n  ],\n  argTypes: {\n    position: {\n      control: 'select',\n      options: ['left', 'right'],\n      description: 'Position of the drawer',\n      defaultValue: 'right'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsEditableTableComponent>",
                "defaultValue": "{\n  title: 'Components/Editable Table',\n  component: DsEditableTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixDeleteBinLine,\n          remixDraggable,\n          remixInboxLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display and edit (two-way binding)',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    reorderable: {\n      control: 'boolean',\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\n    },\n    allowAddRow: {\n      control: 'boolean',\n      description: 'Allow adding new rows',\n    },\n    allowDeleteRow: {\n      control: 'boolean',\n      description: 'Allow deleting rows',\n    },\n    showDragHandle: {\n      control: 'boolean',\n      description: 'Show drag handle column (only when reorderable is true)',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    addRowButtonText: {\n      control: 'text',\n      description: 'Text for add row button',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsFormFieldComponent>",
                "defaultValue": "{\n  title: 'Primitives/Form Field',\n  component: DsFormFieldComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DsFormFieldComponent, DsInputComponent, NgpError],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: { layout: 'centered' },\n  argTypes: {\n    label: { control: 'text' },\n    description: { control: 'text' },\n    labelId: { control: 'text' },\n    descriptionId: { control: 'text' },\n  },\n  args: {\n    label: 'Email',\n    description: 'We will never share your email.',\n    labelId: 'email-label',\n    descriptionId: 'email-desc',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsDatepickerComponent>",
                "defaultValue": "{\n  title: 'Components/Datepicker',\n  component: DsDatepickerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n          remixCloseLine,\n          remixCalendarLine,\n        }),\n      ],\n    }),\n    moduleMetadata({\n      imports: [\n        DsDatepickerComponent, \n        ReactiveFormsModule,\n        FormsModule,\n        DsFormFieldComponent, \n        DsButtonComponent,\n        DsInputComponent,\n      ],\n    }),\n  ],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'error', 'warning', 'success'],\n      description: 'Visual variant of the datepicker calendar',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the datepicker is disabled',\n    },\n    disableFutureDates: {\n      control: 'boolean',\n      description: 'When true, disables all dates after today',\n    },\n    isDateDisabled: {\n      control: false,\n      description: 'Advanced: Custom function to determine if a specific date should be disabled. Return true to disable the date.',\n      table: {\n        type: { summary: '(date: Date) => boolean' },\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsHeaderDetailsComponent>",
                "defaultValue": "{\n  title: 'Primitives/Header Details',\n  component: DsHeaderDetailsComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsDataItemComponent]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      story: {\n        inline: true,\n        height: 'auto'\n      },\n      description: {\n        component: `\n# Header Details Component\n\nA specialized header component designed for entity detail pages such as Properties, Leases, Inquiries, Assets, and other business entities. It provides a consistent layout with a title row, configurable actions, and flexible content slots for metadata display.\n\n## Design Principles\n\n- **Consistent Spacing**: 24px top padding and gaps for visual hierarchy\n- **Content-First**: Responsive width (10/12 columns of parent) ensures optimal reading experience  \n- **Action-Oriented**: Prominent placement of primary and secondary actions\n- **Flexible Content**: Slot-based architecture for customizable metadata layouts\n- **Responsive**: Adapts gracefully from desktop to mobile viewports\n\n## Anatomy\n\n\\`\\`\\`\n┌─────────────────────────────────────────────────────────────┐\n│  24px padding-top                                           │\n│  ┌───────────────────────────────────────────────────────┐  │\n│  │ Title Row                                             │  │\n│  │ ┌─────────────────┐           ┌─────────────────────┐ │  │\n│  │ │ Entity Title    │           │ Action Buttons      │ │  │\n│  │ │ (H1, 2xl-medium)│           │ [Primary][Secondary]│ │  │\n│  │ └─────────────────┘           └─────────────────────┘ │  │\n│  └───────────────────────────────────────────────────────┘  │\n│  24px gap                                                   │\n│  ┌───────────────────────────────────────────────────────┐  │\n│  │ Details Row (Content Projection)                     │  │\n│  │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐     │  │\n│  │ │ Data Item 1 │ │ Data Item 2 │ │ Data Item 3 │ ... │  │\n│  │ └─────────────┘ └─────────────┘ └─────────────┘     │  │\n│  └───────────────────────────────────────────────────────┘  │\n│  Width: 83.33% (10/12 columns of parent), centered        │\n└─────────────────────────────────────────────────────────────┘\n\\`\\`\\`\n\n## Usage\n\nPerfect for entity detail pages where you need to display:\n- Entity title (e.g., property name, lease reference)\n- Action buttons (edit, delete, follow, etc.)\n- Metadata items using ds-data-item components\n\nThe details row uses content projection with \\`slot=\"details\"\\` to allow flexible arrangement of data items.\n\n## Content Projection\n\n\\`\\`\\`html\n<ds-header-details title=\"Entity Name\">\n  <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 24px;\">\n    <ds-data-item label=\"Field 1\" value=\"Value 1\" layout=\"horizontal\" />\n    <ds-data-item label=\"Field 2\" value=\"Value 2\" layout=\"horizontal\" />\n  </div>\n</ds-header-details>\n\\`\\`\\`\n\n## Best Practices\n\n### Do ✅\n- Use descriptive, entity-specific titles\n- Limit to 2-3 primary actions to avoid overwhelming users\n- Use horizontal layout for data items in the details row\n- Provide meaningful action labels and icons\n\n### Don't ❌\n- Don't use generic titles like \"Details\" or \"Entity\"\n- Don't overcrowd the actions area with too many buttons\n- Don't mix vertical and horizontal data item layouts\n- Don't forget to handle action click events\n\n## Responsive Behavior\n\n- **Desktop (>768px)**: Full horizontal layout with side-by-side title and actions\n- **Tablet (≤768px)**: Title and actions stack vertically with reduced spacing  \n- **Mobile (≤480px)**: Compact spacing and optimized touch targets\n        `\n      }\n    }\n  },\n  argTypes: {\n    title: {\n      control: 'text',\n      description: 'The main title displayed in the header'\n    },\n    showPrimaryAction: {\n      control: 'boolean',\n      description: 'Whether to show the primary action button'\n    },\n    primaryActionText: {\n      control: 'text',\n      description: 'Text for the primary action button'\n    },\n    primaryActionIcon: {\n      control: 'text',\n      description: 'Icon for the primary action button'\n    },\n    primaryActionVariant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\n      description: 'Visual variant for the primary action button'\n    },\n    showSecondaryAction: {\n      control: 'boolean',\n      description: 'Whether to show the secondary action button'\n    },\n    secondaryActionText: {\n      control: 'text',\n      description: 'Text for the secondary action button'\n    },\n    secondaryActionIcon: {\n      control: 'text',\n      description: 'Icon for the secondary action button'\n    },\n    secondaryActionVariant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\n      description: 'Visual variant for the secondary action button'\n    },\n    showMoreActions: {\n      control: 'boolean',\n      description: 'Whether to show the more actions (three dots) button'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsIconComponent>",
                "defaultValue": "{\n  title: 'Primitives/Icon',\n  component: DsIconComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    name: {\n      control: { type: 'text' },\n      description: 'The name of the icon to display',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\n      description: 'The size of the icon (pixel values or custom CSS value)',\n    },\n    color: {\n      control: { type: 'text' },\n      description: 'The color of the icon. Use predefined values (primary, secondary, tertiary, brand, success, warning, destructive) or any CSS color value (#hex, rgb(), hsl(), var(), etc.)',\n    },\n    interactive: {\n      control: { type: 'boolean' },\n      description: 'Whether the icon has interactive states (hover, active)',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsInputComponent>",
                "defaultValue": "{\n  title: 'Primitives/Input',\n  component: DsInputComponent,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      }\n    }\n  },\n  decorators: [\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\n    )\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\n    type: { control: { type: 'select' }, options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'] },\n    placeholder: { control: 'text' },\n    disabled: { control: 'boolean' },\n    readonly: { control: 'boolean' },\n    required: { control: 'boolean' },\n    clearable: { control: 'boolean' },\n    ghost: { control: 'boolean' },\n    leadingIcon: { control: 'text' },\n    trailingIcon: { control: 'text' },\n    ariaLabel: { control: 'text' },\n    ariaDescribedBy: { control: 'text' },\n  },\n  args: {\n    variant: 'default',\n    type: 'text',\n    placeholder: 'Enter text...',\n    disabled: false,\n    readonly: false,\n    required: false,\n    clearable: false,\n    ghost: false,\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsLabelComponent>",
                "defaultValue": "{\n  title: 'Primitives/Label',\n  component: DsLabelComponent,\n  tags: ['autodocs'],\n  parameters: { layout: 'centered' },\n  decorators: [\n    moduleMetadata({\n      imports: [DsInputComponent],\n    })\n  ],\n  argTypes: {\n    className: {\n      control: 'text',\n      description: 'Additional CSS classes to apply to the label',\n    },\n    for: {\n      control: 'text',\n      description: 'The ID of the form control this label is associated with',\n    },\n    id: {\n      control: 'text',\n      description: 'The ID of the label element',\n    },\n    size: {\n      control: 'radio',\n      options: ['sm', 'md'],\n      description: 'The size of the label text (sm = ui-xs-regular, md = ui-sm-regular)',\n      defaultValue: 'md',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsLinkComponent>",
                "defaultValue": "{\n  title: 'Primitives/Link',\n  component: DsLinkComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    href: {\n      control: 'text',\n    },\n    target: {\n      control: 'select',\n      options: ['_self', '_blank', '_parent', '_top'],\n    },\n    rel: {\n      control: 'text',\n    },\n    content: {\n      control: 'text',\n    },\n    showIcon: {\n      control: 'boolean',\n    },\n    iconName: {\n      control: 'text',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list/ds-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsListComponent>",
                "defaultValue": "{\n  title: 'Primitives/List',\n  component: DsListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DsListItemComponent, DsButtonComponent, DsMetadataItemComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA container component that provides consistent styling for lists of items.\nHandles border radius, dividers, and spacing automatically.\n\n## Features\n- Consistent border radius handling\n- Automatic dividers between items\n- Proper hover state management\n- Responsive padding and spacing\n\n## Usage\n\\`\\`\\`html\n<ds-list>\n  <ds-list-item title=\"First item\">\n    <div slot=\"metadata\">\n      <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n    </div>\n    <div slot=\"actions\">\n      <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n      <ds-button variant=\"primary\" size=\"sm\">Action</ds-button>\n    </div>\n  </ds-list-item>\n  <ds-list-item title=\"Second item\">...</ds-list-item>\n</ds-list>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsListItemComponent>",
                "defaultValue": "{\n  title: 'Primitives/List Item',\n  component: DsListItemComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DsButtonComponent, DsMetadataItemComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA versatile list item component that supports a title with metadata and action buttons.\n\n## Features\n\n- **Title Property**: Configurable title with consistent typography\n- **Metadata Slot**: Flexible slot for metadata items (status, timestamps, etc.)\n- **Actions Slot**: Action buttons that appear on hover\n- **Hover State**: Subtle background change and action reveal on hover\n- **Responsive Layout**: Adapts to different screen sizes\n\n## Slots\n\n- **metadata**: For metadata items like status indicators, timestamps, etc.\n- **actions**: For action buttons that appear on hover\n\n## Examples\n\n\\`\\`\\`html\n<ds-list-item title=\"Review pending changes\">\n  <!-- Metadata slot -->\n  <div slot=\"metadata\">\n    <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n    <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to John\" />\n  </div>\n  \n  <!-- Actions slot -->\n  <div slot=\"actions\">\n    <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n    <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\n  </div>\n</ds-list-item>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    title: {\n      control: 'text',\n      description: 'The title text to display',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsListboxComponent>",
                "defaultValue": "{\n  title: 'Primitives/Listbox',\n  component: DsListboxComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [FormsModule, DsButtonComponent, DsIconButtonComponent],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n  argTypes: {\n    multiple: {\n      control: 'boolean',\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    width: {\n      control: 'text',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsLoadingLabelComponent>",
                "defaultValue": "{\n  title: 'Primitives/Loading Label',\n  component: DsLoadingLabelComponent,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nA loading label component that displays a sequence of messages with smooth transitions.\nFeatures:\n- Vertical slide transitions between messages\n- Animated ellipsis dots\n- Customizable text styling via design system classes\n- Automatic message cycling\n        `,\n      },\n    },\n  },\n  argTypes: {\n    messages: {\n      control: 'object',\n      description: 'Array of loading messages to cycle through',\n    },\n    styleClass: {\n      control: 'select',\n      options: [\n        'body-sm-regular',\n        'body-sm-medium',\n        'body-sm-semiBold',\n        'body-base-regular',\n        'body-base-medium',\n        'body-base-semiBold',\n        'body-lg-regular',\n        'body-lg-medium',\n        'body-lg-semiBold',\n      ],\n      description: 'CSS class to apply for text styling',\n    },\n    spinnerSize: {\n      control: 'text',\n      description: 'Size of the spinner in pixels',\n    },\n    useShimmer: {\n      control: 'boolean',\n      description: 'Whether to apply shimmer effect to the text',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsMenuComponent>",
                "defaultValue": "{\n  title: 'Primitives/Menu',\n  component: DsMenuComponent,\n  tags: ['autodocs'],\n  decorators: [\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\">${story}</div>`\n    ),\n    applicationConfig({\n      providers: [],\n    }),\n  ],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsMetadataItemComponent>",
                "defaultValue": "{\n  title: 'Primitives/Metadata Item',\n  component: DsMetadataItemComponent,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA compact component for displaying metadata information with an icon and text. Perfect for status indicators, timestamps, and other supplementary information.\n\n## Features\n\n- **Compact Design**: 20px height with 4px gap between icon and text\n- **Consistent Typography**: Uses ui-xs-regular (12px) for text\n- **Semantic Colors**: Uses tertiary text color for both icon and text\n- **Tooltip Support**: Optional tooltip for additional context\n- **Accessible**: Follows WCAG guidelines for color contrast and interactive elements\n\n## Usage Guidelines\n\n1. Use for supplementary information that doesn't require user interaction\n2. Keep text content concise and clear\n3. Choose appropriate icons that enhance understanding\n4. Add tooltips for additional context when needed\n5. Group related metadata items with consistent spacing\n\n## Examples\n\n\\`\\`\\`html\n<!-- Basic usage -->\n<ds-metadata-item\n  icon=\"remixTimeLine\"\n  value=\"4 hours ago\"\n/>\n\n<!-- With tooltip -->\n<ds-metadata-item\n  icon=\"remixSurveyLine\"\n  value=\"Based on 12 inquiries\"\n  tooltip=\"Data collected from recent customer inquiries\"\n/>\n\n<!-- Multiple items -->\n<div style=\"display: flex; gap: 12px;\">\n  <ds-metadata-item\n    icon=\"remixSparklingFill\"\n    value=\"Important\"\n  />\n  <ds-metadata-item\n    icon=\"remixTimeLine\"\n    value=\"4 hours ago\"\n  />\n</div>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    icon: {\n      control: 'text',\n      description: 'The name of the icon to display',\n    },\n    value: {\n      control: 'text',\n      description: 'The text value to display',\n    },\n    tooltip: {\n      control: 'text',\n      description: 'Optional tooltip text for additional context',\n    },\n  },\n  args: {\n    icon: 'remixTimeLine',\n    value: '4 hours ago',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsSelectComponent>",
                "defaultValue": "{\n  title: 'Primitives/Select',\n  component: DsSelectComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [FormsModule],\n    }),\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\n    )\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'error', 'warning', 'success'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    required: {\n      control: 'boolean',\n    },\n    ghost: {\n      control: 'boolean',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsShapeIndicatorComponent>",
                "defaultValue": "{\n  title: 'Primitives/Shape Indicator',\n  component: DsShapeIndicatorComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    shape: {\n      control: 'select',\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\n    },\n    variant: {\n      control: 'select',\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\n    },\n    label: {\n      control: 'text',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsSidebarComponent>",
                "defaultValue": "{\n  title: 'Application shell/Sidebar',\n  component: DsSidebarComponent,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      story: { inline: true },\n      source: { excludeDecorators: true }\n    }\n  },\n  tags: ['autodocs'],\n  args: {\n    groups: demoGroups,\n  },\n  argTypes: {\n    groups: {\n      description: 'Array of sidebar groups with their items',\n      control: 'object',\n      table: {\n        type: { \n          summary: 'SidebarGroup[]',\n          detail: `interface SidebarGroup {\n  id: string;\n  label: string;\n  items: {\n    id: string;\n    label: string;\n    icon?: string;\n    badgeText?: string;\n  }[];\n  expanded?: boolean;\n  showLabel?: boolean;\n}`\n        }\n      }\n    },\n    activeItemId: {\n      description: 'ID of the currently active item',\n      control: 'text'\n    },\n    collapsed: {\n      description: 'Whether the sidebar is collapsed',\n      control: 'boolean'\n    },\n    showGlobalAction: {\n      description: 'Whether to show the global action button',\n      control: 'boolean'\n    },\n    globalActionLabel: {\n      description: 'Label for the global action button',\n      control: 'text'\n    },\n    globalActionIcon: {\n      description: 'Icon for the global action button',\n      control: 'text'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AiSparksLoadingComponent>",
                "defaultValue": "{\n  title: 'Primitives/AISparksLoading',\n  component: AiSparksLoadingComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    sparkImagePath: {\n      control: { type: 'text' },\n      description: 'Path to the spark image asset'\n    },\n    isLoading: {\n      control: { type: 'boolean' },\n      description: 'Whether the loading animation is active'\n    },\n    customSparks: {\n      control: { type: 'object' },\n      description: 'Optional custom spark configurations'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AiSparksStaticComponent>",
                "defaultValue": "{\n  title: 'Primitives/AISparksStatic',\n  component: AiSparksStaticComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    sparkImagePath: {\n      control: { type: 'text' },\n      description: 'Path to the spark image asset'\n    },\n    animationState: {\n      control: { type: 'select' },\n      options: ['appear', 'static', 'disappear'],\n      description: 'Current animation state'\n    },\n    customSparks: {\n      control: { type: 'object' },\n      description: 'Optional custom spark configurations'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsSpinnerComponent>",
                "defaultValue": "{\n  title: 'Primitives/Spinner',\n  component: DsSpinnerComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\n      description: 'Size of the spinner',\n      table: {\n        defaultValue: { summary: '20px' }\n      }\n    },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'tertiary', 'brand', 'success', 'warning', 'destructive'],\n      description: 'Color of the spinner',\n      table: {\n        defaultValue: { summary: 'tertiary' }\n      }\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTabs>",
                "defaultValue": "{\n  title: 'Primitives/Tabs',\n  component: DsTabs,\n  decorators: [\n    moduleMetadata({\n      imports: [DsTabs, DsTab],\n    }),\n  ],\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTextareaComponent>",
                "defaultValue": "{\n  title: 'Primitives/Textarea',\n  component: DsTextareaComponent,\n  parameters: { layout: 'centered' },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\n    placeholder: { control: 'text' },\n    disabled: { control: 'boolean' },\n    readonly: { control: 'boolean' },\n    required: { control: 'boolean' },\n    rows: { control: { type: 'number', min: 1, max: 20 } },\n    cols: { control: { type: 'number', min: 10, max: 100 } },\n    maxlength: { control: { type: 'number', min: 1, max: 1000 } },\n    minlength: { control: { type: 'number', min: 0, max: 100 } },\n    ariaLabel: { control: 'text' },\n    ariaDescribedBy: { control: 'text' },\n    ariaLabelledBy: { control: 'text' },\n  },\n  args: {\n    variant: 'default',\n    size: 'md',\n    placeholder: 'Enter your message...',\n    disabled: false,\n    readonly: false,\n    required: false,\n    rows: 4,\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTileComponent>",
                "defaultValue": "{\n  title: 'Layout/Tile',\n  component: DsTileComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixEditLine,\n          remixMoreLine,\n          remixFileList3Line,\n          remixUserLine,\n          remixDownloadLine,\n          remixFilterLine,\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n        }),\n      ],\n    }),\n    moduleMetadata({\n      imports: [\n        DsTileSectionComponent,\n        TileHeaderComponent,\n        DsButtonComponent,\n        DsIconButtonComponent,\n        DsIconComponent,\n        DsAvatarComponent,\n        DsDataTableComponent,\n        DsBadgeComponent,\n        DsDataItemComponent,\n        DsMetadataItemComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    orientation: {\n      control: 'select',\n      options: ['vertical', 'horizontal'],\n      description: 'Layout orientation of tile sections',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTooltipComponent>",
                "defaultValue": "{\n  title: 'Primitives/Tooltip',\n  component: DsTooltipComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    text: {\n      control: { type: 'text' },\n      description: 'The text content to display in the tooltip',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DsTopbarComponent>",
                "defaultValue": "{\n  title: 'Application shell/Topbar',\n  component: DsTopbarComponent,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: 'A page header component that displays a page title with icon on the left and action buttons with user avatar on the right. Can optionally show breadcrumb navigation for nested pages.',\n      },\n    },\n  },\n  argTypes: {\n    pageTitle: {\n      control: 'text',\n      description: 'The title of the page',\n    },\n    iconName: {\n      control: 'text',\n      description: 'Icon name to display next to the page title',\n    },\n    userInitials: {\n      control: 'text',\n      description: 'User initials to display in the avatar',\n    },\n    showBreadcrumbs: {\n      control: 'boolean',\n      description: 'Whether to show breadcrumb navigation',\n    },\n    breadcrumbItems: {\n      control: 'object',\n      description: 'Array of breadcrumb items to display',\n    },\n    showFirstAction: {\n      control: 'boolean',\n      description: 'Whether to show the first action button',\n    },\n    firstActionIcon: {\n      control: 'text',\n      description: 'Icon name for the first action button',\n    },\n    firstActionLabel: {\n      control: 'text',\n      description: 'Aria label for the first action button',\n    },\n    showSecondAction: {\n      control: 'boolean',\n      description: 'Whether to show the second action button',\n    },\n    secondActionIcon: {\n      control: 'text',\n      description: 'Icon name for the second action button',\n    },\n    secondActionLabel: {\n      control: 'text',\n      description: 'Aria label for the second action button',\n    },\n  },\n  args: {\n    pageTitle: 'Dashboard',\n    iconName: 'remixHome4Line',\n    userInitials: 'JD',\n    showBreadcrumbs: false,\n    breadcrumbItems: [],\n    showFirstAction: true,\n    firstActionIcon: 'remixNotification3Line',\n    firstActionLabel: 'Notifications',\n    showSecondAction: true,\n    secondActionIcon: 'remixSettings3Line',\n    secondActionLabel: 'Settings',\n  },\n}"
            },
            {
                "name": "MinimalNoActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Minimal header example with no action buttons, useful for read-only entity displays or when actions are handled elsewhere on the page.'\n      }\n    }\n  },\n  args: {\n    title: 'Simple Entity Details',\n    showPrimaryAction: false,\n    showSecondaryAction: false,\n    showMoreActions: false\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Created\"\n            value=\"March 15, 2024\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n          <ds-data-item\n            label=\"Last Modified\"\n            value=\"Yesterday\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
            },
            {
                "name": "MobileView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Mobile Responsive Header',\n    showPrimaryAction: true,\n    primaryActionText: 'Edit',\n    primaryActionIcon: 'remixEditLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'Share',\n    secondaryActionIcon: 'remixShareLine',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1'\n    },\n    docs: {\n      description: {\n        story: 'Mobile responsive behavior showing how the header adapts to smaller screens with stacked layout and compact spacing. Data items switch to vertical layout for better mobile experience.'\n      }\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Owner\"\n            value=\"John Doe\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"JD\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
            },
            {
                "name": "MobileViewWithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n  args: {\n    pageTitle: 'Account Details',\n    iconName: 'remixSmartphoneLine',\n    userInitials: 'MB',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Settings', path: '/settings', isLast: false },\n      { label: 'Account', path: '/settings/account', isLast: false },\n      { label: 'Details', path: '/settings/account/details', isLast: true }\n    ],\n  },\n}"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'multiple'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-accordion [type]=\"type\">\n        <ds-accordion-item value=\"features\" heading=\"Key Features\">\n          <ul class=\"tw-list-disc\">\n            <li>Property Management</li>\n            <li>Tenant Portal</li>\n            <li>Maintenance Tracking</li>\n            <li>Financial Reports</li>\n          </ul>\n        </ds-accordion-item>\n        <ds-accordion-item value=\"pricing\" heading=\"Pricing Plans\">\n          <ul class=\"tw-list-disc\">\n            <li>Basic: Free</li>\n            <li>Professional: $29/month</li>\n            <li>Enterprise: Custom pricing</li>\n          </ul>\n        </ds-accordion-item>\n        <ds-accordion-item value=\"support\" heading=\"Support Options\">\n          <ul class=\"tw-list-disc\">\n            <li>24/7 Email Support</li>\n            <li>Live Chat</li>\n            <li>Phone Support (Enterprise)</li>\n          </ul>\n        </ds-accordion-item>\n      </ds-accordion>\n    `\n  })\n}"
            },
            {
                "name": "MultipleActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Document Manager</header-title>\n            <header-actions>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixFilterLine\">Filter</ds-button>\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">New</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">Manage your documents with multiple action options.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "MultipleSectionsHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"horizontal\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Overview</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\n            <ds-data-item \n              label=\"Total Revenue\" \n              value=\"$45,231\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-lg'\" />\n            <ds-data-item \n              label=\"Growth\" \n              value=\"+20.1%\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-md tw-text-success-strong'\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Activity</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\n            <ds-data-item \n              label=\"New Users\" \n              value=\"1,234\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-lg'\" />\n            <ds-data-item \n              label=\"Conversion\" \n              value=\"3.2%\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-md'\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "MultipleSectionsVertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Personal Information</header-title>\n            <header-actions>\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Name\" value=\"Jane Smith\" layout=\"horizontal\" />\n            <ds-data-item label=\"Email\" value=\"jane.smith@example.com\" layout=\"horizontal\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Account Settings</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Plan\" value=\"Professional\" layout=\"horizontal\" />\n            <ds-data-item \n              label=\"Status\" \n              value=\"Active\" \n              valueType=\"badge\"\n              layout=\"horizontal\"\n              badgeVariant=\"success\"\n              badgeContent=\"Active\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Preferences</header-title>\n            <header-actions>\n              <ds-button size=\"sm\" variant=\"ghost\">Reset</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">Configure your application preferences here.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Read', value: 'read' },\n      { id: '2', label: 'Write', value: 'write' },\n      { id: '3', label: 'Delete', value: 'delete' },\n      { id: '4', label: 'Admin', value: 'admin' },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Select Permissions</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "NestedPageWithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'Edit Profile',\n    iconName: 'remixUser3Line',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Settings', path: '/settings', isLast: false },\n      { label: 'Users', path: '/settings/users', isLast: false },\n      { label: 'Edit Profile', path: '/settings/users/profile', isLast: true }\n    ],\n  },\n}"
            },
            {
                "name": "NoActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'Read Only Page',\n    iconName: 'remixEyeLine',\n    userInitials: 'RO',\n    showFirstAction: false,\n    showSecondAction: false,\n  },\n}"
            },
            {
                "name": "NoDeleteAllowed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      lockedData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"lockedData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"false\"\n        [addRowButtonText]=\"'Add line'\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "NoDragHandle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      noDragData: signal([...sampleProducts]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"noDragData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [showDragHandle]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "Overview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'The Header Details component provides a consistent layout for entity detail pages with configurable actions and flexible metadata display.'\n      }\n    }\n  },\n  args: {\n    title: 'Entity Detail Example',\n    showPrimaryAction: true,\n    primaryActionText: 'Edit',\n    primaryActionIcon: 'remixEditLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'Share',\n    secondaryActionIcon: 'remixShareLine',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n        (primaryActionClick)=\"onPrimaryAction($event)\"\n        (secondaryActionClick)=\"onSecondaryAction($event)\"\n        (moreActionsClick)=\"onMoreActions($event)\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Owner\"\n            value=\"Sarah Johnson\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"SJ\"\n          />\n          <ds-data-item\n            label=\"Created\"\n            value=\"March 15, 2024\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n          <ds-data-item\n            label=\"Category\"\n            value=\"Important\"\n            layout=\"vertical\"\n            valueType=\"icon-text\"\n            iconName=\"remixStarFill\"\n          />\n        </div>\n      </ds-header-details>\n    `,\n    methods: {\n      onPrimaryAction: (event: MouseEvent) => {\n        console.log('Primary action clicked:', event);\n      },\n      onSecondaryAction: (event: MouseEvent) => {\n        console.log('Secondary action clicked:', event);\n      },\n      onMoreActions: (event: MouseEvent) => {\n        console.log('More actions clicked:', event);\n      }\n    }\n  })\n}"
            },
            {
                "name": "PastAndCurrentDatesOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker [disableFutureDates]=\"true\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Past Date\n        </ds-button>\n      </ds-datepicker>\n      <p class=\"body-sm-regular tw-mt-2 tw-text-gray-600\">Future dates are disabled</p>\n    `,\n  }),\n}"
            },
            {
                "name": "Pentagon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    shape: 'pentagon',\n    variant: 'brand',\n    label: 'Maintenance',\n  },\n}"
            },
            {
                "name": "PhotoType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n            alt=\"John Doe\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face\"\n            alt=\"Alice Smith\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\"\n            alt=\"Michael Johnson\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\"\n            alt=\"Emily Brown\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideAllRemixIcons()\n      ]\n    })\n  ],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n    options: {\n      storySort: {\n        order: ['*'],\n        method: 'alphabetical'\n      },\n    },\n  },\n}"
            },
            {
                "name": "priorityOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 'low', label: 'Low', value: 'Low' },\n  { id: 'medium', label: 'Medium', value: 'Medium' },\n  { id: 'high', label: 'High', value: 'High' },\n]"
            },
            {
                "name": "productColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const price = info.getValue() as number;\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\n    },\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const stock = info.getValue() as number;\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\n    },\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        in_stock: 'success',\n        low_stock: 'warning',\n        out_of_stock: 'destructive',\n      };\n      const variant = variantMap[status] || 'grey';\n      const label = status.replace('_', ' ').toUpperCase();\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\n    },\n  },\n]"
            },
            {
                "name": "productColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter product name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'sku',\n    header: 'SKU',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'SKU-000'\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: categoryOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 1,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n]"
            },
            {
                "name": "Products",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    searchPlaceholder: 'Search products...',\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\n      },\n    },\n  },\n}"
            },
            {
                "name": "ProductsSortable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      productData: signal([...sampleProducts]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        sku: '',\n        category: 'Electronics',\n        price: 0,\n        stock: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onSortingChanged: (sorting: any) => {\n        console.log('Sorting changed:', sorting);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"productData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add product'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (sortingChanged)=\"onSortingChanged($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "ProjectOverview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'Project Overview',\n    iconName: 'remixFolderLine',\n    userInitials: 'AM',\n  },\n}"
            },
            {
                "name": "PropertyDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real estate property management example showing how to display property information with relevant actions like editing and viewing related leases.'\n      }\n    }\n  },\n  args: {\n    title: 'Sunset Boulevard Apartments',\n    showPrimaryAction: true,\n    primaryActionText: 'Edit Property',\n    primaryActionIcon: 'remixEditLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'View Leases',\n    secondaryActionIcon: 'remixFileList3Line',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Property Type\"\n            value=\"Residential\"\n            layout=\"vertical\"\n            valueType=\"icon-text\"\n            iconName=\"remixHome4Line\"\n          />\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Owner\"\n            value=\"Sarah Johnson\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"SJ\"\n          />\n          <ds-data-item\n            label=\"Units\"\n            value=\"24 units\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
            },
            {
                "name": "Readonly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { readonly: true, placeholder: 'Readonly input' },\n}"
            },
            {
                "name": "ReadOnlyMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      readOnlyData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"readOnlyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"false\"\n        [allowDeleteRow]=\"false\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\n      },\n    },\n  },\n}"
            },
            {
                "name": "ResponsiveLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <p style=\"margin: 0; font-size: 14px; color: var(--text-color-default-secondary);\">\n          Resize your browser to see the responsive behavior. Horizontal tiles stack vertically on mobile, \n          and section headers stack their title and actions.\n        </p>\n        \n        <ds-tile orientation=\"horizontal\">\n          <ds-tile-section>\n            <tile-header>\n              <header-title>Left Section</header-title>\n              <header-actions>\n                <ds-button size=\"sm\" variant=\"ghost\">Action</ds-button>\n              </header-actions>\n            </tile-header>\n            <p style=\"margin: 0;\">This section is on the left on desktop and stacks on top on mobile.</p>\n          </ds-tile-section>\n          \n          <ds-tile-section>\n            <tile-header>\n              <header-title>Right Section</header-title>\n              <header-actions>\n                <ds-button size=\"sm\">Action</ds-button>\n              </header-actions>\n            </tile-header>\n            <p style=\"margin: 0;\">This section is on the right on desktop and stacks below on mobile.</p>\n          </ds-tile-section>\n        </ds-tile>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "RightDrawer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    position: 'right'\n  },\n  render: Template\n}"
            },
            {
                "name": "sampleInvoiceLines",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InvoiceLine[]",
                "defaultValue": "[\n  { \n    id: '1', \n    name: 'Administration fee', \n    description: 'Covers handling and coordination', \n    quantity: 1, \n    unitPrice: 500, \n    discount: 0, \n    total: 500 \n  },\n  { \n    id: '2', \n    name: 'Miscellaneous', \n    description: 'Various small items', \n    quantity: 2, \n    unitPrice: 400, \n    discount: 0, \n    total: 800 \n  },\n  { \n    id: '3', \n    name: 'Technical Manager', \n    description: 'Consulting services', \n    quantity: 6.5, \n    unitPrice: 800, \n    discount: 0, \n    total: 5200 \n  },\n]"
            },
            {
                "name": "sampleInvoiceLines",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InvoiceLine[]",
                "defaultValue": "[\n  { id: 1, description: 'Professional Services - Consulting', quantity: 10, unitPrice: 150.00, total: 1500.00 },\n  { id: 2, description: 'Software License - Annual', quantity: 5, unitPrice: 299.99, total: 1499.95 },\n  { id: 3, description: 'Cloud Hosting - Monthly', quantity: 12, unitPrice: 49.99, total: 599.88 },\n  { id: 4, description: 'Support & Maintenance', quantity: 1, unitPrice: 999.00, total: 999.00 },\n]"
            },
            {
                "name": "sampleProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Product[]",
                "defaultValue": "[\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\n]"
            },
            {
                "name": "sampleProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Product[]",
                "defaultValue": "[\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\n]"
            },
            {
                "name": "sampleTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Task[]",
                "defaultValue": "[\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\n]"
            },
            {
                "name": "sampleUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "User[]",
                "defaultValue": "[\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\n]"
            },
            {
                "name": "SectionWithoutHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <p style=\"margin: 0;\">This section has no header, just content with default padding.</p>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Section with Header</header-title>\n          </tile-header>\n          <p style=\"margin: 0;\">This section has a header for comparison.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "SectionWithoutPadding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>With Padding (Default)</header-title>\n          </tile-header>\n          <div style=\"background: #f0f0f0; padding: 8px; border-radius: 4px;\">\n            This content has the default 20px padding around it.\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section [padding]=\"false\">\n          <div style=\"background: #f0f0f0; padding: 20px;\">\n            This content has no section padding. The gray box extends to the edges.\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "SimpleIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'remixEditLine',\n    variant: 'ghost',\n    size: 'md',\n    ariaLabel: 'Edit item',\n    tooltip: 'Edit this item'\n  }\n}"
            },
            {
                "name": "simpleOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsListboxOption[]",
                "defaultValue": "[\n  { id: '1', label: 'Option 1', value: 1 },\n  { id: '2', label: 'Option 2', value: 2 },\n  { id: '3', label: 'Option 3', value: 3 },\n  { id: '4', label: 'Option 4', value: 4 },\n]"
            },
            {
                "name": "simpleOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DsSelectOption[]",
                "defaultValue": "[\n  { id: '1', label: 'Option 1', value: 1 },\n  { id: '2', label: 'Option 2', value: 2 },\n  { id: '3', label: 'Option 3', value: 3 },\n  { id: '4', label: 'Option 4', value: 4 },\n]"
            },
            {
                "name": "Single",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'single',\n    collapsible: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-accordion [type]=\"type\" [collapsible]=\"collapsible\">\n        <ds-accordion-item value=\"item-1\" heading=\"What is Propbinder?\">\n          Propbinder is a modern property management platform that helps you manage your properties efficiently.\n        </ds-accordion-item>\n        <ds-accordion-item value=\"item-2\" heading=\"How does it work?\">\n          Our platform provides tools for property listing, tenant management, maintenance tracking, and financial reporting.\n        </ds-accordion-item>\n        <ds-accordion-item value=\"item-3\" heading=\"Is it secure?\">\n          Yes, we use industry-standard encryption and security practices to protect your data.\n        </ds-accordion-item>\n      </ds-accordion>\n    `\n  })\n}"
            },
            {
                "name": "SingleAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'Profile',\n    iconName: 'remixUser3Line',\n    userInitials: 'SA',\n    showFirstAction: true,\n    showSecondAction: false,\n    firstActionIcon: 'remixEditLine',\n    firstActionLabel: 'Edit Profile',\n  },\n}"
            },
            {
                "name": "SingleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    multiple: false,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Select Option</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (24px)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (32px)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (48px)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (64px)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <ds-button size=\"sm\">Small</ds-button>\n        <ds-button size=\"md\">Medium</ds-button>\n        <ds-button size=\"lg\">Large</ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\n        <ds-icon-button\n          icon=\"remixSettingsLine\"\n          variant=\"ghost\"\n          size=\"sm\"\n          ariaLabel=\"Small settings button\"\n          tooltip=\"Settings (small)\"\n        />\n        <ds-icon-button\n          icon=\"remixSettingsLine\"\n          variant=\"ghost\"\n          size=\"md\"\n          ariaLabel=\"Medium settings button\"\n          tooltip=\"Settings (medium)\"\n        />\n        <ds-icon-button\n          icon=\"remixSettingsLine\"\n          variant=\"ghost\"\n          size=\"lg\"\n          ariaLabel=\"Large settings button\"\n          tooltip=\"Settings (large)\"\n        />\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox size=\"sm\" label=\"Small checkbox\"></ds-checkbox>\n        <ds-checkbox size=\"md\" label=\"Medium checkbox\"></ds-checkbox>\n        <ds-checkbox size=\"lg\" label=\"Large checkbox\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <ds-icon name=\"remixHomeLine\" size=\"12px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"14px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"16px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"18px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"20px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"22px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"24px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"32px\"></ds-icon>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    className: '',\n  },\n  render: () => ({\n    styles: [`\n      :host {\n        display: block;\n        padding: 1rem;\n        background: white;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n      }\n    `],\n    template: `\n      <div class=\"container\">\n        <ds-label size=\"sm\">\n          Small Label (ui-xs-regular)\n        </ds-label>\n        <ds-label size=\"md\">\n          Medium Label (ui-sm-regular)\n        </ds-label>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\n        <ds-textarea size=\"sm\" placeholder=\"Small textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea size=\"md\" placeholder=\"Medium textarea\" rows=\"4\"></ds-textarea>\n        <ds-textarea size=\"lg\" placeholder=\"Large textarea\" rows=\"5\"></ds-textarea>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "SlotContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    href: '#',\n    showIcon: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\">\n        Link with <strong>formatted</strong> content\n      </ds-link>\n    `,\n  }),\n}"
            },
            {
                "name": "SlotContentWithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    href: 'mailto:contact@example.com',\n    showIcon: true,\n    iconName: 'remixMailLine',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\" [iconName]=\"iconName\">\n        Send us an <em>email</em>\n      </ds-link>\n    `,\n  }),\n}"
            },
            {
                "name": "Square",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    shape: 'square',\n    variant: 'destructive',\n    label: 'Stage tags',\n  },\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button>Normal</ds-button>\n        <ds-button [disabled]=\"true\">Disabled</ds-button>\n        <ds-button [loading]=\"true\">Loading</ds-button>\n        <ds-button [pressed]=\"true\" variant=\"ghost\">Pressed</ds-button>\n        <ds-button \n          [expanded]=\"true\" \n          trailingIcon=\"remixArrowDownLine\"\n          variant=\"secondary\"\n        >\n          Expanded\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox label=\"Unchecked checkbox\"></ds-checkbox>\n        <ds-checkbox label=\"Checked checkbox\" [checked]=\"true\"></ds-checkbox>\n        <ds-checkbox label=\"Indeterminate checkbox\" [indeterminate]=\"true\"></ds-checkbox>\n        <ds-checkbox label=\"Disabled checkbox\" [disabled]=\"true\"></ds-checkbox>\n        <ds-checkbox label=\"Disabled checked checkbox\" [disabled]=\"true\" [checked]=\"true\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "States",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\n        <ds-textarea placeholder=\"Normal textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea placeholder=\"Disabled textarea\" [disabled]=\"true\" rows=\"3\"></ds-textarea>\n        <ds-textarea placeholder=\"Readonly textarea\" [readonly]=\"true\" rows=\"3\"></ds-textarea>\n        <ds-textarea placeholder=\"Required textarea\" [required]=\"true\" rows=\"3\"></ds-textarea>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Static",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    type: 'initials',\n    size: 'md',\n    initials: 'JD',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n        <ds-avatar \n          [type]=\"type\"\n          [size]=\"size\"\n          [initials]=\"initials\"\n          [src]=\"src\"\n          [alt]=\"alt\"\n          [iconName]=\"iconName\"\n          [iconColor]=\"iconColor\"\n        ></ds-avatar>\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\n          Static avatar with no interactions\n        </p>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "statusOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 'todo', label: 'To Do', value: 'To Do' },\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\n  { id: 'done', label: 'Done', value: 'Done' },\n]"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'success', placeholder: 'Success state' },\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'success',\n  },\n}"
            },
            {
                "name": "SuccessVariant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker variant=\"success\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
            },
            {
                "name": "taskColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  {\n    accessorKey: 'title',\n    header: 'Task',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter task title...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'assignee',\n    header: 'Assignee',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Assign to...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'priority',\n    header: 'Priority',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: priorityOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: statusOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'dueDate',\n    header: 'Due Date',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n]"
            },
            {
                "name": "TaskDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">Task Details</h3>\n        \n        <ds-data-item\n          label=\"Title\"\n          value=\"Implement user authentication\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Priority\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"warning\"\n          badgeContentType=\"text\"\n          badgeContent=\"High\"\n        />\n        <ds-data-item\n          label=\"Status\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"blue\"\n          badgeContentType=\"indicator-text\"\n          badgeContent=\"In Progress\"\n          badgeIndicatorShape=\"circle\"\n        />\n        <ds-data-item\n          label=\"Assignee\"\n          value=\"Sarah Wilson\"\n          layout=\"horizontal\"\n          valueType=\"avatar-text\"\n          avatarType=\"photo\"\n          avatarSrc=\"/Dummy-avatars/dummy-portrait-woman.jpg\"\n        />\n        <ds-data-item\n          label=\"Due date\"\n          value=\"March 15, 2024\"\n          layout=\"horizontal\"\n          valueType=\"icon-text\"\n          iconName=\"remixCalendarLine\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
            },
            {
                "name": "TaskMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\n        <ds-metadata-item\n          icon=\"remixSparklingFill\"\n          value=\"Important\"\n          tooltip=\"High priority task\"\n        />\n        <ds-metadata-item\n          icon=\"remixSurveyLine\"\n          value=\"Based on 12 inquiries\"\n          tooltip=\"Aggregated from customer feedback\"\n        />\n        <ds-metadata-item\n          icon=\"remixTimeLine\"\n          value=\"4 hours ago\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
            },
            {
                "name": "TasksWithSelects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      taskData: signal([...sampleTasks]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        title: '',\n        assignee: '',\n        priority: 'Medium',\n        status: 'To Do',\n        dueDate: ''\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"taskData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add task'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: taskColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <div style=\"padding: 20px;\">\n      <ds-button [ngpDialogTrigger]=\"drawer\" variant=\"primary\">Open Drawer</ds-button>\n      <p>This is the main page content. When you open the drawer, it should overlay this content with a semi-transparent background.</p>\n    </div>\n\n    <ng-template #drawer let-close=\"close\">\n      <div ngpDialogOverlay class=\"ds-drawer-overlay\">\n        <ds-drawer ngpDialog [position]=\"position\">\n          <h2 slot=\"header\" class=\"tw-text-xl tw-font-semibold\">Drawer Title</h2>\n          <div slot=\"content\">\n            <p class=\"tw-text-neutral-700 tw-mb-4\">This is the main content of the drawer.</p>\n            <p class=\"tw-text-neutral-600 tw-mb-4\">You can put any content here including forms, lists, or other components.</p>\n            <div class=\"tw-p-4 tw-bg-gray-50 tw-rounded-lg\">\n              <h3 class=\"tw-font-medium tw-mb-2\">Example Content</h3>\n              <p class=\"tw-text-sm tw-text-gray-600\">This drawer should slide in from the {{ position }} side of the screen.</p>\n            </div>\n          </div>\n          <div slot=\"footer\">\n            <ds-button variant=\"ghost\" (click)=\"close()\">Cancel</ds-button>\n            <ds-button variant=\"primary\" (click)=\"close()\">Save Changes</ds-button>\n          </div>\n        </ds-drawer>\n      </div>\n    </ng-template>\n  `\n})"
            },
            {
                "name": "TextBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Blue',\n    contentType: 'text',\n    variant: 'blue',\n  },\n}"
            },
            {
                "name": "TextBrand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Brand',\n    contentType: 'text',\n    variant: 'brand',\n  },\n}"
            },
            {
                "name": "TextDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Default',\n    contentType: 'text',\n    variant: 'default',\n  },\n}"
            },
            {
                "name": "TextDestructive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Error',\n    contentType: 'text',\n    variant: 'destructive',\n  },\n}"
            },
            {
                "name": "TextGrey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Grey',\n    contentType: 'text',\n    variant: 'grey',\n  },\n}"
            },
            {
                "name": "TextLightPurple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Light Purple',\n    contentType: 'text',\n    variant: 'light-purple',\n  },\n}"
            },
            {
                "name": "TextLimeGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Lime Green',\n    contentType: 'text',\n    variant: 'lime-green',\n  },\n}"
            },
            {
                "name": "TextOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Orange',\n    contentType: 'text',\n    variant: 'orange',\n  },\n}"
            },
            {
                "name": "TextPink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Pink',\n    contentType: 'text',\n    variant: 'pink',\n  },\n}"
            },
            {
                "name": "TextSalmonOrange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Salmon Orange',\n    contentType: 'text',\n    variant: 'salmon-orange',\n  },\n}"
            },
            {
                "name": "TextSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Success',\n    contentType: 'text',\n    variant: 'success',\n  },\n}"
            },
            {
                "name": "TextWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Warning',\n    contentType: 'text',\n    variant: 'warning',\n  },\n}"
            },
            {
                "name": "TopbarDebug",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    isMobileOverride: false, // Force desktop mode\n    isSidebarCollapsed: false,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Debug Page'\"\n        [iconName]=\"'remixHome4Line'\"\n        [userInitials]=\"'DB'\"\n        [showFirstAction]=\"false\"\n        [showSecondAction]=\"false\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Topbar Debug</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story tests the topbar component with minimal props to ensure it renders correctly in the app layout.</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Topbar Slot'\" \n                    [value]=\"'Using slot=topbar attribute'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'First Action'\" \n                    [value]=\"'Hidden (showFirstAction=false)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Second Action'\" \n                    [value]=\"'Hidden (showSecondAction=false)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n}"
            },
            {
                "name": "Triangle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    shape: 'triangle',\n    variant: 'blue',\n    label: 'Upcoming',\n  },\n}"
            },
            {
                "name": "UsageExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Stage Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Category Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Inspection Status Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Defect Status Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"triangle\" variant=\"default\" label=\"Not a defect\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "userColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px\n        maxWidth: 'lg',  // 256px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        active: 'success',\n        inactive: 'grey',\n        pending: 'warning',\n      };\n      const variant = variantMap[status] || 'grey';\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n]"
            },
            {
                "name": "userColumnsWithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  ...userColumns,\n  {\n    id: 'actions',\n    header: 'Actions',\n    enableSorting: false,\n    enableHiding: false,\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      return `\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\n            title=\"Edit\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n            </svg>\n          </button>\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\n            title=\"Delete\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n            </svg>\n          </button>\n        </div>\n      `;\n    },\n  },\n]"
            },
            {
                "name": "userColumnsWithSizing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDef[]",
                "defaultValue": "[\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px - narrow fixed width\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px minimum\n        maxWidth: 'lg',  // 256px maximum\n        truncate: true,  // Show ellipsis\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email Address (Very Long Header Name)',\n    meta: {\n      sizing: {\n        maxWidth: '300px', // Custom pixel value\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        minWidth: 'xs',\n        maxWidth: 'sm',\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        minWidth: 'sm',\n        maxWidth: 'md',\n        truncate: false, // Allow wrapping instead of truncating\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const statusColors: Record<string, string> = {\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n      };\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n]"
            },
            {
                "name": "UserProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">User Profile</h3>\n        \n        <ds-data-item\n          label=\"Full name\"\n          value=\"Sarah Wilson\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Email\"\n          value=\"sarah.wilson@company.com\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Role\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"brand\"\n          badgeContentType=\"text\"\n          badgeContent=\"Admin\"\n        />\n        <ds-data-item\n          label=\"Status\"\n          value=\"Online\"\n          layout=\"horizontal\"\n          valueType=\"icon-text\"\n          iconName=\"remixCheckboxCircleFill\"\n        />\n        <ds-data-item\n          label=\"Manager\"\n          value=\"John Doe\"\n          layout=\"horizontal\"\n          valueType=\"avatar-text\"\n          avatarType=\"initials\"\n          avatarInitials=\"JD\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
            },
            {
                "name": "UserSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'User Settings',\n    iconName: 'remixSettings3Line',\n    userInitials: 'SM',\n    firstActionIcon: 'remixSaveLine',\n    firstActionLabel: 'Save Settings',\n    secondActionIcon: 'remixRefreshLine',\n    secondActionLabel: 'Reset Settings',\n  },\n}"
            },
            {
                "name": "ValueTypesShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\n        <ds-data-item\n          label=\"Text value\"\n          value=\"Simple text content\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Icon + Text\"\n          value=\"With icon prefix\"\n          layout=\"horizontal\"\n          valueType=\"icon-text\"\n          iconName=\"remixStarFill\"\n        />\n        <ds-data-item\n          label=\"Avatar + Text\"\n          value=\"John Doe\"\n          layout=\"horizontal\"\n          valueType=\"avatar-text\"\n          avatarType=\"initials\"\n          avatarInitials=\"JD\"\n        />\n        <ds-data-item\n          label=\"Badge value\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"success\"\n          badgeContentType=\"icon-text\"\n          badgeContent=\"Verified\"\n          badgeIcon=\"remixShieldCheckFill\"\n        />\n        <ds-data-item\n          label=\"Link value\"\n          value=\"Visit documentation\"\n          layout=\"horizontal\"\n          valueType=\"link\"\n          linkHref=\"https://example.com/docs\"\n          linkTarget=\"_blank\"\n        />\n        <ds-data-item\n          label=\"Icon + Link\"\n          value=\"Download report\"\n          layout=\"horizontal\"\n          valueType=\"icon-link\"\n          linkHref=\"https://example.com/report.pdf\"\n          linkTarget=\"_blank\"\n          iconName=\"remixFileDownloadLine\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button variant=\"primary\">Primary</ds-button>\n        <ds-button variant=\"secondary\">Secondary</ds-button>\n        <ds-button variant=\"ghost\">Ghost</ds-button>\n        <ds-button variant=\"destructive\">Destructive</ds-button>\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\n          <span>AI Primary</span>\n        </ds-button>\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\n          <span>AI Ghost</span>\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"primary\"\n          ariaLabel=\"Primary variant\"\n          tooltip=\"Primary action\"\n        />\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"secondary\"\n          ariaLabel=\"Secondary variant\"\n          tooltip=\"Secondary action\"\n        />\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"ghost\"\n          ariaLabel=\"Ghost variant\"\n          tooltip=\"Ghost action\"\n        />\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"destructive\"\n          ariaLabel=\"Destructive variant\"\n          tooltip=\"Destructive action\"\n        />\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox variant=\"default\" label=\"Default checkbox\"></ds-checkbox>\n        <ds-checkbox variant=\"success\" label=\"Success checkbox\"></ds-checkbox>\n        <ds-checkbox variant=\"warning\" label=\"Warning checkbox\"></ds-checkbox>\n        <ds-checkbox variant=\"error\" label=\"Error checkbox\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\n        <ds-textarea variant=\"default\" placeholder=\"Default textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea variant=\"success\" placeholder=\"Success textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea variant=\"warning\" placeholder=\"Warning textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea variant=\"error\" placeholder=\"Error textarea\" rows=\"3\"></ds-textarea>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "VerticalAvatarInitials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Assigned to',\n    value: 'John Doe',\n    layout: 'vertical',\n    valueType: 'avatar-text',\n    avatarType: 'initials',\n    avatarInitials: 'JD',\n  },\n}"
            },
            {
                "name": "VerticalBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Priority',\n    layout: 'vertical',\n    valueType: 'badge',\n    badgeVariant: 'destructive',\n    badgeContentType: 'text',\n    badgeContent: 'High',\n  },\n}"
            },
            {
                "name": "VerticalIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Status',\n    value: 'Active',\n    layout: 'vertical',\n    iconName: 'remixCheckboxCircleFill',\n  },\n}"
            },
            {
                "name": "VerticalLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Documentation',\n    value: 'View API docs',\n    layout: 'vertical',\n    valueType: 'link',\n    linkHref: 'https://api.example.com/docs',\n    linkTarget: '_blank',\n  },\n}"
            },
            {
                "name": "VerticalText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Email Address',\n    value: 'user@example.com',\n    layout: 'vertical',\n    valueType: 'text',\n  },\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'warning', placeholder: 'Warning state' },\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'warning',\n  },\n}"
            },
            {
                "name": "WarningVariant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker variant=\"warning\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
            },
            {
                "name": "WithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n    rowClickable: false,\n  },\n}"
            },
            {
                "name": "WithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Update user documentation',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\n        </div>\n        <div slot=\"actions\">\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n          <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
            },
            {
                "name": "WithBadges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      value: signal('inbox'),\n    },\n    template: `\n      <ds-tabs [(value)]=\"value\">\n        <ds-tab value=\"inbox\" label=\"Inbox\" [showBadge]=\"true\" [badgeCount]=\"3\">\n          <p>Inbox content</p>\n        </ds-tab>\n        <ds-tab value=\"tasks\" label=\"My tasks\" [showBadge]=\"true\" [badgeCount]=\"12\">\n          <p>Tasks content</p>\n        </ds-tab>\n        <ds-tab value=\"archive\" label=\"Archive\">\n          <p>Archive content</p>\n        </ds-tab>\n      </ds-tabs>\n    `,\n  }),\n}"
            },
            {
                "name": "WithBreadcrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pageTitle: 'PFA Pension',\n    iconName: 'remixBuilding4Line',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Customers', path: '/customers', isLast: false },\n      { label: 'PFA Pension', path: '/customers/pfa-pension', isLast: true }\n    ],\n  },\n}"
            },
            {
                "name": "WithButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\n        <ds-tooltip text=\"Primary action button\">\n          <ds-button variant=\"primary\">Primary</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Secondary action button\">\n          <ds-button variant=\"secondary\">Secondary</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Ghost style button\">\n          <ds-button variant=\"ghost\">Ghost</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Destructive action - use with caution\">\n          <ds-button variant=\"destructive\">Delete</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "WithColumnManagement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 8,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\n- **Persistent State**: Selected columns are reflected with checkmarks\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\n\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\n      },\n    },\n  },\n}"
            },
            {
                "name": "WithColumnSizing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: [\n      ...sampleUsers.slice(0, 3),\n      // Add some users with very long content to demonstrate truncation\n      {\n        id: 11,\n        name: 'Alexandra Maximillian Constantine',\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\n        role: 'SuperAdmin',\n        status: 'active' as const,\n        joinDate: '2023-11-01',\n      },\n      {\n        id: 12,\n        name: 'Benjamin Christopher Wellington',\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\n        role: 'Editor',\n        status: 'pending' as const,\n        joinDate: '2023-12-15',\n      },\n    ],\n    columns: userColumnsWithSizing,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Advanced column sizing demonstration showing:\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\n- **Text truncation** with ellipsis (default when maxWidth is set)\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\n\nTry resizing the browser to see how columns behave with long content.`,\n      },\n    },\n  },\n}"
            },
            {
                "name": "WithCustomContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: {\n      value: signal('settings'),\n    },\n    template: `\n      <ds-tabs [(value)]=\"value\">\n        <ds-tab value=\"profile\" label=\"Profile\">\n          <div class=\"tw-p-4\">\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Profile Settings</h3>\n            <p>Manage your profile information here.</p>\n          </div>\n        </ds-tab>\n        <ds-tab value=\"settings\" label=\"Settings\">\n          <div class=\"tw-p-4\">\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Account Settings</h3>\n            <p>Configure your account preferences.</p>\n          </div>\n        </ds-tab>\n        <ds-tab value=\"notifications\" label=\"Notifications\" [showBadge]=\"true\" [badgeCount]=\"5\">\n          <div class=\"tw-p-4\">\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Notification Settings</h3>\n            <p>Manage your notification preferences.</p>\n          </div>\n        </ds-tab>\n      </ds-tabs>\n    `,\n  }),\n}"
            },
            {
                "name": "WithCustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'Download file',\n    href: '#',\n    showIcon: true,\n    iconName: 'remixDownloadLine',\n  },\n}"
            },
            {
                "name": "WithDataTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    orientation: 'vertical',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceLines: sampleInvoiceLines,\n      invoiceColumns: invoiceColumns,\n    },\n    template: `\n      <ds-tile [orientation]=\"orientation\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Invoice Lines</header-title>\n            <header-actions>\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">Add line</ds-button>\n            </header-actions>\n          </tile-header>\n        </ds-tile-section>\n        <ds-tile-section [padding]=\"false\">\n          <ds-data-table \n            [data]=\"invoiceLines\" \n            [columns]=\"invoiceColumns\"\n            [searchable]=\"false\"\n            [showColumnVisibility]=\"false\"\n            [paginated]=\"false\">\n          </ds-data-table>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "WithDisabledItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    items: menuWithDisabled,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-button variant=\"secondary\">File</ds-button>\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "WithDisabledOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Available Option 1', value: 1 },\n      { id: '2', label: 'Disabled Option', value: 2, disabled: true },\n      { id: '3', label: 'Available Option 2', value: 3 },\n      { id: '4', label: 'Another Disabled', value: 4, disabled: true },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Select Options</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "WithDisabledOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Option 1', value: 1 },\n      { id: '2', label: 'Option 2', value: 2, disabled: true },\n      { id: '3', label: 'Option 3', value: 3 },\n      { id: '4', label: 'Option 4', value: 4, disabled: true },\n    ],\n    placeholder: 'Select an option',\n  },\n}"
            },
            {
                "name": "WithError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 360px;\">\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\n          <p ngpError ngpErrorValidator=\"required\">Email is required.</p>\n        </ds-form-field>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithFormElements",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 2rem; align-items: flex-start; width: 300px;\">\n        <ds-tooltip text=\"Enter your email address\">\n          <ds-input \n            type=\"email\" \n            placeholder=\"Email address\"\n            variant=\"default\"\n          />\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Check this to receive notifications\">\n          <div style=\"display: flex; align-items: center; gap: 8px;\">\n            <ds-checkbox />\n            <ds-label>Subscribe to notifications</ds-label>\n          </div>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"This icon represents settings\">\n          <ds-icon name=\"remixSettingsLine\" size=\"24px\" style=\"cursor: pointer;\" />\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Submit your information\">\n          <ds-button variant=\"primary\" size=\"sm\">Submit</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsInputComponent, DsCheckboxComponent, DsLabelComponent, DsIconComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "WithFormField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-form-field \n        label=\"Newsletter Preferences\" \n        description=\"Choose your newsletter preferences\"\n        style=\"width: 400px;\">\n        <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\n          <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\n          <ds-checkbox label=\"Product updates\"></ds-checkbox>\n          <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\n          <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\n        </div>\n      </ds-form-field>\n    `,\n  }),\n  parameters: {\n    docs: {\n      source: {\n        code: `<ds-form-field \n  label=\"Newsletter Preferences\" \n  description=\"Choose your newsletter preferences\">\n  <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\n    <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\n    <ds-checkbox label=\"Product updates\"></ds-checkbox>\n    <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\n    <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\n  </div>\n</ds-form-field>`,\n      },\n    },\n  },\n}"
            },
            {
                "name": "WithFormField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n    }),\n  ],\n  render: () => {\n    @Component({\n      selector: 'datepicker-with-form-field',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n      template: `\n        <ds-form-field \n          label=\"Birth Date\" \n          description=\"Select your date of birth\">\n          <ds-datepicker [formControl]=\"dateControl\" [disableFutureDates]=\"true\">\n            <ds-input \n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \n              placeholder=\"Select your birth date\"\n              [readonly]=\"true\"\n              [required]=\"true\"\n              iconRight=\"remixCalendarLine\" />\n          </ds-datepicker>\n          @if (dateControl.invalid && dateControl.touched) {\n            <p slot=\"error\" class=\"ds-form-field__error\">Please select a valid date</p>\n          }\n        </ds-form-field>\n      `,\n    })\n    class DatepickerWithFormField {\n      dateControl = new FormControl<Date | null>(null);\n    }\n\n    return {\n      component: DatepickerWithFormField,\n      props: {},\n    };\n  },\n}"
            },
            {
                "name": "WithFormField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-form-field \n        label=\"Message\" \n        description=\"Please provide detailed feedback\"\n        style=\"width: 400px;\">\n        <ds-textarea \n          placeholder=\"Enter your feedback here...\" \n          rows=\"5\"\n          [required]=\"true\">\n        </ds-textarea>\n      </ds-form-field>\n    `,\n  }),\n  parameters: {\n    docs: {\n      source: {\n        code: `<ds-form-field \n  label=\"Message\" \n  description=\"Please provide detailed feedback\">\n  <ds-textarea \n    placeholder=\"Enter your feedback here...\" \n    rows=\"5\"\n    [required]=\"true\">\n  </ds-textarea>\n</ds-form-field>`,\n      },\n    },\n  },\n}"
            },
            {
                "name": "WithGlobalAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { \n    showGlobalAction: true, \n    globalActionLabel: 'New', \n    globalActionIcon: 'remixAddLine' \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [showGlobalAction]=\"showGlobalAction\" [globalActionLabel]=\"globalActionLabel\" [globalActionIcon]=\"globalActionIcon\" />\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: groupedOptions,\n    placeholder: 'Select food',\n    variant: 'default',\n  },\n}"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    content: 'External link',\n    href: 'https://example.com',\n    target: '_blank',\n    rel: 'noopener noreferrer',\n    showIcon: true,\n    iconName: 'remixExternalLinkLine',\n  },\n}"
            },
            {
                "name": "WithIconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    multiple: false,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-icon-button icon=\"remixMoreLine\" variant=\"ghost\" ariaLabel=\"More options\" />\n      </ds-listbox>\n    `,\n  }),\n}"
            },
            {
                "name": "WithIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button leadingIcon=\"remixHomeLine\">\n          Home\n        </ds-button>\n        <ds-button trailingIcon=\"remixArrowRightLine\">\n          Continue\n        </ds-button>\n        <ds-button \n          leadingIcon=\"remixUserLine\"\n          variant=\"secondary\"\n        >\n          Profile\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    items: menuWithIcons,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-button variant=\"secondary\">Options</ds-button>\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsButtonComponent],\n    },\n  }),\n}"
            },
            {
                "name": "WithInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    className: '',\n    for: 'example-input',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: {\n      ...args\n    },\n    styles: [`\n      :host {\n        display: block;\n        padding: 1rem;\n        background: white;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n    `],\n    template: `\n      <div class=\"container\">\n        <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\n          Input Label\n        </ds-label>\n        <ds-input id=\"example-input\" placeholder=\"Enter text...\"></ds-input>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "WithInputTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => {\n    @Component({\n      selector: 'datepicker-with-input',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsInputComponent, FormsModule],\n      template: `\n        <ds-datepicker (dateChange)=\"onDateChange($event)\">\n            <ds-input \n              [ngModel]=\"selectedDate() ? selectedDate()!.toLocaleDateString() : ''\" \n              placeholder=\"Select date\"\n              [readonly]=\"true\"\n              iconRight=\"remixCalendarLine\" />\n        </ds-datepicker>\n        <p class=\"body-sm-regular tw-mt-4\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\n      `,\n    })\n    class DatepickerWithInput {\n      selectedDate = signal<Date | null>(null);\n      \n      onDateChange(date: Date | null) {\n        this.selectedDate.set(date);\n      }\n    }\n\n    return {\n      component: DatepickerWithInput,\n      props: {},\n    };\n  },\n}"
            },
            {
                "name": "WithLeadingIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { leadingIcon: 'remixUserLine', placeholder: 'Username' },\n}"
            },
            {
                "name": "WithLimits",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    placeholder: 'This textarea has a 100 character limit...',\n    maxlength: 100,\n    minlength: 10,\n    rows: 4,\n  },\n}"
            },
            {
                "name": "WithMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Review and approve design changes',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\n          <ds-metadata-item icon=\"remixUserLine\" value=\"Based on 8 reviews\" />\n          <ds-metadata-item icon=\"remixAlarmLine\" value=\"Important\" variant=\"warning\" />\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
            },
            {
                "name": "WithoutLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    showLabel: false,\n    ariaLabel: 'Accept terms and conditions',\n  },\n}"
            },
            {
                "name": "WithoutPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleUsers.slice(0, 5),\n    columns: userColumns,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n}"
            },
            {
                "name": "WithoutSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: false,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n}"
            },
            {
                "name": "WithoutShimmer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    messages: [\n      'Reviewing tenant inquiries',\n      'Summarising maintenance patterns',\n      'Updating your recommendations',\n    ],\n    styleClass: 'body-sm-regular',\n    useShimmer: false,\n  },\n}"
            },
            {
                "name": "WithPlaceholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { \n    placeholder: 'Write your thoughts here...',\n    rows: 6 \n  },\n}"
            },
            {
                "name": "WithReactiveForms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n    }),\n  ],\n  render: () => {\n    @Component({\n      selector: 'datepicker-form-example',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n      template: `\n        <form>\n          <ds-datepicker [formControl]=\"dateControl\">\n            <ds-input \n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \n              placeholder=\"Select date\"\n              [readonly]=\"true\"\n              iconRight=\"remixCalendarLine\" />\n          </ds-datepicker>\n          <p class=\"body-sm-regular tw-mt-4\">\n            Form Value: {{ dateControl.value ? dateControl.value.toLocaleDateString() : 'None' }}\n          </p>\n          <p class=\"body-sm-regular\">Valid: {{ dateControl.valid }}</p>\n        </form>\n      `,\n    })\n    class DatepickerFormExample {\n      dateControl = new FormControl(new Date());\n    }\n\n    return {\n      component: DatepickerFormExample,\n      props: {},\n    };\n  },\n}"
            },
            {
                "name": "WithTitleAndAvatar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>\n              <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\" />\n              User Profile\n            </header-title>\n            <header-actions>\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Name\" value=\"John Doe\" layout=\"horizontal\" />\n            <ds-data-item label=\"Email\" value=\"john.doe@example.com\" layout=\"horizontal\" />\n            <ds-data-item label=\"Role\" value=\"Administrator\" layout=\"horizontal\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "WithTitleAndIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>\n              <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\n              Invoice Details\n            </header-title>\n            <header-actions>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\n              <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item icon=\"remixFileTextLine\" value=\"Invoice #12345\" />\n            <ds-metadata-item icon=\"remixCalendarLine\" value=\"Due Date: 2024-03-15\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
            },
            {
                "name": "WithTooltip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'remixSurveyLine',\n    value: 'Based on 12 inquiries',\n    tooltip: 'Data collected from recent customer inquiries',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsAccordion>",
                "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsAppLayoutComponent>",
                "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsAvatarComponent>",
                "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsBadgeComponent>",
                "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsButtonComponent>",
                "file": "src/app/components/ui/button/ds-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsIconButtonComponent>",
                "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsCheckboxComponent>",
                "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsDataItemComponent>",
                "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsDataTableComponent>",
                "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DrawerStoryProps>",
                "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsEditableTableComponent>",
                "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsFormFieldComponent>",
                "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsDatepickerComponent>",
                "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsHeaderDetailsComponent>",
                "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsIconComponent>",
                "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsInputComponent>",
                "file": "src/app/components/ui/input/ds-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsLabelComponent>",
                "file": "src/app/components/ui/label/ds-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsLinkComponent>",
                "file": "src/app/components/ui/link/ds-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsListComponent>",
                "file": "src/app/components/ui/list/ds-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsListItemComponent>",
                "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsListboxComponent>",
                "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsLoadingLabelComponent>",
                "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsMenuComponent>",
                "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsMetadataItemComponent>",
                "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsSelectComponent>",
                "file": "src/app/components/ui/select/ds-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsShapeIndicatorComponent>",
                "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsSidebarComponent>",
                "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AiSparksLoadingComponent>",
                "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AiSparksStaticComponent>",
                "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsSpinnerComponent>",
                "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTabs>",
                "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTextareaComponent>",
                "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTileComponent>",
                "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTooltipComponent>",
                "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DsTopbarComponent>",
                "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/ui/menu/ds-menu.stories.ts": [
                {
                    "name": "ActionMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    items: [\n      { id: '1', label: 'View Details', icon: 'remixEyeLine' },\n      { id: '2', label: 'Edit Properties', icon: 'remixEditLine' },\n      { id: 'sep1', label: '', separator: true },\n      { id: '3', label: 'Make a Copy', icon: 'remixFileCopyLine' },\n      { id: '4', label: 'Move to...', icon: 'remixFolderTransferLine' },\n      { id: '5', label: 'Add to Favorites', icon: 'remixStarLine' },\n      { id: 'sep2', label: '', separator: true },\n      { id: '6', label: 'Remove', icon: 'remixDeleteBinLine', destructive: true },\n    ],\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-icon-button icon=\"remixMore2Line\" variant=\"ghost\" ariaLabel=\"Item actions\" />\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsIconButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "basicMenuItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsMenuItem[]",
                    "defaultValue": "[\n  { id: '1', label: 'Edit', action: () => console.log('Edit clicked') },\n  { id: '2', label: 'Duplicate', action: () => console.log('Duplicate clicked') },\n  { id: '3', label: 'Archive', action: () => console.log('Archive clicked') },\n  { id: 'sep1', label: '', separator: true },\n  { id: '4', label: 'Delete', destructive: true, action: () => console.log('Delete clicked') },\n]"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    items: basicMenuItems,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-button variant=\"secondary\">Actions</ds-button>\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "menuWithDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsMenuItem[]",
                    "defaultValue": "[\n  { id: '1', label: 'New File', icon: 'remixFileAddLine' },\n  { id: '2', label: 'New Folder', icon: 'remixFolderAddLine' },\n  { id: '3', label: 'Upload', icon: 'remixUploadLine', disabled: true },\n  { id: 'sep1', label: '', separator: true },\n  { id: '4', label: 'Settings', icon: 'remixSettingsLine' },\n]"
                },
                {
                    "name": "menuWithIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsMenuItem[]",
                    "defaultValue": "[\n  { id: '1', label: 'Edit', icon: 'remixEditLine', action: () => console.log('Edit clicked') },\n  { id: '2', label: 'Copy', icon: 'remixFileCopyLine', action: () => console.log('Copy clicked') },\n  { id: '3', label: 'Share', icon: 'remixShareLine', action: () => console.log('Share clicked') },\n  { id: 'sep1', label: '', separator: true },\n  { id: '4', label: 'Download', icon: 'remixDownloadLine', action: () => console.log('Download clicked') },\n  { id: 'sep2', label: '', separator: true },\n  { id: '5', label: 'Delete', icon: 'remixDeleteBinLine', destructive: true, action: () => console.log('Delete clicked') },\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsMenuComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Menu',\n  component: DsMenuComponent,\n  tags: ['autodocs'],\n  decorators: [\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\">${story}</div>`\n    ),\n    applicationConfig({\n      providers: [],\n    }),\n  ],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      },\n    },\n  },\n}"
                },
                {
                    "name": "WithDisabledItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    items: menuWithDisabled,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-button variant=\"secondary\">File</ds-button>\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "WithIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    items: menuWithIcons,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-menu [items]=\"items\">\n        <ds-button variant=\"secondary\">Options</ds-button>\n      </ds-menu>\n    `,\n    moduleMetadata: {\n      imports: [DsMenuComponent, DsButtonComponent],\n    },\n  }),\n}"
                }
            ],
            "src/app/components/ui/sidebar/ds-sidebar.stories.ts": [
                {
                    "name": "ActiveItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { \n    activeItemId: 'inbox' \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [activeItemId]=\"activeItemId\" />\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Collapsed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { \n    collapsed: true \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [collapsed]=\"collapsed\" />\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "CollapsedWithGlobalAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { \n    collapsed: true, \n    showGlobalAction: true, \n    globalActionLabel: 'Create New', \n    globalActionIcon: 'remixAddLine' \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar \n          [groups]=\"groups\" \n          [collapsed]=\"collapsed\" \n          [showGlobalAction]=\"showGlobalAction\" \n          [globalActionLabel]=\"globalActionLabel\" \n          [globalActionIcon]=\"globalActionIcon\" \n        />\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    ariaLabel: 'Main navigation',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [ariaLabel]=\"ariaLabel\" />\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsSidebarComponent>",
                    "defaultValue": "{\n  title: 'Application shell/Sidebar',\n  component: DsSidebarComponent,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      story: { inline: true },\n      source: { excludeDecorators: true }\n    }\n  },\n  tags: ['autodocs'],\n  args: {\n    groups: demoGroups,\n  },\n  argTypes: {\n    groups: {\n      description: 'Array of sidebar groups with their items',\n      control: 'object',\n      table: {\n        type: { \n          summary: 'SidebarGroup[]',\n          detail: `interface SidebarGroup {\n  id: string;\n  label: string;\n  items: {\n    id: string;\n    label: string;\n    icon?: string;\n    badgeText?: string;\n  }[];\n  expanded?: boolean;\n  showLabel?: boolean;\n}`\n        }\n      }\n    },\n    activeItemId: {\n      description: 'ID of the currently active item',\n      control: 'text'\n    },\n    collapsed: {\n      description: 'Whether the sidebar is collapsed',\n      control: 'boolean'\n    },\n    showGlobalAction: {\n      description: 'Whether to show the global action button',\n      control: 'boolean'\n    },\n    globalActionLabel: {\n      description: 'Label for the global action button',\n      control: 'text'\n    },\n    globalActionIcon: {\n      description: 'Icon for the global action button',\n      control: 'text'\n    }\n  }\n}"
                },
                {
                    "name": "WithGlobalAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { \n    showGlobalAction: true, \n    globalActionLabel: 'New', \n    globalActionIcon: 'remixAddLine' \n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"height: 600px; display: flex;\">\n        <ds-sidebar [groups]=\"groups\" [showGlobalAction]=\"showGlobalAction\" [globalActionLabel]=\"globalActionLabel\" [globalActionIcon]=\"globalActionIcon\" />\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/loading-label/ds-loading-label.stories.ts": [
                {
                    "name": "AIProcessing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    messages: [\n      'Training AI model',\n      'Processing historical data',\n      'Generating predictions',\n      'Optimizing results',\n    ],\n    styleClass: 'body-sm-regular',\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    messages: [\n      'Reviewing tenant inquiries',\n      'Summarising maintenance patterns',\n      'Updating your recommendations',\n      'Analyzing property data',\n    ],\n    styleClass: 'body-sm-regular',\n    useShimmer: true,\n  },\n}"
                },
                {
                    "name": "LargerText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    messages: [\n      'Processing your data',\n      'Analyzing trends',\n      'Generating insights',\n    ],\n    styleClass: 'body-base-medium',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsLoadingLabelComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Loading Label',\n  component: DsLoadingLabelComponent,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nA loading label component that displays a sequence of messages with smooth transitions.\nFeatures:\n- Vertical slide transitions between messages\n- Animated ellipsis dots\n- Customizable text styling via design system classes\n- Automatic message cycling\n        `,\n      },\n    },\n  },\n  argTypes: {\n    messages: {\n      control: 'object',\n      description: 'Array of loading messages to cycle through',\n    },\n    styleClass: {\n      control: 'select',\n      options: [\n        'body-sm-regular',\n        'body-sm-medium',\n        'body-sm-semiBold',\n        'body-base-regular',\n        'body-base-medium',\n        'body-base-semiBold',\n        'body-lg-regular',\n        'body-lg-medium',\n        'body-lg-semiBold',\n      ],\n      description: 'CSS class to apply for text styling',\n    },\n    spinnerSize: {\n      control: 'text',\n      description: 'Size of the spinner in pixels',\n    },\n    useShimmer: {\n      control: 'boolean',\n      description: 'Whether to apply shimmer effect to the text',\n    },\n  },\n}"
                },
                {
                    "name": "WithoutShimmer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    messages: [\n      'Reviewing tenant inquiries',\n      'Summarising maintenance patterns',\n      'Updating your recommendations',\n    ],\n    styleClass: 'body-sm-regular',\n    useShimmer: false,\n  },\n}"
                }
            ],
            "src/app/components/ui/button/ds-button.stories.ts": [
                {
                    "name": "AIVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\n          <span>Generate suggestions</span>\n        </ds-button>\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" />\n          <span>Generate suggestions</span>\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    disabled: false,\n    loading: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<ds-button [variant]=\"variant\" [size]=\"size\" [disabled]=\"disabled\" [loading]=\"loading\">Default Button</ds-button>`,\n  }),\n}"
                },
                {
                    "name": "IconButtonVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixStarLine\" \n          ariaLabel=\"Favorite\"\n          variant=\"primary\"\n        ></ds-button>\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixSettingsLine\" \n          ariaLabel=\"Settings\"\n          variant=\"secondary\"\n        ></ds-button>\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixMoreLine\" \n          ariaLabel=\"More options\"\n          variant=\"ghost\"\n        ></ds-button>\n        <ds-button \n          [iconOnly]=\"true\" \n          leadingIcon=\"remixDeleteBinLine\" \n          ariaLabel=\"Delete\"\n          variant=\"destructive\"\n        ></ds-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    leadingIcon: 'remixThumbUpLine',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      clickCount: 0,\n      onClick: function(event: MouseEvent) {\n        this['clickCount']++;\n        console.log('Button clicked!', event);\n      }\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n        <ds-button \n          [variant]=\"variant\"\n          [size]=\"size\"\n          [leadingIcon]=\"leadingIcon\"\n          (clicked)=\"onClick($event)\"\n        >\n          Like ({{clickCount}})\n        </ds-button>\n        <p style=\"font-size: 0.875rem; color: var(--color-gray-600);\">\n          Click count: {{clickCount}}\n        </p>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "LoadingStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button [loading]=\"true\" variant=\"primary\">\n          Saving...\n        </ds-button>\n        <ds-button \n          [loading]=\"true\" \n          variant=\"ghost\"\n          leadingIcon=\"remixUploadLine\"\n        >\n          Uploading...\n        </ds-button>\n        <ds-button \n          [loading]=\"true\" \n          variant=\"secondary\"\n        >\n          Processing\n        </ds-button>\n        <ds-button \n          [loading]=\"true\" \n          variant=\"destructive\"\n        >\n          Deleting...\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsButtonComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Button',\n  component: DsButtonComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'ghost', 'destructive', 'ai-primary', 'ai-ghost'],\n      description: 'The visual style variant of the button',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n      description: 'The size of the button',\n    },\n    disabled: {\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n    },\n    loading: {\n      control: { type: 'boolean' },\n      description: 'Whether the button is in loading state',\n    },\n    pressed: {\n      control: { type: 'boolean' },\n      description: 'Whether the button appears pressed (for toggle buttons)',\n    },\n    expanded: {\n      control: { type: 'boolean' },\n      description: 'Whether the button is expanded (for dropdown buttons)',\n    },\n    leadingIcon: {\n      control: { type: 'text' },\n      description: 'Icon to display before the button text',\n    },\n    trailingIcon: {\n      control: { type: 'text' },\n      description: 'Icon to display after the button text',\n    },\n    ariaLabel: {\n      control: { type: 'text' },\n      description: 'Accessibility label for the button',\n    },\n    iconOnly: {\n      control: { type: 'boolean' },\n      description: 'Whether the button displays only an icon without text',\n    },\n  },\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <ds-button size=\"sm\">Small</ds-button>\n        <ds-button size=\"md\">Medium</ds-button>\n        <ds-button size=\"lg\">Large</ds-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button>Normal</ds-button>\n        <ds-button [disabled]=\"true\">Disabled</ds-button>\n        <ds-button [loading]=\"true\">Loading</ds-button>\n        <ds-button [pressed]=\"true\" variant=\"ghost\">Pressed</ds-button>\n        <ds-button \n          [expanded]=\"true\" \n          trailingIcon=\"remixArrowDownLine\"\n          variant=\"secondary\"\n        >\n          Expanded\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button variant=\"primary\">Primary</ds-button>\n        <ds-button variant=\"secondary\">Secondary</ds-button>\n        <ds-button variant=\"ghost\">Ghost</ds-button>\n        <ds-button variant=\"destructive\">Destructive</ds-button>\n        <ds-button variant=\"ai-primary\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\n          <span>AI Primary</span>\n        </ds-button>\n        <ds-button variant=\"ai-ghost\" class=\"depth-xs\">\n          <ds-icon slot=\"leading\" name=\"remixSparkling2Fill\" [color]=\"'var(--ai-gradient-color-1)'\" />\n          <span>AI Ghost</span>\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;\">\n        <ds-button leadingIcon=\"remixHomeLine\">\n          Home\n        </ds-button>\n        <ds-button trailingIcon=\"remixArrowRightLine\">\n          Continue\n        </ds-button>\n        <ds-button \n          leadingIcon=\"remixUserLine\"\n          variant=\"secondary\"\n        >\n          Profile\n        </ds-button>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/spinner/ds-spinner.stories.ts": [
                {
                    "name": "AllColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\n        <ds-spinner color=\"primary\" />\n        <ds-spinner color=\"secondary\" />\n        <ds-spinner color=\"tertiary\" />\n        <ds-spinner color=\"brand\" />\n        <ds-spinner color=\"success\" />\n        <ds-spinner color=\"warning\" />\n        <ds-spinner color=\"destructive\" />\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "AllSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div class=\"tw-flex tw-items-center tw-gap-4\">\n        <ds-spinner size=\"12px\" />\n        <ds-spinner size=\"16px\" />\n        <ds-spinner size=\"20px\" />\n        <ds-spinner size=\"24px\" />\n        <ds-spinner size=\"32px\" />\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div class=\"tw-flex\">\n        <ds-spinner size=\"20px\" color=\"tertiary\" />\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsSpinnerComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Spinner',\n  component: DsSpinnerComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\n      description: 'Size of the spinner',\n      table: {\n        defaultValue: { summary: '20px' }\n      }\n    },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'tertiary', 'brand', 'success', 'warning', 'destructive'],\n      description: 'Color of the spinner',\n      table: {\n        defaultValue: { summary: 'tertiary' }\n      }\n    }\n  }\n}"
                }
            ],
            "src/app/components/ui/badge/ds-badge.stories.ts": [
                {
                    "name": "AllColorVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <h3 style=\"margin: 0; font-size: 16px; font-weight: 600;\">All Badge Color Variants</h3>\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; max-width: 600px;\">\n          <ds-badge content=\"Default\" variant=\"default\"></ds-badge>\n          <ds-badge content=\"Brand\" variant=\"brand\"></ds-badge>\n          <ds-badge content=\"Success\" variant=\"success\"></ds-badge>\n          <ds-badge content=\"Warning\" variant=\"warning\"></ds-badge>\n          <ds-badge content=\"Destructive\" variant=\"destructive\"></ds-badge>\n          <ds-badge content=\"Blue\" variant=\"blue\"></ds-badge>\n          <ds-badge content=\"Light Purple\" variant=\"light-purple\"></ds-badge>\n          <ds-badge content=\"Pink\" variant=\"pink\"></ds-badge>\n          <ds-badge content=\"Salmon Orange\" variant=\"salmon-orange\"></ds-badge>\n          <ds-badge content=\"Orange\" variant=\"orange\"></ds-badge>\n          <ds-badge content=\"Lime Green\" variant=\"lime-green\"></ds-badge>\n          <ds-badge content=\"Grey\" variant=\"grey\"></ds-badge>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "ContentTypeComparison",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Text Only</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n            <ds-badge content=\"Default\" contentType=\"text\" variant=\"default\"></ds-badge>\n            <ds-badge content=\"Brand\" contentType=\"text\" variant=\"brand\"></ds-badge>\n            <ds-badge content=\"Success\" contentType=\"text\" variant=\"success\"></ds-badge>\n            <ds-badge content=\"Warning\" contentType=\"text\" variant=\"warning\"></ds-badge>\n            <ds-badge content=\"Destructive\" contentType=\"text\" variant=\"destructive\"></ds-badge>\n            <ds-badge content=\"Blue\" contentType=\"text\" variant=\"blue\"></ds-badge>\n            <ds-badge content=\"Light Purple\" contentType=\"text\" variant=\"light-purple\"></ds-badge>\n            <ds-badge content=\"Pink\" contentType=\"text\" variant=\"pink\"></ds-badge>\n            <ds-badge content=\"Salmon Orange\" contentType=\"text\" variant=\"salmon-orange\"></ds-badge>\n            <ds-badge content=\"Orange\" contentType=\"text\" variant=\"orange\"></ds-badge>\n            <ds-badge content=\"Lime Green\" contentType=\"text\" variant=\"lime-green\"></ds-badge>\n            <ds-badge content=\"Grey\" contentType=\"text\" variant=\"grey\"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icon + Text</h3>\n          <div style=\"display: flex; gap: 8px;\">\n            <ds-badge content=\"Feature\" contentType=\"icon-text\" leadingIcon=\"remixStarLine\" variant=\"default\"></ds-badge>\n            <ds-badge content=\"Premium\" contentType=\"icon-text\" leadingIcon=\"remixStarFill\" variant=\"brand\"></ds-badge>\n            <ds-badge content=\"Verified\" contentType=\"icon-text\" leadingIcon=\"remixCheckboxCircleFill\" variant=\"success\"></ds-badge>\n            <ds-badge content=\"Alert\" contentType=\"icon-text\" leadingIcon=\"remixAlertFill\" variant=\"warning\"></ds-badge>\n            <ds-badge content=\"Error\" contentType=\"icon-text\" leadingIcon=\"remixErrorWarningFill\" variant=\"destructive\"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Indicator + Text (Always white background)</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n            <ds-badge content=\"Default\" contentType=\"indicator-text\" variant=\"default\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Brand\" contentType=\"indicator-text\" variant=\"brand\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Success\" contentType=\"indicator-text\" variant=\"success\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Warning\" contentType=\"indicator-text\" variant=\"warning\" indicatorShape=\"triangle\"></ds-badge>\n            <ds-badge content=\"Destructive\" contentType=\"indicator-text\" variant=\"destructive\" indicatorShape=\"square\"></ds-badge>\n            <ds-badge content=\"Blue\" contentType=\"indicator-text\" variant=\"blue\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Light Purple\" contentType=\"indicator-text\" variant=\"light-purple\" indicatorShape=\"diamond\"></ds-badge>\n            <ds-badge content=\"Pink\" contentType=\"indicator-text\" variant=\"pink\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Salmon Orange\" contentType=\"indicator-text\" variant=\"salmon-orange\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Orange\" contentType=\"indicator-text\" variant=\"orange\" indicatorShape=\"triangle\"></ds-badge>\n            <ds-badge content=\"Lime Green\" contentType=\"indicator-text\" variant=\"lime-green\" indicatorShape=\"circle\"></ds-badge>\n            <ds-badge content=\"Grey\" contentType=\"indicator-text\" variant=\"grey\" indicatorShape=\"circle\"></ds-badge>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Badge',\n    contentType: 'text',\n    variant: 'default',\n  },\n}"
                },
                {
                    "name": "IconTextBrand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'New Feature',\n    contentType: 'icon-text',\n    leadingIcon: 'remixStarFill',\n    variant: 'brand',\n  },\n}"
                },
                {
                    "name": "IconTextDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Feature',\n    contentType: 'icon-text',\n    leadingIcon: 'remixStarLine',\n    variant: 'default',\n  },\n}"
                },
                {
                    "name": "IconTextDestructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Critical',\n    contentType: 'icon-text',\n    leadingIcon: 'remixErrorWarningFill',\n    variant: 'destructive',\n  },\n}"
                },
                {
                    "name": "IconTextSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Verified',\n    contentType: 'icon-text',\n    leadingIcon: 'remixCheckboxCircleFill',\n    variant: 'success',\n  },\n}"
                },
                {
                    "name": "IconTextWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Attention',\n    contentType: 'icon-text',\n    leadingIcon: 'remixAlertFill',\n    variant: 'warning',\n  },\n}"
                },
                {
                    "name": "IndicatorTextBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Info',\n    contentType: 'indicator-text',\n    variant: 'blue',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextBrand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'In Progress',\n    contentType: 'indicator-text',\n    variant: 'brand',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Default',\n    contentType: 'indicator-text',\n    variant: 'default',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextDestructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Failed',\n    contentType: 'indicator-text',\n    variant: 'destructive',\n    indicatorShape: 'square',\n  },\n}"
                },
                {
                    "name": "IndicatorTextGrey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Neutral',\n    contentType: 'indicator-text',\n    variant: 'grey',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextLightPurple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Special',\n    contentType: 'indicator-text',\n    variant: 'light-purple',\n    indicatorShape: 'diamond',\n  },\n}"
                },
                {
                    "name": "IndicatorTextLimeGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Fresh',\n    contentType: 'indicator-text',\n    variant: 'lime-green',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Alert',\n    contentType: 'indicator-text',\n    variant: 'orange',\n    indicatorShape: 'triangle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextPink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Accent',\n    contentType: 'indicator-text',\n    variant: 'pink',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextSalmonOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Warm',\n    contentType: 'indicator-text',\n    variant: 'salmon-orange',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Completed',\n    contentType: 'indicator-text',\n    variant: 'success',\n    indicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "IndicatorTextWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Pending',\n    contentType: 'indicator-text',\n    variant: 'warning',\n    indicatorShape: 'triangle',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsBadgeComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Badge',\n  component: DsBadgeComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\n    },\n    contentType: {\n      control: 'select',\n      options: ['text', 'icon-text', 'indicator-text'],\n    },\n    content: {\n      control: 'text',\n    },\n    leadingIcon: {\n      control: 'text',\n    },\n    indicatorShape: {\n      control: 'select',\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\n    },\n  },\n}"
                },
                {
                    "name": "TextBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Blue',\n    contentType: 'text',\n    variant: 'blue',\n  },\n}"
                },
                {
                    "name": "TextBrand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Brand',\n    contentType: 'text',\n    variant: 'brand',\n  },\n}"
                },
                {
                    "name": "TextDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Default',\n    contentType: 'text',\n    variant: 'default',\n  },\n}"
                },
                {
                    "name": "TextDestructive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Error',\n    contentType: 'text',\n    variant: 'destructive',\n  },\n}"
                },
                {
                    "name": "TextGrey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Grey',\n    contentType: 'text',\n    variant: 'grey',\n  },\n}"
                },
                {
                    "name": "TextLightPurple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Light Purple',\n    contentType: 'text',\n    variant: 'light-purple',\n  },\n}"
                },
                {
                    "name": "TextLimeGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Lime Green',\n    contentType: 'text',\n    variant: 'lime-green',\n  },\n}"
                },
                {
                    "name": "TextOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Orange',\n    contentType: 'text',\n    variant: 'orange',\n  },\n}"
                },
                {
                    "name": "TextPink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Pink',\n    contentType: 'text',\n    variant: 'pink',\n  },\n}"
                },
                {
                    "name": "TextSalmonOrange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Salmon Orange',\n    contentType: 'text',\n    variant: 'salmon-orange',\n  },\n}"
                },
                {
                    "name": "TextSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Success',\n    contentType: 'text',\n    variant: 'success',\n  },\n}"
                },
                {
                    "name": "TextWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Warning',\n    contentType: 'text',\n    variant: 'warning',\n  },\n}"
                }
            ],
            "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts": [
                {
                    "name": "AllShapes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Shape Variants (8x8px)</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\" label=\"Stage tags\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"triangle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"pentagon\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Circle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    shape: 'circle',\n    variant: 'brand',\n    label: 'Received',\n  },\n}"
                },
                {
                    "name": "ColorVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">All Color Variants</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 16px; align-items: center; max-width: 600px;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"default\" label=\"Default\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Brand\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"success\" label=\"Success\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"warning\" label=\"Warning\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"destructive\" label=\"Destructive\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Blue\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"light-purple\" label=\"Light Purple\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"pink\" label=\"Pink\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"salmon-orange\" label=\"Salmon Orange\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"orange\" label=\"Orange\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"lime-green\" label=\"Lime Green\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"circle\" variant=\"grey\" label=\"Grey\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Diamond",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    shape: 'diamond',\n    variant: 'brand',\n    label: 'Contact',\n  },\n}"
                },
                {
                    "name": "IconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Icons Only</h3>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"square\" variant=\"destructive\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"diamond\" variant=\"success\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"triangle\" variant=\"warning\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"pentagon\" variant=\"blue\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsShapeIndicatorComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Shape Indicator',\n  component: DsShapeIndicatorComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    shape: {\n      control: 'select',\n      options: ['circle', 'square', 'diamond', 'triangle', 'pentagon'],\n    },\n    variant: {\n      control: 'select',\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\n    },\n    label: {\n      control: 'text',\n    },\n  },\n}"
                },
                {
                    "name": "Pentagon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    shape: 'pentagon',\n    variant: 'brand',\n    label: 'Maintenance',\n  },\n}"
                },
                {
                    "name": "Square",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    shape: 'square',\n    variant: 'destructive',\n    label: 'Stage tags',\n  },\n}"
                },
                {
                    "name": "Triangle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    shape: 'triangle',\n    variant: 'blue',\n    label: 'Upcoming',\n  },\n}"
                },
                {
                    "name": "UsageExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Stage Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"brand\" label=\"Received\"></ds-shape-indicator>\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Contact\"></ds-shape-indicator>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Category Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"diamond\" variant=\"brand\" label=\"Maintenance\"></ds-shape-indicator>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Inspection Status Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"circle\" variant=\"blue\" label=\"Upcoming\"></ds-shape-indicator>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 600;\">Defect Status Tags</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 8px; align-items: flex-start;\">\n            <ds-shape-indicator shape=\"triangle\" variant=\"default\" label=\"Not a defect\"></ds-shape-indicator>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/checkbox/ds-checkbox.stories.ts": [
                {
                    "name": "AllSizesAndVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 24px;\">\n        <div>\n          <h4>Small Size</h4>\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\n            <ds-checkbox size=\"sm\" variant=\"default\" label=\"Default small\"></ds-checkbox>\n            <ds-checkbox size=\"sm\" variant=\"success\" label=\"Success small\"></ds-checkbox>\n            <ds-checkbox size=\"sm\" variant=\"warning\" label=\"Warning small\"></ds-checkbox>\n            <ds-checkbox size=\"sm\" variant=\"error\" label=\"Error small\"></ds-checkbox>\n          </div>\n        </div>\n        \n        <div>\n          <h4>Medium Size</h4>\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\n            <ds-checkbox size=\"md\" variant=\"default\" label=\"Default medium\"></ds-checkbox>\n            <ds-checkbox size=\"md\" variant=\"success\" label=\"Success medium\"></ds-checkbox>\n            <ds-checkbox size=\"md\" variant=\"warning\" label=\"Warning medium\"></ds-checkbox>\n            <ds-checkbox size=\"md\" variant=\"error\" label=\"Error medium\"></ds-checkbox>\n          </div>\n        </div>\n        \n        <div>\n          <h4>Large Size</h4>\n          <div style=\"display: grid; gap: 8px; margin-top: 8px;\">\n            <ds-checkbox size=\"lg\" variant=\"default\" label=\"Default large\"></ds-checkbox>\n            <ds-checkbox size=\"lg\" variant=\"success\" label=\"Success large\"></ds-checkbox>\n            <ds-checkbox size=\"lg\" variant=\"warning\" label=\"Warning large\"></ds-checkbox>\n            <ds-checkbox size=\"lg\" variant=\"error\" label=\"Error large\"></ds-checkbox>\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox \n          label=\"Click me to toggle\" \n          (checkedChange)=\"onCheckedChange($event)\">\n        </ds-checkbox>\n        <ds-checkbox \n          label=\"I'm required\" \n          [required]=\"true\"\n          variant=\"error\">\n        </ds-checkbox>\n        <ds-checkbox \n          label=\"Hover over me\"\n          size=\"lg\">\n        </ds-checkbox>\n      </div>\n    `,\n    props: {\n      onCheckedChange: (checked: boolean) => {\n        console.log('Checkbox checked:', checked);\n      },\n    },\n  }),\n}"
                },
                {
                    "name": "LabelToggle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <h4>With Labels</h4>\n        <ds-checkbox [showLabel]=\"true\" label=\"I have a visible label\"></ds-checkbox>\n        <ds-checkbox [showLabel]=\"true\" label=\"Me too!\"></ds-checkbox>\n        \n        <h4 style=\"margin-top: 24px;\">Without Labels (using aria-label)</h4>\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 1\"></ds-checkbox>\n        <ds-checkbox [showLabel]=\"false\" ariaLabel=\"Hidden label checkbox 2\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsCheckboxComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Checkbox',\n  component: DsCheckboxComponent,\n  parameters: { layout: 'centered' },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\n    label: { control: 'text' },\n    showLabel: { control: 'boolean' },\n    disabled: { control: 'boolean' },\n    required: { control: 'boolean' },\n    indeterminate: { control: 'boolean' },\n    checkboxId: { control: 'text' },\n    ariaLabel: { control: 'text' },\n    ariaDescribedBy: { control: 'text' },\n    ariaLabelledBy: { control: 'text' },\n  },\n  args: {\n    variant: 'default',\n    size: 'md',\n    label: 'Accept terms and conditions',\n    showLabel: true,\n    disabled: false,\n    required: false,\n    indeterminate: false,\n  },\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox size=\"sm\" label=\"Small checkbox\"></ds-checkbox>\n        <ds-checkbox size=\"md\" label=\"Medium checkbox\"></ds-checkbox>\n        <ds-checkbox size=\"lg\" label=\"Large checkbox\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox label=\"Unchecked checkbox\"></ds-checkbox>\n        <ds-checkbox label=\"Checked checkbox\" [checked]=\"true\"></ds-checkbox>\n        <ds-checkbox label=\"Indeterminate checkbox\" [indeterminate]=\"true\"></ds-checkbox>\n        <ds-checkbox label=\"Disabled checkbox\" [disabled]=\"true\"></ds-checkbox>\n        <ds-checkbox label=\"Disabled checked checkbox\" [disabled]=\"true\" [checked]=\"true\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 300px;\">\n        <ds-checkbox variant=\"default\" label=\"Default checkbox\"></ds-checkbox>\n        <ds-checkbox variant=\"success\" label=\"Success checkbox\"></ds-checkbox>\n        <ds-checkbox variant=\"warning\" label=\"Warning checkbox\"></ds-checkbox>\n        <ds-checkbox variant=\"error\" label=\"Error checkbox\"></ds-checkbox>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithFormField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-form-field \n        label=\"Newsletter Preferences\" \n        description=\"Choose your newsletter preferences\"\n        style=\"width: 400px;\">\n        <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\n          <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\n          <ds-checkbox label=\"Product updates\"></ds-checkbox>\n          <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\n          <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\n        </div>\n      </ds-form-field>\n    `,\n  }),\n  parameters: {\n    docs: {\n      source: {\n        code: `<ds-form-field \n  label=\"Newsletter Preferences\" \n  description=\"Choose your newsletter preferences\">\n  <div style=\"display: grid; gap: 12px; margin-top: 8px;\">\n    <ds-checkbox label=\"Weekly newsletter\"></ds-checkbox>\n    <ds-checkbox label=\"Product updates\"></ds-checkbox>\n    <ds-checkbox label=\"Marketing emails\" variant=\"warning\"></ds-checkbox>\n    <ds-checkbox label=\"Security notifications\" [checked]=\"true\" [disabled]=\"true\"></ds-checkbox>\n  </div>\n</ds-form-field>`,\n      },\n    },\n  },\n}"
                },
                {
                    "name": "WithoutLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    showLabel: false,\n    ariaLabel: 'Accept terms and conditions',\n  },\n}"
                }
            ],
            "src/app/components/ui/avatar/ds-avatar.stories.ts": [
                {
                    "name": "AllTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 2rem; align-items: start; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Initials (Always Round)</h3>\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\n            <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\n            <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\n            <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\n            <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Photo (Always Round)</h3>\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\n            <ds-avatar \n              type=\"photo\" \n              size=\"sm\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n            <ds-avatar \n              type=\"photo\" \n              size=\"md\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n            <ds-avatar \n              type=\"photo\" \n              size=\"lg\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n            <ds-avatar \n              type=\"photo\" \n              size=\"xl\" \n              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n              alt=\"Profile\"\n            ></ds-avatar>\n          </div>\n        </div>\n        \n        <div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n          <h3 style=\"margin: 0; font-size: 14px; font-weight: 600; color: var(--text-color-default-primary);\">Icon (Brand Background + Depth)</h3>\n          <div style=\"display: flex; gap: 1rem; align-items: center;\">\n            <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\n            <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\n            <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\n            <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\n          </div>\n          <div style=\"font-size: 12px; color: var(--text-color-default-secondary);\">\n            6px → 8px → 12px → 16px radius<br/>\n            depth-sm → depth-sm → depth-md → depth-lg\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'initials',\n    size: 'md',\n    initials: 'JD',\n  },\n}"
                },
                {
                    "name": "IconType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (6px radius)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (8px radius)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"lg\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (12px radius)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"xl\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (16px radius)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "IconVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixUser3Fill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Default User</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixTeamFill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Team</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixBuildingFill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Organization</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"icon\" size=\"md\" iconName=\"remixRobotFill\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Bot</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "InitialsType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"AS\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"MJ\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"EB\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsAvatarComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Avatar',\n  component: DsAvatarComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    type: {\n      control: { type: 'select' },\n      options: ['initials', 'photo', 'icon'],\n      description: 'The type of avatar display',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg', 'xl'],\n      description: 'The size of the avatar',\n    },\n    initials: {\n      control: { type: 'text' },\n      description: 'Initials to display (for initials type)',\n    },\n    src: {\n      control: { type: 'text' },\n      description: 'Image source URL (for photo type)',\n    },\n    alt: {\n      control: { type: 'text' },\n      description: 'Alternative text for the image',\n    },\n    iconName: {\n      control: { type: 'text' },\n      description: 'Icon name to display (for icon type)',\n    },\n    iconColor: {\n      control: { type: 'text' },\n      description: 'Color of the icon (automatically white for icon avatars)',\n      table: { disable: true }, // Disable control since it's always white for icon avatars\n    },\n  },\n}"
                },
                {
                    "name": "PhotoType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n            alt=\"John Doe\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">John Doe</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face\"\n            alt=\"Alice Smith\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Alice Smith</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\"\n            alt=\"Michael Johnson\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Michael Johnson</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar \n            type=\"photo\" \n            size=\"md\" \n            src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\"\n            alt=\"Emily Brown\"\n          ></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Emily Brown</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Small (24px)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"md\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Medium (32px)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"lg\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">Large (48px)</span>\n        </div>\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 0.5rem;\">\n          <ds-avatar type=\"initials\" size=\"xl\" initials=\"JD\"></ds-avatar>\n          <span style=\"font-size: 12px; color: var(--text-color-default-secondary);\">XLarge (64px)</span>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Static",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'initials',\n    size: 'md',\n    initials: 'JD',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n        <ds-avatar \n          [type]=\"type\"\n          [size]=\"size\"\n          [initials]=\"initials\"\n          [src]=\"src\"\n          [alt]=\"alt\"\n          [iconName]=\"iconName\"\n          [iconColor]=\"iconColor\"\n        ></ds-avatar>\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\n          Static avatar with no interactions\n        </p>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/app-layout/ds-app-layout.stories.ts": [
                {
                    "name": "AutoResponsive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    // No isMobileOverride - let ViewportService handle automatic detection\n    isSidebarCollapsed: false,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Auto Responsive'\"\n        [iconName]=\"'remixSmartphoneLine'\"\n        [userInitials]=\"'AR'\"\n        [showFirstAction]=\"true\"\n        [firstActionIcon]=\"'remixNotification3Line'\"\n        [firstActionLabel]=\"'Notifications'\"\n        [showSecondAction]=\"true\"\n        [secondActionIcon]=\"'remixSettings3Line'\"\n        [secondActionLabel]=\"'Settings'\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Auto-Responsive Layout</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This layout automatically detects your viewport size and switches between mobile and desktop modes at 992px breakpoint. Try resizing your browser window or using the viewport toolbar!</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Breakpoint'\" \n                    [value]=\"'992px'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Mobile Mode'\" \n                    [value]=\"'≤ 991px (drawer menu)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Desktop Mode'\" \n                    [value]=\"'≥ 992px (persistent sidebar)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Detection'\" \n                    [value]=\"'Automatic via ViewportService'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    isSidebarCollapsed: false,\n  },\n  render: () => ({\n    template: '<ds-debug-wrapper></ds-debug-wrapper>'\n  })\n}"
                },
                {
                    "name": "InitiallyCollapsed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    isMobileOverride: false, // Force desktop mode\n    isSidebarCollapsed: true,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Initially Collapsed'\"\n        [iconName]=\"'remixHome4Line'\"\n        [userInitials]=\"'JD'\"\n        [showFirstAction]=\"true\"\n        [firstActionIcon]=\"'remixNotification3Line'\"\n        [firstActionLabel]=\"'Notifications'\"\n        [showSecondAction]=\"true\"\n        [secondActionIcon]=\"'remixSettings3Line'\"\n        [secondActionLabel]=\"'Settings'\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Initially Collapsed Sidebar</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story demonstrates the sidebar starting in a collapsed state on desktop. Users can expand it using the collapse toggle button.</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Is Mobile'\" \n                    [value]=\"'False (Desktop mode forced)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Sidebar Collapsed'\" \n                    [value]=\"'True'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Note'\" \n                    [value]=\"'Click the collapse toggle to expand the sidebar'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsAppLayoutComponent>",
                    "defaultValue": "{\n  title: 'Application shell/App Layout',\n  component: DsAppLayoutComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DebugWrapperComponent],\n      providers: [ViewportService]\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe main application layout component that provides a responsive shell with sidebar navigation, topbar, and content area. Automatically adapts between mobile and desktop modes based on viewport size.\n\n## Features\n\n- **Responsive Design**: Automatically switches between mobile drawer and desktop sidebar at 992px breakpoint\n- **Collapsible Sidebar**: Desktop sidebar can be collapsed from 256px to 80px width\n- **Mobile Drawer**: Slide-in navigation drawer with overlay on mobile devices\n- **Sticky Topbar**: Page header remains visible while scrolling content\n- **Integrated Subcomponents**: Both sidebar and topbar are automatically rendered and configured via props\n- **Content Projection**: Default slot for main page content\n- **Smooth Transitions**: Animated sidebar collapse/expand and mobile drawer\n- **Viewport Service**: Automatic mobile detection or manual override for testing\n\n## Architecture\n\nThe component automatically renders both **sidebar** and **topbar** - you don't need to project them as children. Just configure them via props and project your main content.\n\n### Built-in Subcomponents\n\n1. **Sidebar** - Navigation component (always rendered)\n2. **Topbar** - Page header component (always rendered)\n3. **Main Content** - Your page content (via default slot)\n\n## Content Projection\n\nThe component has a **single default slot** for main page content:\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"groups\"\n  [pageTitle]=\"'Dashboard'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n>\n  <!-- Your main content goes here -->\n  <div class=\"content-container\">\n    <h1>Page Content</h1>\n  </div>\n</ds-app-layout>\n\\`\\`\\`\n\n## Props\n\n### Sidebar Configuration\n- \\`sidebarGroups\\`: Array of navigation groups with items\n- \\`isSidebarCollapsed\\`: Control collapsed state (desktop only)\n- \\`activeItemId\\`: Currently active navigation item\n\n**Group Structure:**\n\\`\\`\\`typescript\n{\n  id: 'group-id',\n  label: 'GROUP LABEL',\n  items: [\n    { \n      id: 'item-id', \n      label: 'Item Label', \n      icon: 'remixIconName',\n      badgeText?: '5' // Optional badge\n    }\n  ]\n}\n\\`\\`\\`\n\n### Topbar Configuration\n- \\`pageTitle\\`: The page title text\n- \\`iconName\\`: Icon to display next to the title\n- \\`userInitials\\`: User avatar initials\n- \\`showBreadcrumbs\\`: Enable breadcrumb navigation (default: false)\n- \\`breadcrumbItems\\`: Array of breadcrumb items\n- \\`showFirstAction\\`: Show first action button (default: true)\n- \\`firstActionIcon\\`: Icon for first action (default: 'remixNotification3Line')\n- \\`firstActionLabel\\`: Aria label for first action (default: 'Notifications')\n- \\`showSecondAction\\`: Show second action button (default: true)\n- \\`secondActionIcon\\`: Icon for second action (default: 'remixSettings3Line')\n- \\`secondActionLabel\\`: Aria label for second action (default: 'Settings')\n\n### Layout Configuration\n- \\`isMobileOverride\\`: Override automatic mobile detection for testing\n\n## Events\n\n- \\`(collapsedChange)\\`: Emits when desktop sidebar is collapsed/expanded\n- \\`(menuOpenChange)\\`: Emits when mobile drawer is opened/closed\n\n## Layout Behavior\n\n### Desktop Mode (≥ 992px)\n- Persistent sidebar on the left (256px expanded, 80px collapsed)\n- Grid layout: \\`auto minmax(0, 1fr)\\`\n- Sidebar collapse toggle available\n- Main content adjusts width automatically\n\n### Mobile Mode (< 992px)\n- Minimized sidebar header (64px height) at the top\n- Hamburger menu button to open drawer\n- Full sidebar appears as overlay drawer from left\n- Semi-transparent backdrop overlay\n- Body scroll locked when drawer is open\n\n## Usage Example\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [isSidebarCollapsed]=\"isSidebarCollapsed()\"\n  [activeItemId]=\"'dashboard'\"\n  [pageTitle]=\"'Dashboard'\"\n  [iconName]=\"'remixHome4Line'\"\n  [userInitials]=\"'JD'\"\n  [showFirstAction]=\"true\"\n  [firstActionIcon]=\"'remixNotification3Line'\"\n  [showSecondAction]=\"true\"\n  [secondActionIcon]=\"'remixSettings3Line'\"\n  (collapsedChange)=\"isSidebarCollapsed.set($event)\"\n>\n  <!-- Main Content -->\n  <div class=\"content-container\">\n    <h1>Page Content</h1>\n    <p>Your content goes here...</p>\n  </div>\n</ds-app-layout>\n\\`\\`\\`\n\n### With Breadcrumbs\n\n\\`\\`\\`html\n<ds-app-layout\n  [sidebarGroups]=\"sidebarGroups\"\n  [pageTitle]=\"'Property Details'\"\n  [iconName]=\"'remixBuilding2Line'\"\n  [showBreadcrumbs]=\"true\"\n  [breadcrumbItems]=\"[\n    { label: 'Properties', path: '/properties', isLast: false },\n    { label: 'Fælledgården Hub', path: '', isLast: true }\n  ]\"\n  [userInitials]=\"'JD'\"\n>\n  <!-- Content here -->\n</ds-app-layout>\n\\`\\`\\`\n\n## Viewport Testing\n\nUse the viewport toolbar above to test different screen sizes, or use the \\`isMobileOverride\\` prop to force mobile/desktop mode:\n\n\\`\\`\\`html\n<ds-app-layout\n  [isMobileOverride]=\"false\"  <!-- Force desktop mode -->\n  [sidebarGroups]=\"groups\"\n  [pageTitle]=\"'Dashboard'\"\n>\n\\`\\`\\`\n        `,\n      },\n    },\n    layout: 'fullscreen',\n    // Add viewport toolbar to allow easy resizing\n    viewport: {\n      defaultViewport: 'desktop',\n      viewports: {\n        mobile: {\n          name: 'Mobile',\n          styles: {\n            width: '375px',\n            height: '100%',\n          },\n        },\n        tablet: {\n          name: 'Tablet',\n          styles: {\n            width: '768px',\n            height: '100%',\n          },\n        },\n        desktop: {\n          name: 'Desktop',\n          styles: {\n            width: '1024px',\n            height: '100%',\n          },\n        },\n        'large-desktop': {\n          name: 'Large Desktop',\n          styles: {\n            width: '1440px',\n            height: '100%',\n          },\n        },\n      },\n    },\n  },\n  tags: ['autodocs'],\n}"
                },
                {
                    "name": "TopbarDebug",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    sidebarGroups: demoGroups,\n    isMobileOverride: false, // Force desktop mode\n    isSidebarCollapsed: false,\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [DsAppLayoutComponent, DsDataItemComponent],\n    }),\n  ],\n  render: (args) => ({\n    props: {\n      ...args,\n      handleCollapsedChange(isCollapsed: boolean) {\n        this['isSidebarCollapsed'] = isCollapsed;\n      }\n    },\n    template: `\n      <ds-app-layout\n        [sidebarGroups]=\"sidebarGroups\"\n        [isMobileOverride]=\"isMobileOverride\"\n        [isSidebarCollapsed]=\"isSidebarCollapsed\"\n        [pageTitle]=\"'Debug Page'\"\n        [iconName]=\"'remixHome4Line'\"\n        [userInitials]=\"'DB'\"\n        [showFirstAction]=\"false\"\n        [showSecondAction]=\"false\"\n        (collapsedChange)=\"handleCollapsedChange($event)\"\n      >\n        <div style=\"padding: 24px;\">\n          <div style=\"max-width: 64rem; margin: 0 auto;\">\n            <h2 style=\"font-size: 1.5rem; font-weight: 600; margin-bottom: 8px;\">Topbar Debug</h2>\n            <p style=\"color: rgb(75, 85, 99); margin-bottom: 48px;\">This story tests the topbar component with minimal props to ensure it renders correctly in the app layout.</p>\n            \n            <div style=\"margin-bottom: 48px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 16px; padding: 24px;\">\n                <span class=\"ui-sm-medium\">Debug Information</span>\n                <div style=\"margin-top: 16px;\">\n                  <ds-data-item \n                    [label]=\"'Topbar Slot'\" \n                    [value]=\"'Using slot=topbar attribute'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'First Action'\" \n                    [value]=\"'Hidden (showFirstAction=false)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                  <ds-data-item \n                    [label]=\"'Second Action'\" \n                    [value]=\"'Hidden (showSecondAction=false)'\" \n                    [layout]=\"'horizontal'\" \n                    [valueType]=\"'text'\"\n                  ></ds-data-item>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ds-app-layout>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/list/ds-list.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list/ds-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-list>\n        <ds-list-item title=\"Review documentation changes\">\n          <div slot=\"metadata\">\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n          </div>\n          <div slot=\"actions\">\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n            <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\n          </div>\n        </ds-list-item>\n        <ds-list-item title=\"Update user settings\">\n          <div slot=\"metadata\">\n            <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to you\" />\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"1 day ago\" />\n          </div>\n          <div slot=\"actions\">\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n            <ds-button variant=\"primary\" size=\"sm\">Update</ds-button>\n          </div>\n        </ds-list-item>\n        <ds-list-item title=\"Deploy new features\">\n          <div slot=\"metadata\">\n            <ds-metadata-item icon=\"remixRocketLine\" value=\"Release\" variant=\"success\" />\n            <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\n          </div>\n          <div slot=\"actions\">\n            <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n            <ds-button variant=\"primary\" size=\"sm\">Deploy</ds-button>\n          </div>\n        </ds-list-item>\n      </ds-list>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list/ds-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsListComponent>",
                    "defaultValue": "{\n  title: 'Primitives/List',\n  component: DsListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DsListItemComponent, DsButtonComponent, DsMetadataItemComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA container component that provides consistent styling for lists of items.\nHandles border radius, dividers, and spacing automatically.\n\n## Features\n- Consistent border radius handling\n- Automatic dividers between items\n- Proper hover state management\n- Responsive padding and spacing\n\n## Usage\n\\`\\`\\`html\n<ds-list>\n  <ds-list-item title=\"First item\">\n    <div slot=\"metadata\">\n      <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n    </div>\n    <div slot=\"actions\">\n      <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n      <ds-button variant=\"primary\" size=\"sm\">Action</ds-button>\n    </div>\n  </ds-list-item>\n  <ds-list-item title=\"Second item\">...</ds-list-item>\n</ds-list>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n}"
                }
            ],
            "src/app/components/ui/list-item/ds-list-item.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Review documentation changes',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
                },
                {
                    "name": "Complete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Inspect for signs of leaks or dampness',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixAlertLine\" value=\"Important\" variant=\"warning\" />\n          <ds-metadata-item icon=\"remixTeamLine\" value=\"Based on 12 inquiries\" />\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\n        </div>\n        <div slot=\"actions\">\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n          <ds-button variant=\"primary\" size=\"sm\">Create task</ds-button>\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
                },
                {
                    "name": "LongTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'This is a very long title that should demonstrate how the component handles longer text content and wrapping behavior while maintaining proper alignment',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"Just now\" />\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsListItemComponent>",
                    "defaultValue": "{\n  title: 'Primitives/List Item',\n  component: DsListItemComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DsButtonComponent, DsMetadataItemComponent],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA versatile list item component that supports a title with metadata and action buttons.\n\n## Features\n\n- **Title Property**: Configurable title with consistent typography\n- **Metadata Slot**: Flexible slot for metadata items (status, timestamps, etc.)\n- **Actions Slot**: Action buttons that appear on hover\n- **Hover State**: Subtle background change and action reveal on hover\n- **Responsive Layout**: Adapts to different screen sizes\n\n## Slots\n\n- **metadata**: For metadata items like status indicators, timestamps, etc.\n- **actions**: For action buttons that appear on hover\n\n## Examples\n\n\\`\\`\\`html\n<ds-list-item title=\"Review pending changes\">\n  <!-- Metadata slot -->\n  <div slot=\"metadata\">\n    <ds-metadata-item icon=\"remixTimeLine\" value=\"2 hours ago\" />\n    <ds-metadata-item icon=\"remixUserLine\" value=\"Assigned to John\" />\n  </div>\n  \n  <!-- Actions slot -->\n  <div slot=\"actions\">\n    <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n    <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\n  </div>\n</ds-list-item>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    title: {\n      control: 'text',\n      description: 'The title text to display',\n    },\n  },\n}"
                },
                {
                    "name": "WithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Update user documentation',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixFileTextLine\" value=\"Documentation\" />\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"3 days ago\" />\n        </div>\n        <div slot=\"actions\">\n          <ds-button variant=\"ghost\" size=\"sm\">Skip</ds-button>\n          <ds-button variant=\"primary\" size=\"sm\">Review</ds-button>\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Review and approve design changes',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-list-item [title]=\"title\">\n        <div slot=\"metadata\">\n          <ds-metadata-item icon=\"remixTimeLine\" value=\"4 hours ago\" />\n          <ds-metadata-item icon=\"remixUserLine\" value=\"Based on 8 reviews\" />\n          <ds-metadata-item icon=\"remixAlarmLine\" value=\"Important\" variant=\"warning\" />\n        </div>\n      </ds-list-item>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'remixTimeLine',\n    value: '4 hours ago',\n  },\n}"
                },
                {
                    "name": "CommonUseCases",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <!-- Status indicators -->\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Status Indicators</h3>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item\n              icon=\"remixSparklingFill\"\n              value=\"Important\"\n              tooltip=\"High priority item\"\n            />\n            <ds-metadata-item\n              icon=\"remixCheckLine\"\n              value=\"Verified\"\n              tooltip=\"Verified by system\"\n            />\n          </div>\n        </div>\n\n        <!-- Time-related -->\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Time Information</h3>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item\n              icon=\"remixTimeLine\"\n              value=\"4 hours ago\"\n            />\n            <ds-metadata-item\n              icon=\"remixCalendarLine\"\n              value=\"Due tomorrow\"\n              tooltip=\"Due on March 15, 2024\"\n            />\n          </div>\n        </div>\n\n        <!-- Data sources -->\n        <div>\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: 500;\">Data Sources</h3>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item\n              icon=\"remixSurveyLine\"\n              value=\"Based on 12 inquiries\"\n              tooltip=\"Data from recent customer interactions\"\n            />\n            <ds-metadata-item\n              icon=\"remixDatabaseLine\"\n              value=\"System generated\"\n              tooltip=\"Generated by AI analysis\"\n            />\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsMetadataItemComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Metadata Item',\n  component: DsMetadataItemComponent,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA compact component for displaying metadata information with an icon and text. Perfect for status indicators, timestamps, and other supplementary information.\n\n## Features\n\n- **Compact Design**: 20px height with 4px gap between icon and text\n- **Consistent Typography**: Uses ui-xs-regular (12px) for text\n- **Semantic Colors**: Uses tertiary text color for both icon and text\n- **Tooltip Support**: Optional tooltip for additional context\n- **Accessible**: Follows WCAG guidelines for color contrast and interactive elements\n\n## Usage Guidelines\n\n1. Use for supplementary information that doesn't require user interaction\n2. Keep text content concise and clear\n3. Choose appropriate icons that enhance understanding\n4. Add tooltips for additional context when needed\n5. Group related metadata items with consistent spacing\n\n## Examples\n\n\\`\\`\\`html\n<!-- Basic usage -->\n<ds-metadata-item\n  icon=\"remixTimeLine\"\n  value=\"4 hours ago\"\n/>\n\n<!-- With tooltip -->\n<ds-metadata-item\n  icon=\"remixSurveyLine\"\n  value=\"Based on 12 inquiries\"\n  tooltip=\"Data collected from recent customer inquiries\"\n/>\n\n<!-- Multiple items -->\n<div style=\"display: flex; gap: 12px;\">\n  <ds-metadata-item\n    icon=\"remixSparklingFill\"\n    value=\"Important\"\n  />\n  <ds-metadata-item\n    icon=\"remixTimeLine\"\n    value=\"4 hours ago\"\n  />\n</div>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    icon: {\n      control: 'text',\n      description: 'The name of the icon to display',\n    },\n    value: {\n      control: 'text',\n      description: 'The text value to display',\n    },\n    tooltip: {\n      control: 'text',\n      description: 'Optional tooltip text for additional context',\n    },\n  },\n  args: {\n    icon: 'remixTimeLine',\n    value: '4 hours ago',\n  },\n}"
                },
                {
                    "name": "TaskMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; gap: 12px; align-items: center;\">\n        <ds-metadata-item\n          icon=\"remixSparklingFill\"\n          value=\"Important\"\n          tooltip=\"High priority task\"\n        />\n        <ds-metadata-item\n          icon=\"remixSurveyLine\"\n          value=\"Based on 12 inquiries\"\n          tooltip=\"Aggregated from customer feedback\"\n        />\n        <ds-metadata-item\n          icon=\"remixTimeLine\"\n          value=\"4 hours ago\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
                },
                {
                    "name": "WithTooltip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'remixSurveyLine',\n    value: 'Based on 12 inquiries',\n    tooltip: 'Data collected from recent customer inquiries',\n  },\n}"
                }
            ],
            "src/app/components/ui/tabs/ds-tabs.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      value: signal('tab1'),\n    },\n    template: `\n      <ds-tabs [(value)]=\"value\">\n        <ds-tab value=\"tab1\" label=\"First Tab\">\n          <p>Content for first tab</p>\n        </ds-tab>\n        <ds-tab value=\"tab2\" label=\"Second Tab\">\n          <p>Content for second tab</p>\n        </ds-tab>\n        <ds-tab value=\"tab3\" label=\"Third Tab\">\n          <p>Content for third tab</p>\n        </ds-tab>\n      </ds-tabs>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTabs>",
                    "defaultValue": "{\n  title: 'Primitives/Tabs',\n  component: DsTabs,\n  decorators: [\n    moduleMetadata({\n      imports: [DsTabs, DsTab],\n    }),\n  ],\n  tags: ['autodocs'],\n}"
                },
                {
                    "name": "WithBadges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      value: signal('inbox'),\n    },\n    template: `\n      <ds-tabs [(value)]=\"value\">\n        <ds-tab value=\"inbox\" label=\"Inbox\" [showBadge]=\"true\" [badgeCount]=\"3\">\n          <p>Inbox content</p>\n        </ds-tab>\n        <ds-tab value=\"tasks\" label=\"My tasks\" [showBadge]=\"true\" [badgeCount]=\"12\">\n          <p>Tasks content</p>\n        </ds-tab>\n        <ds-tab value=\"archive\" label=\"Archive\">\n          <p>Archive content</p>\n        </ds-tab>\n      </ds-tabs>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithCustomContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      value: signal('settings'),\n    },\n    template: `\n      <ds-tabs [(value)]=\"value\">\n        <ds-tab value=\"profile\" label=\"Profile\">\n          <div class=\"tw-p-4\">\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Profile Settings</h3>\n            <p>Manage your profile information here.</p>\n          </div>\n        </ds-tab>\n        <ds-tab value=\"settings\" label=\"Settings\">\n          <div class=\"tw-p-4\">\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Account Settings</h3>\n            <p>Configure your account preferences.</p>\n          </div>\n        </ds-tab>\n        <ds-tab value=\"notifications\" label=\"Notifications\" [showBadge]=\"true\" [badgeCount]=\"5\">\n          <div class=\"tw-p-4\">\n            <h3 class=\"tw-text-lg tw-font-semibold tw-mb-2\">Notification Settings</h3>\n            <p>Manage your notification preferences.</p>\n          </div>\n        </ds-tab>\n      </ds-tabs>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/tooltip/ds-tooltip.stories.ts": [
                {
                    "name": "ButtonSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\n        <ds-tooltip text=\"Small button tooltip\">\n          <ds-button size=\"sm\" variant=\"primary\">Small</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Medium button tooltip\">\n          <ds-button size=\"md\" variant=\"secondary\">Medium</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Large button tooltip\">\n          <ds-button size=\"lg\" variant=\"ghost\">Large</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'This is a helpful tooltip',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-tooltip [text]=\"text\">\n        <ds-button variant=\"primary\">Hover me</ds-button>\n      </ds-tooltip>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "DifferentPlacements",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 4rem; padding: 4rem; place-items: center;\">\n        <ds-tooltip text=\"Tooltip on top\">\n          <ds-button>Top</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Tooltip on right\">\n          <ds-button>Right</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Tooltip on bottom\">\n          <ds-button>Bottom</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Tooltip on left\">\n          <ds-button>Left</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Auto placement\">\n          <ds-button>Auto</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Another tooltip\">\n          <ds-button>Center</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "IconButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;\">\n        <ds-tooltip text=\"Add to favorites\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixStarLine\" \n            ariaLabel=\"Favorite\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Settings and preferences\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixSettingsLine\" \n            ariaLabel=\"Settings\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"More options menu\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixMoreLine\" \n            ariaLabel=\"More options\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Delete permanently\">\n          <ds-button \n            [iconOnly]=\"true\" \n            leadingIcon=\"remixDeleteBinLine\" \n            ariaLabel=\"Delete\"\n            variant=\"ghost\"\n          ></ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Click to see the action',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      clickCount: 0,\n      onClick: function() {\n        this['clickCount']++;\n        console.log('Button clicked from tooltip!');\n      }\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 1rem; align-items: center;\">\n        <ds-tooltip [text]=\"text\">\n          <ds-button (clicked)=\"onClick()\">\n            Click me ({{clickCount}})\n          </ds-button>\n        </ds-tooltip>\n        <p style=\"font-size: 0.875rem; color: var(--text-color-default-secondary);\">\n          Click count: {{clickCount}}\n        </p>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "LongText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tooltip text=\"This is a very long tooltip text that should wrap properly and demonstrate how the tooltip handles longer content gracefully without breaking the layout.\">\n        <ds-button>Long tooltip text</ds-button>\n      </ds-tooltip>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTooltipComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Tooltip',\n  component: DsTooltipComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    text: {\n      control: { type: 'text' },\n      description: 'The text content to display in the tooltip',\n    },\n  },\n}"
                },
                {
                    "name": "WithButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 2rem; align-items: center; flex-wrap: wrap;\">\n        <ds-tooltip text=\"Primary action button\">\n          <ds-button variant=\"primary\">Primary</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Secondary action button\">\n          <ds-button variant=\"secondary\">Secondary</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Ghost style button\">\n          <ds-button variant=\"ghost\">Ghost</ds-button>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Destructive action - use with caution\">\n          <ds-button variant=\"destructive\">Delete</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsButtonComponent],\n    },\n  }),\n}"
                },
                {
                    "name": "WithFormElements",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 2rem; align-items: flex-start; width: 300px;\">\n        <ds-tooltip text=\"Enter your email address\">\n          <ds-input \n            type=\"email\" \n            placeholder=\"Email address\"\n            variant=\"default\"\n          />\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Check this to receive notifications\">\n          <div style=\"display: flex; align-items: center; gap: 8px;\">\n            <ds-checkbox />\n            <ds-label>Subscribe to notifications</ds-label>\n          </div>\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"This icon represents settings\">\n          <ds-icon name=\"remixSettingsLine\" size=\"24px\" style=\"cursor: pointer;\" />\n        </ds-tooltip>\n        \n        <ds-tooltip text=\"Submit your information\">\n          <ds-button variant=\"primary\" size=\"sm\">Submit</ds-button>\n        </ds-tooltip>\n      </div>\n    `,\n    moduleMetadata: {\n      imports: [DsTooltipComponent, DsInputComponent, DsCheckboxComponent, DsLabelComponent, DsIconComponent, DsButtonComponent],\n    },\n  }),\n}"
                }
            ],
            "src/app/components/ui/editable-table/ds-editable-table.stories.ts": [
                {
                    "name": "categoryOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 'electronics', label: 'Electronics', value: 'Electronics' },\n  { id: 'accessories', label: 'Accessories', value: 'Accessories' },\n  { id: 'furniture', label: 'Furniture', value: 'Furniture' },\n  { id: 'office', label: 'Office', value: 'Office' },\n]"
                },
                {
                    "name": "EmptyState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      emptyData: signal([]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: '',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onRowAdded: (row: any) => {\n        console.log('First row added:', row);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"emptyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [emptyMessage]=\"'No invoice lines yet'\"\n        [addRowButtonText]=\"'Add first line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (rowAdded)=\"onRowAdded($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Empty state with centered \"Add first line\" button. Shows empty state message and call-to-action.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "invoiceColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'description',\n    header: 'Description',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Add description...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n        maxWidth: 'xl',\n        truncate: true,\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'quantity',\n    header: 'Quantity',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.5,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'unitPrice',\n    header: 'Unit Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'discount',\n    header: 'Discount',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'total',\n    header: 'Total',\n    cell: (info) => info.getValue(),\n    enableSorting: true,\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n]"
                },
                {
                    "name": "InvoiceLinesReorderable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceData: signal([...sampleInvoiceLines]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        description: 'Add description',\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        total: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"invoiceData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [showDragHandle]=\"true\"\n        [addRowButtonText]=\"'Add invoice line'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Invoice lines table with drag-and-drop reordering enabled. Sorting is disabled to allow manual ordering. Drag the handle icon to reorder rows.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsEditableTableComponent>",
                    "defaultValue": "{\n  title: 'Components/Editable Table',\n  component: DsEditableTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixDeleteBinLine,\n          remixDraggable,\n          remixInboxLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'An editable data table component with inline editing, drag-and-drop row reordering, and row management. When `reorderable` is true, sorting is disabled. When false, column sorting is enabled.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display and edit (two-way binding)',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    reorderable: {\n      control: 'boolean',\n      description: 'Enable drag-and-drop row reordering (disables sorting when true)',\n    },\n    allowAddRow: {\n      control: 'boolean',\n      description: 'Allow adding new rows',\n    },\n    allowDeleteRow: {\n      control: 'boolean',\n      description: 'Allow deleting rows',\n    },\n    showDragHandle: {\n      control: 'boolean',\n      description: 'Show drag handle column (only when reorderable is true)',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    addRowButtonText: {\n      control: 'text',\n      description: 'Text for add row button',\n    },\n  },\n}"
                },
                {
                    "name": "NoDeleteAllowed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      lockedData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"lockedData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"false\"\n        [addRowButtonText]=\"'Add line'\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Editable table without delete functionality. Actions column is hidden when allowDeleteRow is false.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "NoDragHandle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      noDragData: signal([...sampleProducts]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"noDragData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [showDragHandle]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Reorderable table without visible drag handle. Rows can still be dragged, but the drag handle column is hidden.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "priorityOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 'low', label: 'Low', value: 'Low' },\n  { id: 'medium', label: 'Medium', value: 'Medium' },\n  { id: 'high', label: 'High', value: 'High' },\n]"
                },
                {
                    "name": "productColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter product name...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'sku',\n    header: 'SKU',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'SKU-000'\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: categoryOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 0.01,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    cell: (info) => editableNumberCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      min: 0,\n      step: 1,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'xs',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n]"
                },
                {
                    "name": "ProductsSortable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      productData: signal([...sampleProducts]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        name: '',\n        sku: '',\n        category: 'Electronics',\n        price: 0,\n        stock: 0\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onSortingChanged: (sorting: any) => {\n        console.log('Sorting changed:', sorting);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"productData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add product'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (sortingChanged)=\"onSortingChanged($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: productColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Products table with column sorting enabled. Row reordering is disabled. Click column headers to sort.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "ReadOnlyMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      readOnlyData: signal([...sampleInvoiceLines]),\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"readOnlyData\"\n        [columns]=\"columns\"\n        [reorderable]=\"false\"\n        [allowAddRow]=\"false\"\n        [allowDeleteRow]=\"false\"\n      />\n    `,\n  }),\n  args: {\n    columns: invoiceColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Table with all editing features disabled. Cells are still editable (use readonly on cell data to fully disable editing).',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "sampleInvoiceLines",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InvoiceLine[]",
                    "defaultValue": "[\n  { \n    id: '1', \n    name: 'Administration fee', \n    description: 'Covers handling and coordination', \n    quantity: 1, \n    unitPrice: 500, \n    discount: 0, \n    total: 500 \n  },\n  { \n    id: '2', \n    name: 'Miscellaneous', \n    description: 'Various small items', \n    quantity: 2, \n    unitPrice: 400, \n    discount: 0, \n    total: 800 \n  },\n  { \n    id: '3', \n    name: 'Technical Manager', \n    description: 'Consulting services', \n    quantity: 6.5, \n    unitPrice: 800, \n    discount: 0, \n    total: 5200 \n  },\n]"
                },
                {
                    "name": "sampleProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "defaultValue": "[\n  { id: '1', name: 'Laptop Pro', sku: 'LT-001', category: 'Electronics', price: 1299.99, stock: 45 },\n  { id: '2', name: 'Wireless Mouse', sku: 'MS-102', category: 'Accessories', price: 29.99, stock: 150 },\n  { id: '3', name: 'USB-C Cable', sku: 'CB-203', category: 'Accessories', price: 12.99, stock: 8 },\n]"
                },
                {
                    "name": "sampleTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "defaultValue": "[\n  { id: '1', title: 'Fix ventilation system', assignee: 'John Doe', priority: 'High', status: 'In Progress', dueDate: '2024-01-15' },\n  { id: '2', title: 'Repaint hallway', assignee: 'Jane Smith', priority: 'Medium', status: 'To Do', dueDate: '2024-01-20' },\n  { id: '3', title: 'Replace light fixtures', assignee: 'Bob Johnson', priority: 'Low', status: 'Done', dueDate: '2024-01-10' },\n]"
                },
                {
                    "name": "statusOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 'todo', label: 'To Do', value: 'To Do' },\n  { id: 'inprogress', label: 'In Progress', value: 'In Progress' },\n  { id: 'done', label: 'Done', value: 'Done' },\n]"
                },
                {
                    "name": "taskColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  {\n    accessorKey: 'title',\n    header: 'Task',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Enter task title...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'lg',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'assignee',\n    header: 'Assignee',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      placeholder: 'Assign to...'\n    }),\n    meta: {\n      sizing: {\n        minWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'priority',\n    header: 'Priority',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: priorityOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'sm',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: (info) => editableSelectCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n      options: statusOptions,\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n  {\n    accessorKey: 'dueDate',\n    header: 'Due Date',\n    cell: (info) => editableTextCell({\n      row: info.row.original,\n      rowIndex: info.row.index,\n      value: info.getValue(),\n    }),\n    meta: {\n      sizing: {\n        maxWidth: 'md',\n      }\n    } as DsEditableTableColumnMeta,\n  },\n]"
                },
                {
                    "name": "TasksWithSelects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: {\n      ...args,\n      taskData: signal([...sampleTasks]),\n      newRowTemplate: {\n        id: Math.random().toString(36).substr(2, 9),\n        title: '',\n        assignee: '',\n        priority: 'Medium',\n        status: 'To Do',\n        dueDate: ''\n      },\n      onCellEdited: (event: any) => {\n        console.log('Cell edited:', event);\n      },\n      onRowAdded: (row: any) => {\n        console.log('Row added:', row);\n      },\n      onRowDeleted: (event: any) => {\n        console.log('Row deleted:', event);\n      },\n      onRowReordered: (event: any) => {\n        console.log('Row reordered:', event);\n      },\n    },\n    template: `\n      <ds-editable-table\n        [(data)]=\"taskData\"\n        [columns]=\"columns\"\n        [reorderable]=\"true\"\n        [allowAddRow]=\"true\"\n        [allowDeleteRow]=\"true\"\n        [addRowButtonText]=\"'Add task'\"\n        [newRowTemplate]=\"newRowTemplate\"\n        (cellEdited)=\"onCellEdited($event)\"\n        (rowAdded)=\"onRowAdded($event)\"\n        (rowDeleted)=\"onRowDeleted($event)\"\n        (rowReordered)=\"onRowReordered($event)\"\n      />\n    `,\n  }),\n  args: {\n    columns: taskColumns,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Task list with select dropdowns for priority and status. Demonstrates using editable select cells with options.',\n      },\n    },\n  },\n}"
                }
            ],
            "src/app/components/ui/input/ds-input.stories.ts": [
                {
                    "name": "Clearable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { clearable: true, placeholder: 'Type to see clear button' },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { disabled: true, placeholder: 'Disabled input' },\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'error', placeholder: 'Error state' },\n}"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { ghost: true, placeholder: 'Ghost input...' },\n}"
                },
                {
                    "name": "GhostWithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { ghost: true, leadingIcon: 'remixSearchLine', placeholder: 'Search...' },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsInputComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Input',\n  component: DsInputComponent,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      }\n    }\n  },\n  decorators: [\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\n    )\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\n    type: { control: { type: 'select' }, options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'] },\n    placeholder: { control: 'text' },\n    disabled: { control: 'boolean' },\n    readonly: { control: 'boolean' },\n    required: { control: 'boolean' },\n    clearable: { control: 'boolean' },\n    ghost: { control: 'boolean' },\n    leadingIcon: { control: 'text' },\n    trailingIcon: { control: 'text' },\n    ariaLabel: { control: 'text' },\n    ariaDescribedBy: { control: 'text' },\n  },\n  args: {\n    variant: 'default',\n    type: 'text',\n    placeholder: 'Enter text...',\n    disabled: false,\n    readonly: false,\n    required: false,\n    clearable: false,\n    ghost: false,\n  },\n}"
                },
                {
                    "name": "Readonly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { readonly: true, placeholder: 'Readonly input' },\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'success', placeholder: 'Success state' },\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'warning', placeholder: 'Warning state' },\n}"
                },
                {
                    "name": "WithLeadingIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { leadingIcon: 'remixUserLine', placeholder: 'Username' },\n}"
                }
            ],
            "src/app/components/ui/data-table/ds-data-table.stories.ts": [
                {
                    "name": "ClickableRows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    rowClickable: true,\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      onRowClicked: (row: User) => {\n        alert(`Clicked on: ${row.name}`);\n      },\n    },\n    template: `\n      <ds-data-table\n        [data]=\"data\"\n        [columns]=\"columns\"\n        [searchable]=\"searchable\"\n        [paginated]=\"paginated\"\n        [pageSize]=\"pageSize\"\n        [rowClickable]=\"rowClickable\"\n        (rowClicked)=\"onRowClicked($event)\"\n      />\n    `,\n  }),\n}"
                },
                {
                    "name": "CompactView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    showColumnVisibility: false,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic data table with column sizing, sorting, search, pagination, and column visibility management. Click the column icon button to show/hide columns dynamically. Columns use size variants (xs, sm, md, lg, xl) for consistent width constraints.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "EmptyState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: [],\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    emptyMessage: 'No users found',\n  },\n}"
                },
                {
                    "name": "LargeDataset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: Array.from({ length: 100 }, (_, i) => ({\n      id: i + 1,\n      name: `User ${i + 1}`,\n      email: `user${i + 1}@example.com`,\n      role: ['Admin', 'Editor', 'Viewer'][i % 3],\n      status: (['active', 'inactive', 'pending'] as const)[i % 3],\n      joinDate: new Date(2023, i % 12, (i % 28) + 1).toISOString().split('T')[0],\n    })),\n    columns: userColumns,\n    searchable: true,\n    paginated: true,\n    pageSize: 10,\n    pageSizeOptions: [10, 25, 50, 100],\n    showColumnVisibility: true,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsDataTableComponent>",
                    "defaultValue": "{\n  title: 'Components/Data Table',\n  component: DsDataTableComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixArrowUpDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n          remixEyeLine,\n          remixEditLine,\n          remixDeleteBinLine,\n          remixLoader4Line,\n        }),\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'A powerful data table component with sorting, filtering, searching, pagination, and column sizing. Use the `meta.sizing` property on columns to control min-width, max-width, and text truncation.',\n      },\n    },\n  },\n  argTypes: {\n    data: {\n      control: false,\n      description: 'Array of data to display in the table',\n    },\n    columns: {\n      control: false,\n      description: 'Column definitions for the table',\n    },\n    searchable: {\n      control: 'boolean',\n      description: 'Enable global search functionality',\n    },\n    searchPlaceholder: {\n      control: 'text',\n      description: 'Placeholder text for search input',\n    },\n    paginated: {\n      control: 'boolean',\n      description: 'Enable pagination',\n    },\n    pageSize: {\n      control: 'number',\n      description: 'Number of rows per page',\n    },\n    showColumnVisibility: {\n      control: 'boolean',\n      description: 'Show column visibility toggle',\n    },\n    emptyMessage: {\n      control: 'text',\n      description: 'Message to display when table is empty',\n    },\n    rowClickable: {\n      control: 'boolean',\n      description: 'Make rows clickable',\n    },\n  },\n}"
                },
                {
                    "name": "productColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Product Name',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'category',\n    header: 'Category',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'price',\n    header: 'Price',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const price = info.getValue() as number;\n      return `<span style=\"font-weight: 600;\">$${price.toFixed(2)}</span>`;\n    },\n  },\n  {\n    accessorKey: 'stock',\n    header: 'Stock',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const stock = info.getValue() as number;\n      const color = stock === 0 ? '#ef4444' : stock < 10 ? '#f59e0b' : '#10b981';\n      return `<span style=\"color: ${color}; font-weight: 600;\">${stock}</span>`;\n    },\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        in_stock: 'success',\n        low_stock: 'warning',\n        out_of_stock: 'destructive',\n      };\n      const variant = variantMap[status] || 'grey';\n      const label = status.replace('_', ' ').toUpperCase();\n      return `<ds-badge variant=\"${variant}\">${label}</ds-badge>`;\n    },\n  },\n]"
                },
                {
                    "name": "Products",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleProducts,\n    columns: productColumns,\n    searchable: true,\n    searchPlaceholder: 'Search products...',\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Product catalog table demonstrating different column widths for different data types (narrow ID, wide product names, compact prices).',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "sampleProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "defaultValue": "[\n  { id: 1, name: 'Laptop Pro', category: 'Electronics', price: 1299.99, stock: 45, status: 'in_stock' },\n  { id: 2, name: 'Wireless Mouse', category: 'Accessories', price: 29.99, stock: 150, status: 'in_stock' },\n  { id: 3, name: 'USB-C Cable', category: 'Accessories', price: 12.99, stock: 8, status: 'low_stock' },\n  { id: 4, name: 'Monitor 27\"', category: 'Electronics', price: 399.99, stock: 0, status: 'out_of_stock' },\n  { id: 5, name: 'Keyboard Mechanical', category: 'Accessories', price: 89.99, stock: 75, status: 'in_stock' },\n  { id: 6, name: 'Webcam HD', category: 'Electronics', price: 79.99, stock: 5, status: 'low_stock' },\n  { id: 7, name: 'Desk Lamp', category: 'Office', price: 34.99, stock: 120, status: 'in_stock' },\n  { id: 8, name: 'Office Chair', category: 'Furniture', price: 249.99, stock: 25, status: 'in_stock' },\n]"
                },
                {
                    "name": "sampleUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "defaultValue": "[\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', role: 'Editor', status: 'active', joinDate: '2023-02-20' },\n  { id: 3, name: 'Bob Johnson', email: 'bob.johnson@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-03-10' },\n  { id: 4, name: 'Alice Williams', email: 'alice.w@example.com', role: 'Admin', status: 'active', joinDate: '2023-04-05' },\n  { id: 5, name: 'Charlie Brown', email: 'charlie.b@example.com', role: 'Editor', status: 'pending', joinDate: '2023-05-12' },\n  { id: 6, name: 'Diana Prince', email: 'diana.p@example.com', role: 'Viewer', status: 'active', joinDate: '2023-06-18' },\n  { id: 7, name: 'Ethan Hunt', email: 'ethan.h@example.com', role: 'Editor', status: 'active', joinDate: '2023-07-22' },\n  { id: 8, name: 'Fiona Green', email: 'fiona.g@example.com', role: 'Viewer', status: 'inactive', joinDate: '2023-08-30' },\n  { id: 9, name: 'George Miller', email: 'george.m@example.com', role: 'Admin', status: 'active', joinDate: '2023-09-14' },\n  { id: 10, name: 'Hannah Montana', email: 'hannah.m@example.com', role: 'Editor', status: 'active', joinDate: '2023-10-01' },\n]"
                },
                {
                    "name": "userColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px\n        maxWidth: 'lg',  // 256px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n    meta: {\n      sizing: {\n        minWidth: 'md',  // 192px\n        maxWidth: 'xl',  // 320px\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const variantMap: Record<string, string> = {\n        active: 'success',\n        inactive: 'grey',\n        pending: 'warning',\n      };\n      const variant = variantMap[status] || 'grey';\n      return `<ds-badge variant=\"${variant}\">${status.toUpperCase()}</ds-badge>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n  },\n]"
                },
                {
                    "name": "userColumnsWithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  ...userColumns,\n  {\n    id: 'actions',\n    header: 'Actions',\n    enableSorting: false,\n    enableHiding: false,\n    meta: {\n      sizing: {\n        maxWidth: 'sm', // 128px\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      return `\n        <div style=\"display: flex; gap: 8px; align-items: center;\">\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='var(--color-background-neutral-secondary-hover)'; this.style.color='var(--text-color-default-primary)';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Edit user: ${info.row.original.name}')\"\n            title=\"Edit\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n            </svg>\n          </button>\n          <button \n            class=\"action-btn\"\n            style=\"padding: 4px 8px; border: none; background: transparent; cursor: pointer; border-radius: 4px; color: var(--text-color-default-secondary); transition: all 0.2s;\"\n            onmouseover=\"this.style.background='#fee2e2'; this.style.color='#ef4444';\"\n            onmouseout=\"this.style.background='transparent'; this.style.color='var(--text-color-default-secondary)';\"\n            onclick=\"alert('Delete user: ${info.row.original.name}')\"\n            title=\"Delete\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <polyline points=\"3 6 5 6 21 6\"></polyline>\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n            </svg>\n          </button>\n        </div>\n      `;\n    },\n  },\n]"
                },
                {
                    "name": "userColumnsWithSizing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  {\n    accessorKey: 'id',\n    header: 'ID',\n    meta: {\n      sizing: {\n        maxWidth: 'xs', // 96px - narrow fixed width\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    meta: {\n      sizing: {\n        minWidth: 'sm',  // 128px minimum\n        maxWidth: 'lg',  // 256px maximum\n        truncate: true,  // Show ellipsis\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email Address (Very Long Header Name)',\n    meta: {\n      sizing: {\n        maxWidth: '300px', // Custom pixel value\n        truncate: true,\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'role',\n    header: 'Role',\n    meta: {\n      sizing: {\n        minWidth: 'xs',\n        maxWidth: 'sm',\n      }\n    } as DsDataTableColumnMeta,\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    meta: {\n      sizing: {\n        minWidth: 'sm',\n        maxWidth: 'md',\n        truncate: false, // Allow wrapping instead of truncating\n      }\n    } as DsDataTableColumnMeta,\n    cell: (info) => {\n      const status = info.getValue() as string;\n      const statusColors: Record<string, string> = {\n        active: 'color: #10b981; background: #d1fae5; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        inactive: 'color: #6b7280; background: #f3f4f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n        pending: 'color: #f59e0b; background: #fef3c7; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600;',\n      };\n      return `<span style=\"${statusColors[status] || statusColors['inactive']}\">${status.toUpperCase()}</span>`;\n    },\n  },\n  {\n    accessorKey: 'joinDate',\n    header: 'Join Date',\n    meta: {\n      sizing: {\n        maxWidth: 'md', // 192px\n      }\n    } as DsDataTableColumnMeta,\n  },\n]"
                },
                {
                    "name": "WithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n    rowClickable: false,\n  },\n}"
                },
                {
                    "name": "WithColumnManagement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumnsWithActions,\n    searchable: true,\n    paginated: true,\n    pageSize: 8,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Demonstrates column visibility management using the refactored ds-listbox component:\n- **Content Projection**: The column icon button trigger uses content projection for flexibility\n- **Portal Dropdown**: Column selector appears as an overlay dropdown using CDK Portal\n- **Multi-Select**: Toggle multiple columns on/off simultaneously\n- **Persistent State**: Selected columns are reflected with checkmarks\n- **Auto-Close**: Single selection closes the dropdown, multi-selection keeps it open\n\nClick the column icon button in the toolbar to manage which columns are visible. The dropdown uses the same portal and trigger pattern as ds-menu for consistency.`,\n      },\n    },\n  },\n}"
                },
                {
                    "name": "WithColumnSizing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: [\n      ...sampleUsers.slice(0, 3),\n      // Add some users with very long content to demonstrate truncation\n      {\n        id: 11,\n        name: 'Alexandra Maximillian Constantine',\n        email: 'alexandra.maximillian.constantine@verylongdomainexample.com',\n        role: 'SuperAdmin',\n        status: 'active' as const,\n        joinDate: '2023-11-01',\n      },\n      {\n        id: 12,\n        name: 'Benjamin Christopher Wellington',\n        email: 'benjamin.c.wellington@anotherlongdomainname.org',\n        role: 'Editor',\n        status: 'pending' as const,\n        joinDate: '2023-12-15',\n      },\n    ],\n    columns: userColumnsWithSizing,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `Advanced column sizing demonstration showing:\n- **Narrow columns** with \\`maxWidth: 'xs'\\` (96px) for ID\n- **Min/max constraints** with \\`minWidth: 'sm'\\` and \\`maxWidth: 'lg'\\` for Name\n- **Custom pixel values** like \\`maxWidth: '300px'\\` for Email\n- **Text truncation** with ellipsis (default when maxWidth is set)\n- **No truncation** with \\`truncate: false\\` to allow text wrapping\n\nTry resizing the browser to see how columns behave with long content.`,\n      },\n    },\n  },\n}"
                },
                {
                    "name": "WithoutPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleUsers.slice(0, 5),\n    columns: userColumns,\n    searchable: true,\n    paginated: false,\n    showColumnVisibility: true,\n  },\n}"
                },
                {
                    "name": "WithoutSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    data: sampleUsers,\n    columns: userColumns,\n    searchable: false,\n    paginated: true,\n    pageSize: 5,\n    showColumnVisibility: true,\n  },\n}"
                }
            ],
            "src/app/components/ui/icon/ds-icon.stories.ts": [
                {
                    "name": "Colors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n        <div style=\"display: flex; align-items: center; gap: 16px;\">\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"primary\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"secondary\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"tertiary\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"brand\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"success\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"warning\"></ds-icon>\n          <ds-icon name=\"remixHomeLine\" size=\"24px\" color=\"destructive\"></ds-icon>\n        </div>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "ColorTest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px; padding: 20px;\">\n        <!-- Test 1: Hardcoded colors for reference -->\n        <div>\n          <h4>Reference Colors (hardcoded)</h4>\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\n            <div style=\"color: #202227;\">■ primary (#202227)</div>\n            <div style=\"color: #545B66;\">■ secondary (#545B66)</div>\n            <div style=\"color: #626B78;\">■ tertiary (#626B78)</div>\n            <div style=\"color: #6B5FF5;\">■ brand (#6B5FF5)</div>\n            <div style=\"color: #158452;\">■ success (#158452)</div>\n            <div style=\"color: #d97706;\">■ warning (#d97706)</div>\n            <div style=\"color: #dc2626;\">■ destructive (#dc2626)</div>\n          </div>\n        </div>\n        \n        <!-- Test 2: Our icon component -->\n        <div>\n          <h4>Icon Component Colors</h4>\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"primary\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"secondary\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"tertiary\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"brand\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"success\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"warning\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"destructive\"></ds-icon>\n          </div>\n        </div>\n        \n        <!-- Test 3: Custom colors that bypass CSS classes -->\n        <div>\n          <h4>Custom Colors (bypass CSS)</h4>\n          <div style=\"display: flex; gap: 16px; align-items: center;\">\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#202227\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#545B66\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#626B78\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#6B5FF5\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#158452\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#d97706\"></ds-icon>\n            <ds-icon name=\"remixHomeLine\" size=\"lg\" color=\"#dc2626\"></ds-icon>\n          </div>\n        </div>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "CustomSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'remixSearchLine',\n    size: '48px',\n    color: 'brand'\n  }\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'remixHomeLine',\n    size: '20px'\n  }\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'remixSettingsLine',\n    size: '24px',\n    color: 'brand',\n    interactive: true\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsIconComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Icon',\n  component: DsIconComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    name: {\n      control: { type: 'text' },\n      description: 'The name of the icon to display',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['12px', '14px', '16px', '18px', '20px', '22px', '24px', '32px'],\n      description: 'The size of the icon (pixel values or custom CSS value)',\n    },\n    color: {\n      control: { type: 'text' },\n      description: 'The color of the icon. Use predefined values (primary, secondary, tertiary, brand, success, warning, destructive) or any CSS color value (#hex, rgb(), hsl(), var(), etc.)',\n    },\n    interactive: {\n      control: { type: 'boolean' },\n      description: 'Whether the icon has interactive states (hover, active)',\n    },\n  },\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 16px;\">\n        <ds-icon name=\"remixHomeLine\" size=\"12px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"14px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"16px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"18px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"20px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"22px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"24px\"></ds-icon>\n        <ds-icon name=\"remixHomeLine\" size=\"32px\"></ds-icon>\n      </div>\n    `\n  })\n}"
                }
            ],
            "src/app/components/ui/listbox/ds-listbox.stories.ts": [
                {
                    "name": "ColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Name', value: 'name' },\n      { id: '2', label: 'Email', value: 'email' },\n      { id: '3', label: 'Role', value: 'role' },\n      { id: '4', label: 'Status', value: 'status' },\n      { id: '5', label: 'Join Date', value: 'joinDate' },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-icon-button icon=\"remixSettings3Line\" variant=\"ghost\" ariaLabel=\"Select columns\" />\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "CustomWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Short', value: 1 },\n      { id: '2', label: 'Medium Length Option', value: 2 },\n      { id: '3', label: 'Very Long Option Name Here', value: 3 },\n    ],\n    multiple: false,\n    disabled: false,\n    width: '300px',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\" [width]=\"width\">\n        <ds-button variant=\"secondary\">Custom Width</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    multiple: false,\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Disabled Listbox</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "FilterPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Active', value: 'active' },\n      { id: '2', label: 'Inactive', value: 'inactive' },\n      { id: '3', label: 'Pending', value: 'pending' },\n      { id: '4', label: 'Archived', value: 'archived' },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"ghost\" leadingIcon=\"remixFilterLine\">Filter Status</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsListboxComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Listbox',\n  component: DsListboxComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [FormsModule, DsButtonComponent, DsIconButtonComponent],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n  },\n  argTypes: {\n    multiple: {\n      control: 'boolean',\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    width: {\n      control: 'text',\n    },\n  },\n}"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Read', value: 'read' },\n      { id: '2', label: 'Write', value: 'write' },\n      { id: '3', label: 'Delete', value: 'delete' },\n      { id: '4', label: 'Admin', value: 'admin' },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Select Permissions</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "simpleOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsListboxOption[]",
                    "defaultValue": "[\n  { id: '1', label: 'Option 1', value: 1 },\n  { id: '2', label: 'Option 2', value: 2 },\n  { id: '3', label: 'Option 3', value: 3 },\n  { id: '4', label: 'Option 4', value: 4 },\n]"
                },
                {
                    "name": "SingleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    multiple: false,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Select Option</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithDisabledOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Available Option 1', value: 1 },\n      { id: '2', label: 'Disabled Option', value: 2, disabled: true },\n      { id: '3', label: 'Available Option 2', value: 3 },\n      { id: '4', label: 'Another Disabled', value: 4, disabled: true },\n    ],\n    multiple: true,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\">Select Options</ds-button>\n      </ds-listbox>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithIconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    multiple: false,\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-listbox [options]=\"options\" [multiple]=\"multiple\" [disabled]=\"disabled\">\n        <ds-icon-button icon=\"remixMoreLine\" variant=\"ghost\" ariaLabel=\"More options\" />\n      </ds-listbox>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/tile/ds-tile.stories.ts": [
                {
                    "name": "ComplexExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: {\n      invoiceLines: sampleInvoiceLines,\n      invoiceColumns: invoiceColumns,\n    },\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <ds-tile orientation=\"vertical\">\n          <ds-tile-section>\n            <tile-header>\n              <header-title>\n                <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\n                Invoice #INV-2024-001\n              </header-title>\n              <header-actions>\n                <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Download</ds-button>\n                <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\n              </header-actions>\n            </tile-header>\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\n              <ds-data-item label=\"Client\" value=\"Acme Corporation\" layout=\"vertical\" />\n              <ds-data-item label=\"Issue Date\" value=\"2024-03-01\" layout=\"vertical\" />\n              <ds-data-item label=\"Due Date\" value=\"2024-03-31\" layout=\"vertical\" />\n              <ds-data-item \n                label=\"Status\" \n                value=\"Pending\" \n                valueType=\"badge\"\n                layout=\"vertical\"\n                badgeVariant=\"warning\"\n                badgeContent=\"Pending\" />\n            </div>\n          </ds-tile-section>\n          \n          <ds-tile-section [padding]=\"false\">\n            <ds-data-table \n              [data]=\"invoiceLines\" \n              [columns]=\"invoiceColumns\"\n              [searchable]=\"false\"\n              [showColumnVisibility]=\"false\"\n              [paginated]=\"false\">\n            </ds-data-table>\n          </ds-tile-section>\n          \n          <ds-tile-section>\n            <div style=\"display: flex; justify-content: flex-end; gap: 8px;\">\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Subtotal\" \n                  value=\"$4,598.83\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'ui-xs-regular'\"\n                  [valueClassName]=\"'ui-lg-medium'\" />\n              </div>\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Tax (10%)\" \n                  value=\"$459.88\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'ui-xs-regular'\"\n                  [valueClassName]=\"'ui-lg-medium'\" />\n              </div>\n              <div style=\"background: var(--color-background-neutral-secondary); border-radius: 6px; width: 192px; padding: 8px 12px;\">\n                <ds-data-item \n                  label=\"Total\" \n                  value=\"$5,058.71\" \n                  layout=\"vertical\"\n                  [labelClassName]=\"'body-sm-semibold'\"\n                  [valueClassName]=\"'ui-lg-medium tw-text-brand'\" />\n              </div>\n            </div>\n          </ds-tile-section>\n        </ds-tile>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    orientation: 'vertical',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-tile [orientation]=\"orientation\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Section Title</header-title>\n            <header-actions>\n              <ds-button size=\"sm\">Action</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">This is a simple tile section with a header and some content.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "invoiceColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDef[]",
                    "defaultValue": "[\n  { accessorKey: 'id', header: 'ID' },\n  { accessorKey: 'description', header: 'Description' },\n  { accessorKey: 'quantity', header: 'Qty' },\n  { accessorKey: 'unitPrice', header: 'Unit Price', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\n  { accessorKey: 'total', header: 'Total', cell: (info) => `$${(info.getValue() as number).toFixed(2)}` },\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTileComponent>",
                    "defaultValue": "{\n  title: 'Layout/Tile',\n  component: DsTileComponent,\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixAddLine,\n          remixEditLine,\n          remixMoreLine,\n          remixFileList3Line,\n          remixUserLine,\n          remixDownloadLine,\n          remixFilterLine,\n          remixSearchLine,\n          remixLayoutColumnLine,\n          remixCloseLine,\n          remixArrowUpLine,\n          remixArrowDownLine,\n          remixInboxLine,\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n        }),\n      ],\n    }),\n    moduleMetadata({\n      imports: [\n        DsTileSectionComponent,\n        TileHeaderComponent,\n        DsButtonComponent,\n        DsIconButtonComponent,\n        DsIconComponent,\n        DsAvatarComponent,\n        DsDataTableComponent,\n        DsBadgeComponent,\n        DsDataItemComponent,\n        DsMetadataItemComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    layout: 'padded',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    orientation: {\n      control: 'select',\n      options: ['vertical', 'horizontal'],\n      description: 'Layout orientation of tile sections',\n    },\n  },\n}"
                },
                {
                    "name": "MultipleActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Document Manager</header-title>\n            <header-actions>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixFilterLine\">Filter</ds-button>\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">New</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">Manage your documents with multiple action options.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "MultipleSectionsHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"horizontal\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Overview</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\n            <ds-data-item \n              label=\"Total Revenue\" \n              value=\"$45,231\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-lg'\" />\n            <ds-data-item \n              label=\"Growth\" \n              value=\"+20.1%\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-md tw-text-success-strong'\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Activity</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: row; gap: 16px;\">\n            <ds-data-item \n              label=\"New Users\" \n              value=\"1,234\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-lg'\" />\n            <ds-data-item \n              label=\"Conversion\" \n              value=\"3.2%\" \n              layout=\"vertical\"\n              [labelClassName]=\"'ui-xs-regular'\"\n              [valueClassName]=\"'heading-md'\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "MultipleSectionsVertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Personal Information</header-title>\n            <header-actions>\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Name\" value=\"Jane Smith\" layout=\"horizontal\" />\n            <ds-data-item label=\"Email\" value=\"jane.smith@example.com\" layout=\"horizontal\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Account Settings</header-title>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Plan\" value=\"Professional\" layout=\"horizontal\" />\n            <ds-data-item \n              label=\"Status\" \n              value=\"Active\" \n              valueType=\"badge\"\n              layout=\"horizontal\"\n              badgeVariant=\"success\"\n              badgeContent=\"Active\" />\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Preferences</header-title>\n            <header-actions>\n              <ds-button size=\"sm\" variant=\"ghost\">Reset</ds-button>\n            </header-actions>\n          </tile-header>\n          <p style=\"margin: 0;\">Configure your application preferences here.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "ResponsiveLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px;\">\n        <p style=\"margin: 0; font-size: 14px; color: var(--text-color-default-secondary);\">\n          Resize your browser to see the responsive behavior. Horizontal tiles stack vertically on mobile, \n          and section headers stack their title and actions.\n        </p>\n        \n        <ds-tile orientation=\"horizontal\">\n          <ds-tile-section>\n            <tile-header>\n              <header-title>Left Section</header-title>\n              <header-actions>\n                <ds-button size=\"sm\" variant=\"ghost\">Action</ds-button>\n              </header-actions>\n            </tile-header>\n            <p style=\"margin: 0;\">This section is on the left on desktop and stacks on top on mobile.</p>\n          </ds-tile-section>\n          \n          <ds-tile-section>\n            <tile-header>\n              <header-title>Right Section</header-title>\n              <header-actions>\n                <ds-button size=\"sm\">Action</ds-button>\n              </header-actions>\n            </tile-header>\n            <p style=\"margin: 0;\">This section is on the right on desktop and stacks below on mobile.</p>\n          </ds-tile-section>\n        </ds-tile>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "sampleInvoiceLines",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InvoiceLine[]",
                    "defaultValue": "[\n  { id: 1, description: 'Professional Services - Consulting', quantity: 10, unitPrice: 150.00, total: 1500.00 },\n  { id: 2, description: 'Software License - Annual', quantity: 5, unitPrice: 299.99, total: 1499.95 },\n  { id: 3, description: 'Cloud Hosting - Monthly', quantity: 12, unitPrice: 49.99, total: 599.88 },\n  { id: 4, description: 'Support & Maintenance', quantity: 1, unitPrice: 999.00, total: 999.00 },\n]"
                },
                {
                    "name": "SectionWithoutHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <p style=\"margin: 0;\">This section has no header, just content with default padding.</p>\n        </ds-tile-section>\n        \n        <ds-tile-section>\n          <tile-header>\n            <header-title>Section with Header</header-title>\n          </tile-header>\n          <p style=\"margin: 0;\">This section has a header for comparison.</p>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "SectionWithoutPadding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>With Padding (Default)</header-title>\n          </tile-header>\n          <div style=\"background: #f0f0f0; padding: 8px; border-radius: 4px;\">\n            This content has the default 20px padding around it.\n          </div>\n        </ds-tile-section>\n        \n        <ds-tile-section [padding]=\"false\">\n          <div style=\"background: #f0f0f0; padding: 20px;\">\n            This content has no section padding. The gray box extends to the edges.\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithDataTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    orientation: 'vertical',\n  },\n  render: (args) => ({\n    props: {\n      ...args,\n      invoiceLines: sampleInvoiceLines,\n      invoiceColumns: invoiceColumns,\n    },\n    template: `\n      <ds-tile [orientation]=\"orientation\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>Invoice Lines</header-title>\n            <header-actions>\n              <ds-button size=\"sm\" leadingIcon=\"remixAddLine\">Add line</ds-button>\n            </header-actions>\n          </tile-header>\n        </ds-tile-section>\n        <ds-tile-section [padding]=\"false\">\n          <ds-data-table \n            [data]=\"invoiceLines\" \n            [columns]=\"invoiceColumns\"\n            [searchable]=\"false\"\n            [showColumnVisibility]=\"false\"\n            [paginated]=\"false\">\n          </ds-data-table>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithTitleAndAvatar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>\n              <ds-avatar type=\"initials\" size=\"sm\" initials=\"JD\" />\n              User Profile\n            </header-title>\n            <header-actions>\n              <ds-icon-button icon=\"remixEditLine\" variant=\"ghost\" ariaLabel=\"Edit\" />\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n            <ds-data-item label=\"Name\" value=\"John Doe\" layout=\"horizontal\" />\n            <ds-data-item label=\"Email\" value=\"john.doe@example.com\" layout=\"horizontal\" />\n            <ds-data-item label=\"Role\" value=\"Administrator\" layout=\"horizontal\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithTitleAndIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-tile orientation=\"vertical\">\n        <ds-tile-section>\n          <tile-header>\n            <header-title>\n              <ds-avatar type=\"icon\" size=\"sm\" iconName=\"remixFileList3Line\" />\n              Invoice Details\n            </header-title>\n            <header-actions>\n              <ds-button variant=\"ghost\" size=\"sm\" leadingIcon=\"remixDownloadLine\">Export</ds-button>\n              <ds-button size=\"sm\" leadingIcon=\"remixEditLine\">Edit</ds-button>\n            </header-actions>\n          </tile-header>\n          <div style=\"display: flex; gap: 12px;\">\n            <ds-metadata-item icon=\"remixFileTextLine\" value=\"Invoice #12345\" />\n            <ds-metadata-item icon=\"remixCalendarLine\" value=\"Due Date: 2024-03-15\" />\n          </div>\n        </ds-tile-section>\n      </ds-tile>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/button/ds-icon-button.stories.ts": [
                {
                    "name": "CustomContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n    ariaLabel: 'Star item'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-icon-button [variant]=\"variant\" [size]=\"size\" [ariaLabel]=\"ariaLabel\">\n        <ds-icon name=\"remixStarFill\" />\n      </ds-icon-button>\n    `,\n    moduleMetadata: {\n      imports: [DsIconComponent]\n    }\n  })\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'remixDeleteBinLine',\n    variant: 'destructive',\n    size: 'md',\n    disabled: true,\n    ariaLabel: 'Delete item',\n    tooltip: 'Cannot delete this item'\n  }\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'remixRefreshLine',\n    variant: 'secondary',\n    size: 'md',\n    loading: true,\n    ariaLabel: 'Refreshing'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsIconButtonComponent>",
                    "defaultValue": "{\n  decorators: [\n    applicationConfig({\n      providers: [provideAllRemixIcons()]\n    })\n  ],\n  parameters: {\n    layout: 'centered'\n  },\n  title: 'Primitives/IconButton',\n  component: DsIconButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\n      description: 'Visual style variant of the button',\n      table: {\n        defaultValue: { summary: 'ghost' }\n      }\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n      description: 'Size variant of the button',\n      table: {\n        defaultValue: { summary: 'md' }\n      }\n    },\n    icon: {\n      control: 'text',\n      description: 'Icon name to display (only used when no custom content is projected)',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Whether the button is in a loading state',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    pressed: {\n      control: 'boolean',\n      description: 'Whether the button is in a pressed state (for toggle buttons)',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    expanded: {\n      control: 'boolean',\n      description: 'Whether the button controls an expanded element',\n      table: {\n        defaultValue: { summary: 'false' }\n      }\n    },\n    ariaLabel: {\n      control: 'text',\n      description: 'Accessible label for the button (required for icon buttons)',\n    },\n    tooltip: {\n      control: 'text',\n      description: 'Tooltip text to display on hover',\n    }\n  }\n}"
                },
                {
                    "name": "SimpleIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'remixEditLine',\n    variant: 'ghost',\n    size: 'md',\n    ariaLabel: 'Edit item',\n    tooltip: 'Edit this item'\n  }\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\n        <ds-icon-button\n          icon=\"remixSettingsLine\"\n          variant=\"ghost\"\n          size=\"sm\"\n          ariaLabel=\"Small settings button\"\n          tooltip=\"Settings (small)\"\n        />\n        <ds-icon-button\n          icon=\"remixSettingsLine\"\n          variant=\"ghost\"\n          size=\"md\"\n          ariaLabel=\"Medium settings button\"\n          tooltip=\"Settings (medium)\"\n        />\n        <ds-icon-button\n          icon=\"remixSettingsLine\"\n          variant=\"ghost\"\n          size=\"lg\"\n          ariaLabel=\"Large settings button\"\n          tooltip=\"Settings (large)\"\n        />\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 8px; align-items: center;\">\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"primary\"\n          ariaLabel=\"Primary variant\"\n          tooltip=\"Primary action\"\n        />\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"secondary\"\n          ariaLabel=\"Secondary variant\"\n          tooltip=\"Secondary action\"\n        />\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"ghost\"\n          ariaLabel=\"Ghost variant\"\n          tooltip=\"Ghost action\"\n        />\n        <ds-icon-button\n          icon=\"remixHeartLine\"\n          variant=\"destructive\"\n          ariaLabel=\"Destructive variant\"\n          tooltip=\"Destructive action\"\n        />\n      </div>\n    `\n  })\n}"
                }
            ],
            "src/app/components/ui/form-field/ds-form-field.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 360px;\">\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\n        </ds-form-field>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsFormFieldComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Form Field',\n  component: DsFormFieldComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [DsFormFieldComponent, DsInputComponent, NgpError],\n    }),\n  ],\n  tags: ['autodocs'],\n  parameters: { layout: 'centered' },\n  argTypes: {\n    label: { control: 'text' },\n    description: { control: 'text' },\n    labelId: { control: 'text' },\n    descriptionId: { control: 'text' },\n  },\n  args: {\n    label: 'Email',\n    description: 'We will never share your email.',\n    labelId: 'email-label',\n    descriptionId: 'email-desc',\n  },\n}"
                },
                {
                    "name": "WithError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 360px;\">\n        <ds-form-field [label]=\"label\" [description]=\"description\" [labelId]=\"labelId\" [descriptionId]=\"descriptionId\">\n          <ds-input ariaLabelledBy=\"email-label\" ariaDescribedBy=\"email-desc\" placeholder=\"you@example.com\"></ds-input>\n          <p ngpError ngpErrorValidator=\"required\">Email is required.</p>\n        </ds-form-field>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "src/app/components/ui/datepicker/ds-datepicker.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    template: `\n      <ds-datepicker [variant]=\"variant\" [disabled]=\"disabled\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n    props: args,\n  }),\n  args: {\n    variant: 'default',\n    disabled: false,\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker [disabled]=\"true\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
                },
                {
                    "name": "ErrorVariant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker variant=\"error\">\n        <ds-button variant=\"destructive\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
                },
                {
                    "name": "Interactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\n    }),\n  ],\n  render: () => {\n    @Component({\n      selector: 'datepicker-interactive',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsButtonComponent, ReactiveFormsModule],\n      template: `\n        <div class=\"tw-space-y-4\">\n          <ds-datepicker \n            [variant]=\"variant()\" \n            [disabled]=\"disabled()\"\n            (dateChange)=\"onDateChange($event)\">\n            <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n              {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'Select Date' }}\n            </ds-button>\n          </ds-datepicker>\n          \n          <div class=\"tw-flex tw-gap-2\">\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('default')\">\n              Default\n            </button>\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('error')\">\n              Error\n            </button>\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('warning')\">\n              Warning\n            </button>\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"variant.set('success')\">\n              Success\n            </button>\n          </div>\n          \n          <div class=\"tw-flex tw-gap-2\">\n            <button \n              class=\"tw-px-3 tw-py-1 tw-rounded tw-border\"\n              (click)=\"disabled.set(!disabled())\">\n              Toggle Disabled ({{ disabled() ? 'Currently Disabled' : 'Currently Enabled' }})\n            </button>\n          </div>\n          \n          <p class=\"body-sm-regular\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\n        </div>\n      `,\n    })\n    class DatepickerInteractive {\n      variant = signal<'default' | 'error' | 'warning' | 'success'>('default');\n      disabled = signal(false);\n      selectedDate = signal<Date | null>(null);\n      \n      onDateChange(date: Date | null) {\n        this.selectedDate.set(date);\n      }\n    }\n\n    return {\n      component: DatepickerInteractive,\n      props: {},\n    };\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsDatepickerComponent>",
                    "defaultValue": "{\n  title: 'Components/Datepicker',\n  component: DsDatepickerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideIcons({\n          remixArrowLeftSLine,\n          remixArrowRightSLine,\n          remixCloseLine,\n          remixCalendarLine,\n        }),\n      ],\n    }),\n    moduleMetadata({\n      imports: [\n        DsDatepickerComponent, \n        ReactiveFormsModule,\n        FormsModule,\n        DsFormFieldComponent, \n        DsButtonComponent,\n        DsInputComponent,\n      ],\n    }),\n  ],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'error', 'warning', 'success'],\n      description: 'Visual variant of the datepicker calendar',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the datepicker is disabled',\n    },\n    disableFutureDates: {\n      control: 'boolean',\n      description: 'When true, disables all dates after today',\n    },\n    isDateDisabled: {\n      control: false,\n      description: 'Advanced: Custom function to determine if a specific date should be disabled. Return true to disable the date.',\n      table: {\n        type: { summary: '(date: Date) => boolean' },\n      },\n    },\n  },\n}"
                },
                {
                    "name": "PastAndCurrentDatesOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker [disableFutureDates]=\"true\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Past Date\n        </ds-button>\n      </ds-datepicker>\n      <p class=\"body-sm-regular tw-mt-2 tw-text-gray-600\">Future dates are disabled</p>\n    `,\n  }),\n}"
                },
                {
                    "name": "SuccessVariant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker variant=\"success\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
                },
                {
                    "name": "WarningVariant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-datepicker variant=\"warning\">\n        <ds-button variant=\"secondary\" iconLeft=\"remixCalendarLine\">\n          Select Date\n        </ds-button>\n      </ds-datepicker>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithFormField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n    }),\n  ],\n  render: () => {\n    @Component({\n      selector: 'datepicker-with-form-field',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsFormFieldComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n      template: `\n        <ds-form-field \n          label=\"Birth Date\" \n          description=\"Select your date of birth\">\n          <ds-datepicker [formControl]=\"dateControl\" [disableFutureDates]=\"true\">\n            <ds-input \n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \n              placeholder=\"Select your birth date\"\n              [readonly]=\"true\"\n              [required]=\"true\"\n              iconRight=\"remixCalendarLine\" />\n          </ds-datepicker>\n          @if (dateControl.invalid && dateControl.touched) {\n            <p slot=\"error\" class=\"ds-form-field__error\">Please select a valid date</p>\n          }\n        </ds-form-field>\n      `,\n    })\n    class DatepickerWithFormField {\n      dateControl = new FormControl<Date | null>(null);\n    }\n\n    return {\n      component: DatepickerWithFormField,\n      props: {},\n    };\n  },\n}"
                },
                {
                    "name": "WithInputTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => {\n    @Component({\n      selector: 'datepicker-with-input',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsInputComponent, FormsModule],\n      template: `\n        <ds-datepicker (dateChange)=\"onDateChange($event)\">\n            <ds-input \n              [ngModel]=\"selectedDate() ? selectedDate()!.toLocaleDateString() : ''\" \n              placeholder=\"Select date\"\n              [readonly]=\"true\"\n              iconRight=\"remixCalendarLine\" />\n        </ds-datepicker>\n        <p class=\"body-sm-regular tw-mt-4\">Selected: {{ selectedDate() ? selectedDate()!.toLocaleDateString() : 'None' }}</p>\n      `,\n    })\n    class DatepickerWithInput {\n      selectedDate = signal<Date | null>(null);\n      \n      onDateChange(date: Date | null) {\n        this.selectedDate.set(date);\n      }\n    }\n\n    return {\n      component: DatepickerWithInput,\n      props: {},\n    };\n  },\n}"
                },
                {
                    "name": "WithReactiveForms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n    }),\n  ],\n  render: () => {\n    @Component({\n      selector: 'datepicker-form-example',\n      standalone: true,\n      imports: [DsDatepickerComponent, DsInputComponent, ReactiveFormsModule, FormsModule],\n      template: `\n        <form>\n          <ds-datepicker [formControl]=\"dateControl\">\n            <ds-input \n              [ngModel]=\"dateControl.value ? dateControl.value.toLocaleDateString() : ''\" \n              placeholder=\"Select date\"\n              [readonly]=\"true\"\n              iconRight=\"remixCalendarLine\" />\n          </ds-datepicker>\n          <p class=\"body-sm-regular tw-mt-4\">\n            Form Value: {{ dateControl.value ? dateControl.value.toLocaleDateString() : 'None' }}\n          </p>\n          <p class=\"body-sm-regular\">Valid: {{ dateControl.valid }}</p>\n        </form>\n      `,\n    })\n    class DatepickerFormExample {\n      dateControl = new FormControl(new Date());\n    }\n\n    return {\n      component: DatepickerFormExample,\n      props: {},\n    };\n  },\n}"
                }
            ],
            "src/app/components/ui/header-details/ds-header-details.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Basic header details example with a primary action and more actions menu. This demonstrates the typical layout for an entity detail page.'\n      }\n    }\n  },\n  args: {\n    title: 'Woods Augusthus',\n    showPrimaryAction: true,\n    primaryActionText: 'Follow',\n    primaryActionIcon: 'remixUserFollowLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: false,\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"User name\"\n            value=\"Woods Augusthus\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"WA\"\n          />\n          <ds-data-item\n            label=\"Company name\"\n            value=\"Propbinder Inc.\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"PI\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
                },
                {
                    "name": "LeaseDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Lease management example demonstrating how to display lease agreement details with actions for renewal and report generation.'\n      }\n    }\n  },\n  args: {\n    title: 'Lease Agreement #LA-2024-001',\n    showPrimaryAction: true,\n    primaryActionText: 'Renew Lease',\n    primaryActionIcon: 'remixRefreshLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'Generate Report',\n    secondaryActionIcon: 'remixFileTextLine',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Tenant\"\n            value=\"Michael Chen\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"MC\"\n          />\n          <ds-data-item\n            label=\"Property\"\n            value=\"Sunset Blvd Apt 4B\"\n            layout=\"vertical\"\n            valueType=\"icon-text\"\n            iconName=\"remixBuildingLine\"\n          />\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Rent Amount\"\n            value=\"$2,400/month\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n          <ds-data-item\n            label=\"Lease Term\"\n            value=\"12 months\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsHeaderDetailsComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Header Details',\n  component: DsHeaderDetailsComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsDataItemComponent]\n    })\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      story: {\n        inline: true,\n        height: 'auto'\n      },\n      description: {\n        component: `\n# Header Details Component\n\nA specialized header component designed for entity detail pages such as Properties, Leases, Inquiries, Assets, and other business entities. It provides a consistent layout with a title row, configurable actions, and flexible content slots for metadata display.\n\n## Design Principles\n\n- **Consistent Spacing**: 24px top padding and gaps for visual hierarchy\n- **Content-First**: Responsive width (10/12 columns of parent) ensures optimal reading experience  \n- **Action-Oriented**: Prominent placement of primary and secondary actions\n- **Flexible Content**: Slot-based architecture for customizable metadata layouts\n- **Responsive**: Adapts gracefully from desktop to mobile viewports\n\n## Anatomy\n\n\\`\\`\\`\n┌─────────────────────────────────────────────────────────────┐\n│  24px padding-top                                           │\n│  ┌───────────────────────────────────────────────────────┐  │\n│  │ Title Row                                             │  │\n│  │ ┌─────────────────┐           ┌─────────────────────┐ │  │\n│  │ │ Entity Title    │           │ Action Buttons      │ │  │\n│  │ │ (H1, 2xl-medium)│           │ [Primary][Secondary]│ │  │\n│  │ └─────────────────┘           └─────────────────────┘ │  │\n│  └───────────────────────────────────────────────────────┘  │\n│  24px gap                                                   │\n│  ┌───────────────────────────────────────────────────────┐  │\n│  │ Details Row (Content Projection)                     │  │\n│  │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐     │  │\n│  │ │ Data Item 1 │ │ Data Item 2 │ │ Data Item 3 │ ... │  │\n│  │ └─────────────┘ └─────────────┘ └─────────────┘     │  │\n│  └───────────────────────────────────────────────────────┘  │\n│  Width: 83.33% (10/12 columns of parent), centered        │\n└─────────────────────────────────────────────────────────────┘\n\\`\\`\\`\n\n## Usage\n\nPerfect for entity detail pages where you need to display:\n- Entity title (e.g., property name, lease reference)\n- Action buttons (edit, delete, follow, etc.)\n- Metadata items using ds-data-item components\n\nThe details row uses content projection with \\`slot=\"details\"\\` to allow flexible arrangement of data items.\n\n## Content Projection\n\n\\`\\`\\`html\n<ds-header-details title=\"Entity Name\">\n  <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 24px;\">\n    <ds-data-item label=\"Field 1\" value=\"Value 1\" layout=\"horizontal\" />\n    <ds-data-item label=\"Field 2\" value=\"Value 2\" layout=\"horizontal\" />\n  </div>\n</ds-header-details>\n\\`\\`\\`\n\n## Best Practices\n\n### Do ✅\n- Use descriptive, entity-specific titles\n- Limit to 2-3 primary actions to avoid overwhelming users\n- Use horizontal layout for data items in the details row\n- Provide meaningful action labels and icons\n\n### Don't ❌\n- Don't use generic titles like \"Details\" or \"Entity\"\n- Don't overcrowd the actions area with too many buttons\n- Don't mix vertical and horizontal data item layouts\n- Don't forget to handle action click events\n\n## Responsive Behavior\n\n- **Desktop (>768px)**: Full horizontal layout with side-by-side title and actions\n- **Tablet (≤768px)**: Title and actions stack vertically with reduced spacing  \n- **Mobile (≤480px)**: Compact spacing and optimized touch targets\n        `\n      }\n    }\n  },\n  argTypes: {\n    title: {\n      control: 'text',\n      description: 'The main title displayed in the header'\n    },\n    showPrimaryAction: {\n      control: 'boolean',\n      description: 'Whether to show the primary action button'\n    },\n    primaryActionText: {\n      control: 'text',\n      description: 'Text for the primary action button'\n    },\n    primaryActionIcon: {\n      control: 'text',\n      description: 'Icon for the primary action button'\n    },\n    primaryActionVariant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\n      description: 'Visual variant for the primary action button'\n    },\n    showSecondaryAction: {\n      control: 'boolean',\n      description: 'Whether to show the secondary action button'\n    },\n    secondaryActionText: {\n      control: 'text',\n      description: 'Text for the secondary action button'\n    },\n    secondaryActionIcon: {\n      control: 'text',\n      description: 'Icon for the secondary action button'\n    },\n    secondaryActionVariant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'ghost', 'destructive'],\n      description: 'Visual variant for the secondary action button'\n    },\n    showMoreActions: {\n      control: 'boolean',\n      description: 'Whether to show the more actions (three dots) button'\n    }\n  }\n}"
                },
                {
                    "name": "MinimalNoActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Minimal header example with no action buttons, useful for read-only entity displays or when actions are handled elsewhere on the page.'\n      }\n    }\n  },\n  args: {\n    title: 'Simple Entity Details',\n    showPrimaryAction: false,\n    showSecondaryAction: false,\n    showMoreActions: false\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Created\"\n            value=\"March 15, 2024\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n          <ds-data-item\n            label=\"Last Modified\"\n            value=\"Yesterday\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
                },
                {
                    "name": "MobileView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Mobile Responsive Header',\n    showPrimaryAction: true,\n    primaryActionText: 'Edit',\n    primaryActionIcon: 'remixEditLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'Share',\n    secondaryActionIcon: 'remixShareLine',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1'\n    },\n    docs: {\n      description: {\n        story: 'Mobile responsive behavior showing how the header adapts to smaller screens with stacked layout and compact spacing. Data items switch to vertical layout for better mobile experience.'\n      }\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Owner\"\n            value=\"John Doe\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"JD\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
                },
                {
                    "name": "Overview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'The Header Details component provides a consistent layout for entity detail pages with configurable actions and flexible metadata display.'\n      }\n    }\n  },\n  args: {\n    title: 'Entity Detail Example',\n    showPrimaryAction: true,\n    primaryActionText: 'Edit',\n    primaryActionIcon: 'remixEditLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'Share',\n    secondaryActionIcon: 'remixShareLine',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n        (primaryActionClick)=\"onPrimaryAction($event)\"\n        (secondaryActionClick)=\"onSecondaryAction($event)\"\n        (moreActionsClick)=\"onMoreActions($event)\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Owner\"\n            value=\"Sarah Johnson\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"SJ\"\n          />\n          <ds-data-item\n            label=\"Created\"\n            value=\"March 15, 2024\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n          <ds-data-item\n            label=\"Category\"\n            value=\"Important\"\n            layout=\"vertical\"\n            valueType=\"icon-text\"\n            iconName=\"remixStarFill\"\n          />\n        </div>\n      </ds-header-details>\n    `,\n    methods: {\n      onPrimaryAction: (event: MouseEvent) => {\n        console.log('Primary action clicked:', event);\n      },\n      onSecondaryAction: (event: MouseEvent) => {\n        console.log('Secondary action clicked:', event);\n      },\n      onMoreActions: (event: MouseEvent) => {\n        console.log('More actions clicked:', event);\n      }\n    }\n  })\n}"
                },
                {
                    "name": "PropertyDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'Real estate property management example showing how to display property information with relevant actions like editing and viewing related leases.'\n      }\n    }\n  },\n  args: {\n    title: 'Sunset Boulevard Apartments',\n    showPrimaryAction: true,\n    primaryActionText: 'Edit Property',\n    primaryActionIcon: 'remixEditLine',\n    primaryActionVariant: 'primary',\n    showSecondaryAction: true,\n    secondaryActionText: 'View Leases',\n    secondaryActionIcon: 'remixFileList3Line',\n    secondaryActionVariant: 'secondary',\n    showMoreActions: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-header-details\n        [title]=\"title\"\n        [showPrimaryAction]=\"showPrimaryAction\"\n        [primaryActionText]=\"primaryActionText\"\n        [primaryActionIcon]=\"primaryActionIcon\"\n        [primaryActionVariant]=\"primaryActionVariant\"\n        [showSecondaryAction]=\"showSecondaryAction\"\n        [secondaryActionText]=\"secondaryActionText\"\n        [secondaryActionIcon]=\"secondaryActionIcon\"\n        [secondaryActionVariant]=\"secondaryActionVariant\"\n        [showMoreActions]=\"showMoreActions\"\n      >\n        <div slot=\"details\" style=\"display: flex; flex-wrap: wrap; gap: 48px;\">\n          <ds-data-item\n            label=\"Property Type\"\n            value=\"Residential\"\n            layout=\"vertical\"\n            valueType=\"icon-text\"\n            iconName=\"remixHome4Line\"\n          />\n          <ds-data-item\n            label=\"Status\"\n            value=\"Active\"\n            layout=\"vertical\"\n            valueType=\"badge\"\n            badgeVariant=\"success\"\n            badgeContent=\"Active\"\n            badgeContentType=\"text\"\n          />\n          <ds-data-item\n            label=\"Owner\"\n            value=\"Sarah Johnson\"\n            layout=\"vertical\"\n            valueType=\"avatar-text\"\n            avatarType=\"initials\"\n            avatarInitials=\"SJ\"\n          />\n          <ds-data-item\n            label=\"Units\"\n            value=\"24 units\"\n            layout=\"vertical\"\n            valueType=\"text\"\n          />\n        </div>\n      </ds-header-details>\n    `\n  })\n}"
                }
            ],
            "src/app/components/ui/label/ds-label.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    className: '',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: {\n      ...args\n    },\n    styles: [`\n      :host {\n        display: block;\n        padding: 1rem;\n        background: white;\n      }\n    `],\n    template: `\n      <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\n        Label Text\n      </ds-label>\n    `\n  })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsLabelComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Label',\n  component: DsLabelComponent,\n  tags: ['autodocs'],\n  parameters: { layout: 'centered' },\n  decorators: [\n    moduleMetadata({\n      imports: [DsInputComponent],\n    })\n  ],\n  argTypes: {\n    className: {\n      control: 'text',\n      description: 'Additional CSS classes to apply to the label',\n    },\n    for: {\n      control: 'text',\n      description: 'The ID of the form control this label is associated with',\n    },\n    id: {\n      control: 'text',\n      description: 'The ID of the label element',\n    },\n    size: {\n      control: 'radio',\n      options: ['sm', 'md'],\n      description: 'The size of the label text (sm = ui-xs-regular, md = ui-sm-regular)',\n      defaultValue: 'md',\n    },\n  },\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    className: '',\n  },\n  render: () => ({\n    styles: [`\n      :host {\n        display: block;\n        padding: 1rem;\n        background: white;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n      }\n    `],\n    template: `\n      <div class=\"container\">\n        <ds-label size=\"sm\">\n          Small Label (ui-xs-regular)\n        </ds-label>\n        <ds-label size=\"md\">\n          Medium Label (ui-sm-regular)\n        </ds-label>\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "WithInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    className: '',\n    for: 'example-input',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: {\n      ...args\n    },\n    styles: [`\n      :host {\n        display: block;\n        padding: 1rem;\n        background: white;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n    `],\n    template: `\n      <div class=\"container\">\n        <ds-label [className]=\"className\" [for]=\"for\" [id]=\"id\" [size]=\"size\">\n          Input Label\n        </ds-label>\n        <ds-input id=\"example-input\" placeholder=\"Enter text...\"></ds-input>\n      </div>\n    `\n  })\n}"
                }
            ],
            "src/app/components/ui/link/ds-link.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'This is a link',\n    href: '#',\n    showIcon: false,\n  },\n}"
                },
                {
                    "name": "InteractiveExamples",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; align-items: flex-start;\">\n        <ds-link href=\"#\" content=\"Simple link\"></ds-link>\n        <ds-link href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\" [showIcon]=\"true\" iconName=\"remixExternalLinkLine\" content=\"External link\"></ds-link>\n        <ds-link href=\"mailto:test@example.com\" [showIcon]=\"true\" iconName=\"remixMailLine\" content=\"Email link\"></ds-link>\n        <ds-link href=\"#\" [showIcon]=\"true\" iconName=\"remixDownloadLine\" content=\"Download link\"></ds-link>\n        <ds-link href=\"#\">Link with <strong>formatted</strong> content</ds-link>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsLinkComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Link',\n  component: DsLinkComponent,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    href: {\n      control: 'text',\n    },\n    target: {\n      control: 'select',\n      options: ['_self', '_blank', '_parent', '_top'],\n    },\n    rel: {\n      control: 'text',\n    },\n    content: {\n      control: 'text',\n    },\n    showIcon: {\n      control: 'boolean',\n    },\n    iconName: {\n      control: 'text',\n    },\n  },\n}"
                },
                {
                    "name": "SlotContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    href: '#',\n    showIcon: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\">\n        Link with <strong>formatted</strong> content\n      </ds-link>\n    `,\n  }),\n}"
                },
                {
                    "name": "SlotContentWithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    href: 'mailto:contact@example.com',\n    showIcon: true,\n    iconName: 'remixMailLine',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-link [href]=\"href\" [showIcon]=\"showIcon\" [iconName]=\"iconName\">\n        Send us an <em>email</em>\n      </ds-link>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithCustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'Download file',\n    href: '#',\n    showIcon: true,\n    iconName: 'remixDownloadLine',\n  },\n}"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    content: 'External link',\n    href: 'https://example.com',\n    target: '_blank',\n    rel: 'noopener noreferrer',\n    showIcon: true,\n    iconName: 'remixExternalLinkLine',\n  },\n}"
                }
            ],
            "src/app/components/ui/select/ds-select.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'default',\n    disabled: false,\n    required: false,\n    ghost: false,\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    disabled: true,\n  },\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'error',\n  },\n}"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Ghost select',\n    ghost: true,\n  },\n}"
                },
                {
                    "name": "GhostWithGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: groupedOptions,\n    placeholder: 'Ghost select with groups',\n    ghost: true,\n  },\n}"
                },
                {
                    "name": "groupedOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsSelectOption[]",
                    "defaultValue": "[\n  { id: '1', label: 'Apple', value: 'apple', group: 'Fruits' },\n  { id: '2', label: 'Banana', value: 'banana', group: 'Fruits' },\n  { id: '3', label: 'Orange', value: 'orange', group: 'Fruits' },\n  { id: '4', label: 'Carrot', value: 'carrot', group: 'Vegetables' },\n  { id: '5', label: 'Broccoli', value: 'broccoli', group: 'Vegetables' },\n  { id: '6', label: 'Potato', value: 'potato', group: 'Vegetables' },\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsSelectComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Select',\n  component: DsSelectComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [FormsModule],\n    }),\n    componentWrapperDecorator(\n      (story) => `<div style=\"display: flex; justify-content: center;\"><div style=\"width: 200px;\">${story}</div></div>`\n    )\n  ],\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      story: {\n        inline: true,\n        iframeHeight: 100,\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'error', 'warning', 'success'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    required: {\n      control: 'boolean',\n    },\n    ghost: {\n      control: 'boolean',\n    },\n  },\n}"
                },
                {
                    "name": "simpleOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DsSelectOption[]",
                    "defaultValue": "[\n  { id: '1', label: 'Option 1', value: 1 },\n  { id: '2', label: 'Option 2', value: 2 },\n  { id: '3', label: 'Option 3', value: 3 },\n  { id: '4', label: 'Option 4', value: 4 },\n]"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'success',\n  },\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: simpleOptions,\n    placeholder: 'Select an option',\n    variant: 'warning',\n  },\n}"
                },
                {
                    "name": "WithDisabledOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      { id: '1', label: 'Option 1', value: 1 },\n      { id: '2', label: 'Option 2', value: 2, disabled: true },\n      { id: '3', label: 'Option 3', value: 3 },\n      { id: '4', label: 'Option 4', value: 4, disabled: true },\n    ],\n    placeholder: 'Select an option',\n  },\n}"
                },
                {
                    "name": "WithGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: groupedOptions,\n    placeholder: 'Select food',\n    variant: 'default',\n  },\n}"
                }
            ],
            "src/app/components/ui/textarea/ds-textarea.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "LargeTextarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    placeholder: 'This is a large textarea for longer content...',\n    rows: 8,\n    size: 'lg',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTextareaComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Textarea',\n  component: DsTextareaComponent,\n  parameters: { layout: 'centered' },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: { control: { type: 'select' }, options: ['default', 'error', 'warning', 'success'] },\n    size: { control: { type: 'select' }, options: ['sm', 'md', 'lg'] },\n    placeholder: { control: 'text' },\n    disabled: { control: 'boolean' },\n    readonly: { control: 'boolean' },\n    required: { control: 'boolean' },\n    rows: { control: { type: 'number', min: 1, max: 20 } },\n    cols: { control: { type: 'number', min: 10, max: 100 } },\n    maxlength: { control: { type: 'number', min: 1, max: 1000 } },\n    minlength: { control: { type: 'number', min: 0, max: 100 } },\n    ariaLabel: { control: 'text' },\n    ariaDescribedBy: { control: 'text' },\n    ariaLabelledBy: { control: 'text' },\n  },\n  args: {\n    variant: 'default',\n    size: 'md',\n    placeholder: 'Enter your message...',\n    disabled: false,\n    readonly: false,\n    required: false,\n    rows: 4,\n  },\n}"
                },
                {
                    "name": "Sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\n        <ds-textarea size=\"sm\" placeholder=\"Small textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea size=\"md\" placeholder=\"Medium textarea\" rows=\"4\"></ds-textarea>\n        <ds-textarea size=\"lg\" placeholder=\"Large textarea\" rows=\"5\"></ds-textarea>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "States",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\n        <ds-textarea placeholder=\"Normal textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea placeholder=\"Disabled textarea\" [disabled]=\"true\" rows=\"3\"></ds-textarea>\n        <ds-textarea placeholder=\"Readonly textarea\" [readonly]=\"true\" rows=\"3\"></ds-textarea>\n        <ds-textarea placeholder=\"Required textarea\" [required]=\"true\" rows=\"3\"></ds-textarea>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: grid; gap: 16px; width: 400px;\">\n        <ds-textarea variant=\"default\" placeholder=\"Default textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea variant=\"success\" placeholder=\"Success textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea variant=\"warning\" placeholder=\"Warning textarea\" rows=\"3\"></ds-textarea>\n        <ds-textarea variant=\"error\" placeholder=\"Error textarea\" rows=\"3\"></ds-textarea>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithFormField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <ds-form-field \n        label=\"Message\" \n        description=\"Please provide detailed feedback\"\n        style=\"width: 400px;\">\n        <ds-textarea \n          placeholder=\"Enter your feedback here...\" \n          rows=\"5\"\n          [required]=\"true\">\n        </ds-textarea>\n      </ds-form-field>\n    `,\n  }),\n  parameters: {\n    docs: {\n      source: {\n        code: `<ds-form-field \n  label=\"Message\" \n  description=\"Please provide detailed feedback\">\n  <ds-textarea \n    placeholder=\"Enter your feedback here...\" \n    rows=\"5\"\n    [required]=\"true\">\n  </ds-textarea>\n</ds-form-field>`,\n      },\n    },\n  },\n}"
                },
                {
                    "name": "WithLimits",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    placeholder: 'This textarea has a 100 character limit...',\n    maxlength: 100,\n    minlength: 10,\n    rows: 4,\n  },\n}"
                },
                {
                    "name": "WithPlaceholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { \n    placeholder: 'Write your thoughts here...',\n    rows: 6 \n  },\n}"
                }
            ],
            "src/app/components/ui/topbar/ds-topbar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "LongTitleWithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'This is a Very Long Page Title That Should Be Truncated',\n    iconName: 'remixFileTextLine',\n    userInitials: 'LT',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Documents', path: '/documents', isLast: false },\n      { label: 'Reports', path: '/documents/reports', isLast: false },\n      { label: 'This is a Very Long Page Title That Should Be Truncated', path: '/documents/reports/long-title', isLast: true }\n    ],\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsTopbarComponent>",
                    "defaultValue": "{\n  title: 'Application shell/Topbar',\n  component: DsTopbarComponent,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: 'A page header component that displays a page title with icon on the left and action buttons with user avatar on the right. Can optionally show breadcrumb navigation for nested pages.',\n      },\n    },\n  },\n  argTypes: {\n    pageTitle: {\n      control: 'text',\n      description: 'The title of the page',\n    },\n    iconName: {\n      control: 'text',\n      description: 'Icon name to display next to the page title',\n    },\n    userInitials: {\n      control: 'text',\n      description: 'User initials to display in the avatar',\n    },\n    showBreadcrumbs: {\n      control: 'boolean',\n      description: 'Whether to show breadcrumb navigation',\n    },\n    breadcrumbItems: {\n      control: 'object',\n      description: 'Array of breadcrumb items to display',\n    },\n    showFirstAction: {\n      control: 'boolean',\n      description: 'Whether to show the first action button',\n    },\n    firstActionIcon: {\n      control: 'text',\n      description: 'Icon name for the first action button',\n    },\n    firstActionLabel: {\n      control: 'text',\n      description: 'Aria label for the first action button',\n    },\n    showSecondAction: {\n      control: 'boolean',\n      description: 'Whether to show the second action button',\n    },\n    secondActionIcon: {\n      control: 'text',\n      description: 'Icon name for the second action button',\n    },\n    secondActionLabel: {\n      control: 'text',\n      description: 'Aria label for the second action button',\n    },\n  },\n  args: {\n    pageTitle: 'Dashboard',\n    iconName: 'remixHome4Line',\n    userInitials: 'JD',\n    showBreadcrumbs: false,\n    breadcrumbItems: [],\n    showFirstAction: true,\n    firstActionIcon: 'remixNotification3Line',\n    firstActionLabel: 'Notifications',\n    showSecondAction: true,\n    secondActionIcon: 'remixSettings3Line',\n    secondActionLabel: 'Settings',\n  },\n}"
                },
                {
                    "name": "MobileViewWithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n  args: {\n    pageTitle: 'Account Details',\n    iconName: 'remixSmartphoneLine',\n    userInitials: 'MB',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Settings', path: '/settings', isLast: false },\n      { label: 'Account', path: '/settings/account', isLast: false },\n      { label: 'Details', path: '/settings/account/details', isLast: true }\n    ],\n  },\n}"
                },
                {
                    "name": "NestedPageWithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'Edit Profile',\n    iconName: 'remixUser3Line',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Settings', path: '/settings', isLast: false },\n      { label: 'Users', path: '/settings/users', isLast: false },\n      { label: 'Edit Profile', path: '/settings/users/profile', isLast: true }\n    ],\n  },\n}"
                },
                {
                    "name": "NoActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'Read Only Page',\n    iconName: 'remixEyeLine',\n    userInitials: 'RO',\n    showFirstAction: false,\n    showSecondAction: false,\n  },\n}"
                },
                {
                    "name": "ProjectOverview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'Project Overview',\n    iconName: 'remixFolderLine',\n    userInitials: 'AM',\n  },\n}"
                },
                {
                    "name": "SingleAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'Profile',\n    iconName: 'remixUser3Line',\n    userInitials: 'SA',\n    showFirstAction: true,\n    showSecondAction: false,\n    firstActionIcon: 'remixEditLine',\n    firstActionLabel: 'Edit Profile',\n  },\n}"
                },
                {
                    "name": "UserSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'User Settings',\n    iconName: 'remixSettings3Line',\n    userInitials: 'SM',\n    firstActionIcon: 'remixSaveLine',\n    firstActionLabel: 'Save Settings',\n    secondActionIcon: 'remixRefreshLine',\n    secondActionLabel: 'Reset Settings',\n  },\n}"
                },
                {
                    "name": "WithBreadcrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pageTitle: 'PFA Pension',\n    iconName: 'remixBuilding4Line',\n    showBreadcrumbs: true,\n    breadcrumbItems: [\n      { label: 'Customers', path: '/customers', isLast: false },\n      { label: 'PFA Pension', path: '/customers/pfa-pension', isLast: true }\n    ],\n  },\n}"
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    sparkImagePath: './Assets/ai-spark.png',\n    isLoading: true\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AiSparksLoadingComponent>",
                    "defaultValue": "{\n  title: 'Primitives/AISparksLoading',\n  component: AiSparksLoadingComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    sparkImagePath: {\n      control: { type: 'text' },\n      description: 'Path to the spark image asset'\n    },\n    isLoading: {\n      control: { type: 'boolean' },\n      description: 'Whether the loading animation is active'\n    },\n    customSparks: {\n      control: { type: 'object' },\n      description: 'Optional custom spark configurations'\n    }\n  }\n}"
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    sparkImagePath: './Assets/ai-spark.png',\n    animationState: 'static'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AiSparksStaticComponent>",
                    "defaultValue": "{\n  title: 'Primitives/AISparksStatic',\n  component: AiSparksStaticComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    sparkImagePath: {\n      control: { type: 'text' },\n      description: 'Path to the spark image asset'\n    },\n    animationState: {\n      control: { type: 'select' },\n      options: ['appear', 'static', 'disappear'],\n      description: 'Current animation state'\n    },\n    customSparks: {\n      control: { type: 'object' },\n      description: 'Optional custom spark configurations'\n    }\n  }\n}"
                }
            ],
            "src/app/components/ui/data-item/ds-data-item.stories.ts": [
                {
                    "name": "HorizontalAvatarIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Owner',\n    value: 'System User',\n    layout: 'horizontal',\n    valueType: 'avatar-text',\n    avatarType: 'icon',\n    avatarIconName: 'remixRobotFill',\n  },\n}"
                },
                {
                    "name": "HorizontalAvatarPhoto",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Created by',\n    value: 'Sarah Wilson',\n    layout: 'horizontal',\n    valueType: 'avatar-text',\n    avatarType: 'photo',\n    avatarSrc: '/Dummy-avatars/dummy-portrait-woman.jpg',\n  },\n}"
                },
                {
                    "name": "HorizontalBadgeIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Status',\n    layout: 'horizontal',\n    valueType: 'badge',\n    badgeVariant: 'success',\n    badgeContentType: 'icon-text',\n    badgeContent: 'Completed',\n    badgeIcon: 'remixCheckboxCircleFill',\n  },\n}"
                },
                {
                    "name": "HorizontalBadgeIndicator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Type',\n    layout: 'horizontal',\n    valueType: 'badge',\n    badgeVariant: 'brand',\n    badgeContentType: 'indicator-text',\n    badgeContent: 'Premium',\n    badgeIndicatorShape: 'circle',\n  },\n}"
                },
                {
                    "name": "HorizontalIconLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Download',\n    value: 'Download PDF report',\n    layout: 'horizontal',\n    valueType: 'icon-link',\n    linkHref: 'https://example.com/report.pdf',\n    linkTarget: '_blank',\n    iconName: 'remixFileDownloadLine',\n  },\n}"
                },
                {
                    "name": "HorizontalIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Location',\n    value: 'New York, NY',\n    layout: 'horizontal',\n    iconName: 'remixMapPin2Fill',\n  },\n}"
                },
                {
                    "name": "HorizontalText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Full Name',\n    value: 'John Doe',\n    layout: 'horizontal',\n    valueType: 'text',\n  },\n}"
                },
                {
                    "name": "LayoutComparison",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 24px; max-width: 400px;\">\n        <div>\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Vertical Layout</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n            <ds-data-item\n              label=\"Email address\"\n              value=\"user@example.com\"\n              layout=\"vertical\"\n              valueType=\"text\"\n            />\n            <ds-data-item\n              label=\"Status\"\n              value=\"Active\"\n              layout=\"vertical\"\n              valueType=\"icon-text\"\n              iconName=\"remixCheckboxCircleFill\"\n            />\n            <ds-data-item\n              label=\"Assigned to\"\n              value=\"John Doe\"\n              layout=\"vertical\"\n              valueType=\"avatar-text\"\n              avatarType=\"initials\"\n              avatarInitials=\"JD\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <h3 style=\"margin: 0 0 16px 0; font-size: 16px; font-weight: 500;\">Horizontal Layout</h3>\n          <div style=\"display: flex; flex-direction: column; gap: 16px;\">\n            <ds-data-item\n              label=\"Email address\"\n              value=\"user@example.com\"\n              layout=\"horizontal\"\n              valueType=\"text\"\n            />\n            <ds-data-item\n              label=\"Status\"\n              value=\"Active\"\n              layout=\"horizontal\"\n              valueType=\"icon-text\"\n              iconName=\"remixCheckboxCircleFill\"\n            />\n            <ds-data-item\n              label=\"Assigned to\"\n              value=\"John Doe\"\n              layout=\"horizontal\"\n              valueType=\"avatar-text\"\n              avatarType=\"initials\"\n              avatarInitials=\"JD\"\n            />\n          </div>\n        </div>\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsDataItemComponent>",
                    "defaultValue": "{\n  title: 'Primitives/Data Item',\n  component: DsDataItemComponent,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: `\nA flexible data item component for displaying label-value pairs with multiple layout options and value types. Perfect for user profiles, task details, settings panels, and structured data displays.\n\n## Features\n\n- **Two Layout Types**: Vertical and horizontal arrangements for different use cases\n- **Fixed Value Height**: 32px height for consistent alignment across all value types\n- **Six Value Types**: Text, Icon+Text, Avatar+Text, Badge, Link, and Icon+Link variants\n- **Responsive Design**: Horizontal layout automatically collapses to vertical on mobile\n- **Consistent Spacing**: 8px gap between elements in value container\n- **Semantic Typography**: Uses ui-sm-regular (14px, 400 weight) for value text\n\n## Layout Types\n\n### Vertical Layout\nStacks label above value with 4px gap. Ideal for compact displays, mobile layouts, and when you need to conserve horizontal space.\n\n### Horizontal Layout\nPlaces label and value side-by-side with 12px gap. Label container has fixed 128px width for consistent alignment across multiple data items.\n\n## Value Types\n\n### Text Only\nSimple text display using ui-sm-regular typography with primary text color.\n\n### Icon + Text\n16px icon with secondary color paired with text. Perfect for status indicators, locations, or categorized information.\n\n### Avatar + Text\n20x20px avatar (xs size) with text. Supports all avatar types: initials, photo, and icon. Ideal for user assignments, ownership, or person-related data.\n\n### Badge\nFull badge component with all variants and content types. Perfect for status, priority, categories, or any labeled information.\n\n### Link\nClickable link using the ds-link component. Ideal for navigation, references, or any interactive text that should lead to another page or action.\n\n### Icon + Link\nLink with a leading icon for enhanced visual context. Perfect for document links, external references, or any clickable content that benefits from visual indicators.\n\nFor complete documentation, properties reference, and implementation guidelines, see the [Data Item README](/?path=/docs/components-data-item--docs).\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: {\n      control: 'text',\n      description: 'The label text to display',\n    },\n    value: {\n      control: 'text',\n      description: 'The value text to display (not used for badge type)',\n    },\n    layout: {\n      control: 'select',\n      options: ['vertical', 'horizontal'],\n      description: 'Layout arrangement of label and value',\n    },\n    valueType: {\n      control: 'select',\n      options: ['text', 'icon-text', 'avatar-text', 'badge', 'link', 'icon-link'],\n      description: 'Type of value display',\n    },\n    iconName: {\n      control: 'text',\n      description: 'Icon name for icon-text and icon-link types',\n    },\n    avatarType: {\n      control: 'select',\n      options: ['initials', 'photo', 'icon'],\n      description: 'Avatar type for avatar-text type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    avatarInitials: {\n      control: 'text',\n      description: 'Avatar initials for initials type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    avatarSrc: {\n      control: 'text',\n      description: 'Avatar image source for photo type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    avatarIconName: {\n      control: 'text',\n      description: 'Avatar icon name for icon type',\n      if: { arg: 'valueType', eq: 'avatar-text' },\n    },\n    badgeVariant: {\n      control: 'select',\n      options: ['default', 'brand', 'success', 'warning', 'destructive', 'blue', 'light-purple', 'pink', 'salmon-orange', 'orange', 'lime-green', 'grey'],\n      description: 'Badge color variant',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeContentType: {\n      control: 'select',\n      options: ['text', 'icon-text', 'indicator-text'],\n      description: 'Badge content type',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeContent: {\n      control: 'text',\n      description: 'Badge content text',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeIcon: {\n      control: 'text',\n      description: 'Badge icon name for icon-text type',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    badgeIndicatorShape: {\n      control: 'select',\n      options: ['circle', 'square'],\n      description: 'Badge indicator shape for indicator-text type',\n      if: { arg: 'valueType', eq: 'badge' },\n    },\n    linkHref: {\n      control: 'text',\n      description: 'Link URL',\n      if: { arg: 'valueType', eq: 'link' },\n    },\n    linkTarget: {\n      control: 'select',\n      options: ['_blank', '_self'],\n      description: 'Link target (_blank for new tab)',\n      if: { arg: 'valueType', eq: 'link' },\n    },\n    // iconName is used for both icon-text and icon-link types\n  },\n  args: {\n    label: 'Email',\n    value: 'user@example.com',\n    layout: 'vertical',\n    valueType: 'text',\n  },\n}"
                },
                {
                    "name": "TaskDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">Task Details</h3>\n        \n        <ds-data-item\n          label=\"Title\"\n          value=\"Implement user authentication\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Priority\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"warning\"\n          badgeContentType=\"text\"\n          badgeContent=\"High\"\n        />\n        <ds-data-item\n          label=\"Status\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"blue\"\n          badgeContentType=\"indicator-text\"\n          badgeContent=\"In Progress\"\n          badgeIndicatorShape=\"circle\"\n        />\n        <ds-data-item\n          label=\"Assignee\"\n          value=\"Sarah Wilson\"\n          layout=\"horizontal\"\n          valueType=\"avatar-text\"\n          avatarType=\"photo\"\n          avatarSrc=\"/Dummy-avatars/dummy-portrait-woman.jpg\"\n        />\n        <ds-data-item\n          label=\"Due date\"\n          value=\"March 15, 2024\"\n          layout=\"horizontal\"\n          valueType=\"icon-text\"\n          iconName=\"remixCalendarLine\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
                },
                {
                    "name": "UserProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 500px; padding: 24px; border: 1px solid var(--border-color-default); border-radius: 8px;\">\n        <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">User Profile</h3>\n        \n        <ds-data-item\n          label=\"Full name\"\n          value=\"Sarah Wilson\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Email\"\n          value=\"sarah.wilson@company.com\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Role\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"brand\"\n          badgeContentType=\"text\"\n          badgeContent=\"Admin\"\n        />\n        <ds-data-item\n          label=\"Status\"\n          value=\"Online\"\n          layout=\"horizontal\"\n          valueType=\"icon-text\"\n          iconName=\"remixCheckboxCircleFill\"\n        />\n        <ds-data-item\n          label=\"Manager\"\n          value=\"John Doe\"\n          layout=\"horizontal\"\n          valueType=\"avatar-text\"\n          avatarType=\"initials\"\n          avatarInitials=\"JD\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
                },
                {
                    "name": "ValueTypesShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"display: flex; flex-direction: column; gap: 16px; max-width: 400px;\">\n        <ds-data-item\n          label=\"Text value\"\n          value=\"Simple text content\"\n          layout=\"horizontal\"\n          valueType=\"text\"\n        />\n        <ds-data-item\n          label=\"Icon + Text\"\n          value=\"With icon prefix\"\n          layout=\"horizontal\"\n          valueType=\"icon-text\"\n          iconName=\"remixStarFill\"\n        />\n        <ds-data-item\n          label=\"Avatar + Text\"\n          value=\"John Doe\"\n          layout=\"horizontal\"\n          valueType=\"avatar-text\"\n          avatarType=\"initials\"\n          avatarInitials=\"JD\"\n        />\n        <ds-data-item\n          label=\"Badge value\"\n          layout=\"horizontal\"\n          valueType=\"badge\"\n          badgeVariant=\"success\"\n          badgeContentType=\"icon-text\"\n          badgeContent=\"Verified\"\n          badgeIcon=\"remixShieldCheckFill\"\n        />\n        <ds-data-item\n          label=\"Link value\"\n          value=\"Visit documentation\"\n          layout=\"horizontal\"\n          valueType=\"link\"\n          linkHref=\"https://example.com/docs\"\n          linkTarget=\"_blank\"\n        />\n        <ds-data-item\n          label=\"Icon + Link\"\n          value=\"Download report\"\n          layout=\"horizontal\"\n          valueType=\"icon-link\"\n          linkHref=\"https://example.com/report.pdf\"\n          linkTarget=\"_blank\"\n          iconName=\"remixFileDownloadLine\"\n        />\n      </div>\n    `,\n  }),\n  parameters: {\n    controls: { disable: true },\n  },\n}"
                },
                {
                    "name": "VerticalAvatarInitials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Assigned to',\n    value: 'John Doe',\n    layout: 'vertical',\n    valueType: 'avatar-text',\n    avatarType: 'initials',\n    avatarInitials: 'JD',\n  },\n}"
                },
                {
                    "name": "VerticalBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Priority',\n    layout: 'vertical',\n    valueType: 'badge',\n    badgeVariant: 'destructive',\n    badgeContentType: 'text',\n    badgeContent: 'High',\n  },\n}"
                },
                {
                    "name": "VerticalIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Status',\n    value: 'Active',\n    layout: 'vertical',\n    iconName: 'remixCheckboxCircleFill',\n  },\n}"
                },
                {
                    "name": "VerticalLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Documentation',\n    value: 'View API docs',\n    layout: 'vertical',\n    valueType: 'link',\n    linkHref: 'https://api.example.com/docs',\n    linkTarget: '_blank',\n  },\n}"
                },
                {
                    "name": "VerticalText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Email Address',\n    value: 'user@example.com',\n    layout: 'vertical',\n    valueType: 'text',\n  },\n}"
                }
            ],
            "src/app/components/ui/drawer/ds-drawer.stories.ts": [
                {
                    "name": "LeftDrawer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    position: 'left'\n  },\n  render: Template\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DrawerStoryProps>",
                    "defaultValue": "{\n  title: 'Primitives/Drawer',\n  component: DsDrawerComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsDrawerComponent, DsButtonComponent, NgpDialogTrigger, NgpDialogOverlay, NgpDialog],\n    }),\n  ],\n  argTypes: {\n    position: {\n      control: 'select',\n      options: ['left', 'right'],\n      description: 'Position of the drawer',\n      defaultValue: 'right'\n    }\n  }\n}"
                },
                {
                    "name": "RightDrawer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    position: 'right'\n  },\n  render: Template\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <div style=\"padding: 20px;\">\n      <ds-button [ngpDialogTrigger]=\"drawer\" variant=\"primary\">Open Drawer</ds-button>\n      <p>This is the main page content. When you open the drawer, it should overlay this content with a semi-transparent background.</p>\n    </div>\n\n    <ng-template #drawer let-close=\"close\">\n      <div ngpDialogOverlay class=\"ds-drawer-overlay\">\n        <ds-drawer ngpDialog [position]=\"position\">\n          <h2 slot=\"header\" class=\"tw-text-xl tw-font-semibold\">Drawer Title</h2>\n          <div slot=\"content\">\n            <p class=\"tw-text-neutral-700 tw-mb-4\">This is the main content of the drawer.</p>\n            <p class=\"tw-text-neutral-600 tw-mb-4\">You can put any content here including forms, lists, or other components.</p>\n            <div class=\"tw-p-4 tw-bg-gray-50 tw-rounded-lg\">\n              <h3 class=\"tw-font-medium tw-mb-2\">Example Content</h3>\n              <p class=\"tw-text-sm tw-text-gray-600\">This drawer should slide in from the {{ position }} side of the screen.</p>\n            </div>\n          </div>\n          <div slot=\"footer\">\n            <ds-button variant=\"ghost\" (click)=\"close()\">Cancel</ds-button>\n            <ds-button variant=\"primary\" (click)=\"close()\">Save Changes</ds-button>\n          </div>\n        </ds-drawer>\n      </div>\n    </ng-template>\n  `\n})"
                }
            ],
            "src/app/components/ui/accordion/ds-accordion.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DsAccordion>",
                    "defaultValue": "{\n  title: 'Primitives/Accordion',\n  component: DsAccordion,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [DsAccordion, DsAccordionItem, NgIcon],\n      providers: [\n        provideIcons({ remixArrowDownSLine })\n      ]\n    })\n  ],\n}"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'multiple'\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-accordion [type]=\"type\">\n        <ds-accordion-item value=\"features\" heading=\"Key Features\">\n          <ul class=\"tw-list-disc\">\n            <li>Property Management</li>\n            <li>Tenant Portal</li>\n            <li>Maintenance Tracking</li>\n            <li>Financial Reports</li>\n          </ul>\n        </ds-accordion-item>\n        <ds-accordion-item value=\"pricing\" heading=\"Pricing Plans\">\n          <ul class=\"tw-list-disc\">\n            <li>Basic: Free</li>\n            <li>Professional: $29/month</li>\n            <li>Enterprise: Custom pricing</li>\n          </ul>\n        </ds-accordion-item>\n        <ds-accordion-item value=\"support\" heading=\"Support Options\">\n          <ul class=\"tw-list-disc\">\n            <li>24/7 Email Support</li>\n            <li>Live Chat</li>\n            <li>Phone Support (Enterprise)</li>\n          </ul>\n        </ds-accordion-item>\n      </ds-accordion>\n    `\n  })\n}"
                },
                {
                    "name": "Single",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    type: 'single',\n    collapsible: true\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <ds-accordion [type]=\"type\" [collapsible]=\"collapsible\">\n        <ds-accordion-item value=\"item-1\" heading=\"What is Propbinder?\">\n          Propbinder is a modern property management platform that helps you manage your properties efficiently.\n        </ds-accordion-item>\n        <ds-accordion-item value=\"item-2\" heading=\"How does it work?\">\n          Our platform provides tools for property listing, tenant management, maintenance tracking, and financial reporting.\n        </ds-accordion-item>\n        <ds-accordion-item value=\"item-3\" heading=\"Is it secure?\">\n          Yes, we use industry-standard encryption and security practices to protect your data.\n        </ds-accordion-item>\n      </ds-accordion>\n    `\n  })\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  decorators: [\n    applicationConfig({\n      providers: [\n        provideAllRemixIcons()\n      ]\n    })\n  ],\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n    options: {\n      storySort: {\n        order: ['*'],\n        method: 'alphabetical'\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/ui/accordion/ds-accordion.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsAccordion>",
                    "file": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/app-layout/ds-app-layout.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsAppLayoutComponent>",
                    "file": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/avatar/ds-avatar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsAvatarComponent>",
                    "file": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/badge/ds-badge.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsBadgeComponent>",
                    "file": "src/app/components/ui/badge/ds-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/button/ds-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsButtonComponent>",
                    "file": "src/app/components/ui/button/ds-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/button/ds-icon-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsIconButtonComponent>",
                    "file": "src/app/components/ui/button/ds-icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/checkbox/ds-checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsCheckboxComponent>",
                    "file": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/data-item/ds-data-item.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsDataItemComponent>",
                    "file": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/data-table/ds-data-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsDataTableComponent>",
                    "file": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/drawer/ds-drawer.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DrawerStoryProps>",
                    "file": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/editable-table/ds-editable-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsEditableTableComponent>",
                    "file": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/form-field/ds-form-field.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsFormFieldComponent>",
                    "file": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/datepicker/ds-datepicker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsDatepickerComponent>",
                    "file": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/header-details/ds-header-details.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsHeaderDetailsComponent>",
                    "file": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/icon/ds-icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsIconComponent>",
                    "file": "src/app/components/ui/icon/ds-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/input/ds-input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsInputComponent>",
                    "file": "src/app/components/ui/input/ds-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/label/ds-label.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsLabelComponent>",
                    "file": "src/app/components/ui/label/ds-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/link/ds-link.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsLinkComponent>",
                    "file": "src/app/components/ui/link/ds-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/list/ds-list.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsListComponent>",
                    "file": "src/app/components/ui/list/ds-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/list-item/ds-list-item.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsListItemComponent>",
                    "file": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/listbox/ds-listbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsListboxComponent>",
                    "file": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/loading-label/ds-loading-label.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsLoadingLabelComponent>",
                    "file": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/menu/ds-menu.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsMenuComponent>",
                    "file": "src/app/components/ui/menu/ds-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsMetadataItemComponent>",
                    "file": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/select/ds-select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsSelectComponent>",
                    "file": "src/app/components/ui/select/ds-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsShapeIndicatorComponent>",
                    "file": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/sidebar/ds-sidebar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsSidebarComponent>",
                    "file": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AiSparksLoadingComponent>",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AiSparksStaticComponent>",
                    "file": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/spinner/ds-spinner.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsSpinnerComponent>",
                    "file": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/tabs/ds-tabs.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTabs>",
                    "file": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/textarea/ds-textarea.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTextareaComponent>",
                    "file": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/tile/ds-tile.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTileComponent>",
                    "file": "src/app/components/ui/tile/ds-tile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/tooltip/ds-tooltip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTooltipComponent>",
                    "file": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/ui/topbar/ds-topbar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DsTopbarComponent>",
                    "file": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Single",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/accordion/ds-accordion.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DebugWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoResponsive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitiallyCollapsed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopbarDebug",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/app-layout/ds-app-layout.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitialsType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PhotoType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Static",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/avatar/ds-avatar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllColorVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentTypeComparison",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextBrand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextDestructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconTextWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextBrand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextDestructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextGrey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextLightPurple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextLimeGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextPink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextSalmonOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IndicatorTextWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBrand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextDestructive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextGrey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLightPurple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLimeGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextPink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSalmonOrange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/badge/ds-badge.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AIVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtonVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadingStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/button/ds-icon-button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllSizesAndVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LabelToggle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/checkbox/ds-checkbox.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalAvatarIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalAvatarPhoto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalBadgeIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalBadgeIndicator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalIconLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LayoutComparison",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TaskDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ValueTypesShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalAvatarInitials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-item/ds-data-item.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClickableRows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CompactView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeDataset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Products",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumnsWithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userColumnsWithSizing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithColumnManagement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithColumnSizing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/data-table/ds-data-table.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PastAndCurrentDatesOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInputTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithReactiveForms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/datepicker/ds-datepicker.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DrawerStoryProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightDrawer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/drawer/ds-drawer.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoiceLine",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categoryOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "invoiceColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InvoiceLinesReorderable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDeleteAllowed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDragHandle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "priorityOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductsSortable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ReadOnlyMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleInvoiceLines",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TasksWithSelects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/editable-table/ds-editable-table.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/form-field/ds-form-field.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeaseDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MinimalNoActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MobileView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Overview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropertyDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/header-details/ds-header-details.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorTest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/icon/ds-icon.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Clearable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GhostWithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Readonly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLeadingIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/input/ds-input.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/label/ds-label.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractiveExamples",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SlotContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SlotContentWithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/link/ds-link.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Complete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list-item/ds-list-item.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list/ds-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list/ds-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/list/ds-list.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simpleOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDisabledOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/listbox/ds-listbox.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AIProcessing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargerText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutShimmer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/loading-label/ds-loading-label.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicMenuItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuWithDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuWithIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDisabledItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/menu/ds-menu.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommonUseCases",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TaskMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTooltip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/metadata-item/ds-metadata-item.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GhostWithGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "groupedOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "simpleOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDisabledOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/select/ds-select.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllShapes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Circle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Diamond",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pentagon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Triangle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsageExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/shape-indicator/ds-shape-indicator.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActiveItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Collapsed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CollapsedWithGlobalAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithGlobalAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/sidebar/ds-sidebar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-loading.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spark-animation/ai-sparks-static.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/spinner/ds-spinner.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCustomContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tabs/ds-tabs.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeTextarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "States",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLimits",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPlaceholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/textarea/ds-textarea.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoiceLine",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComplexExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "invoiceColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleSectionsHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleSectionsVertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleInvoiceLines",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SectionWithoutHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SectionWithoutPadding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDataTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTitleAndAvatar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTitleAndIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tile/ds-tile.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DifferentPlacements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Interactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFormElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/tooltip/ds-tooltip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTitleWithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MobileViewWithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NestedPageWithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProjectOverview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBreadcrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ui/topbar/ds-topbar.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}