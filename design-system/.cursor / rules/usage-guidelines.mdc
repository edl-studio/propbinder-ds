# Design System with shadcn/ui + Figma MCP Integration

A comprehensive design system built with **shadcn/ui**, **Tailwind CSS**, and **Figma MCP integration** for seamless design-to-code workflows.

## 🚀 Quick Start

This project is configured with:
- **Vite + React** with TypeScript
- **Tailwind CSS v4** with custom design tokens
- **shadcn/ui** components built on **Radix UI primitives**
- **Storybook** for component documentation
- **Figma MCP integration** utilities

## 📁 Project Structure

```
design-system/
├── src/
│   ├── components/
│   │   ├── ui/                    # shadcn/ui components
│   │   │   ├── button.tsx
│   │   │   ├── card.tsx
│   │   │   ├── input.tsx
│   │   │   └── ...
│   │   ├── tools/                 # Tool-specific components
│   │   │   ├── ToolCard.tsx
│   │   │   └── ToolsTable.tsx
│   │   └── layout/               # Layout components
│   │       ├── Container.tsx
│   │       ├── Navigation.tsx
│   │       ├── PageHeader.tsx
│   │       └── Stack.tsx
│   ├── pages/                    # Page components
│   │   ├── Home.tsx
│   │   └── Tools.tsx
│   ├── lib/
│   │   ├── utils.ts              # cn() utility and helpers
│   │   ├── design-tokens.ts      # Design token utilities
│   │   └── mcp-integration.ts    # Figma MCP utilities
│   ├── types/                    # TypeScript definitions
│   │   └── index.ts
│   ├── lib/
│   │   └── globals.css           # Design tokens and base styles
│   ├── App.tsx                   # Main app component
│   └── main.tsx                  # App entry point
├── public/                       # Static assets
├── .storybook/                   # Storybook configuration
├── package.json                  # Dependencies and scripts
├── vite.config.ts               # Vite configuration
└── tailwind.config.js           # Tailwind CSS configuration
```

## 🎨 Design Token System

### Tailwind CSS v4 Configuration

This design system uses **Tailwind CSS v4** with the `@theme` directive for automatic utility class generation. The configuration is defined in `src/lib/globals.css`:

```css
@import "tailwindcss";
@import "tw-animate-css";

@theme {
  /* Background Colors - Scoped to background only */
  --background-color-brand: #ff8652;
  --background-color-brand-hover: #e6784a;
  --background-color-page: #ffffff;
  /* ... more background colors */

  /* Text Colors - Scoped to text only */
  --text-color-primary: #1e293b;
  --text-color-secondary: #64748b;
  /* ... more text colors */

  /* Border Colors - Scoped to borders only */
  --border-color-weak: #e2e8f0;
  --border-color-strong: #1e293b;
  /* ... more border colors */

  /* Multi-purpose Colors - Usable everywhere */
  --color-success-strong: #0b5b38;
  --color-success-base: #158452;
  /* ... more utility colors */
}
```

**Key Benefits:**
- **Automatic Utility Generation**: Tailwind v4 automatically creates utility classes from theme variables
- **Scoped Variables**: Prevents misuse (e.g., can't use background colors as text)
- **No Configuration File**: All theme variables defined in CSS with `@theme` directive
- **Type Safety**: Utility classes are generated at build time

### Scoped Theme Variables (Tailwind CSS v4)

The design system uses Tailwind CSS v4's `@theme` directive with scoped variable namespaces for semantic clarity and prevention of misuse:

#### Color Categories

**Background Colors** - Only usable as backgrounds (using `--background-color-*` prefix):
- `bg-brand` → `var(--background-color-brand)`
- `bg-brand-hover` → `var(--background-color-brand-hover)`
- `bg-page` → `var(--background-color-page)`
- `bg-container` → `var(--background-color-container)`
- `bg-container-hover` → `var(--background-color-container-hover)`
- `bg-controls` → `var(--background-color-controls)`
- `bg-controls-hover` → `var(--background-color-controls-hover)`
- `bg-flat` → `var(--background-color-flat)`
- `bg-flat-hover` → `var(--background-color-flat-hover)`
- `bg-disabled` → `var(--background-color-disabled)`
- `bg-disabled-inverse` → `var(--background-color-disabled-inverse)`

**Text Colors** - Only usable as text and icons (using `--text-color-*` prefix):
- `text-primary` → `var(--text-color-primary)`
- `text-secondary` → `var(--text-color-secondary)`
- `text-tertiary` → `var(--text-color-tertiary)`
- `text-primary-inverse` → `var(--text-color-primary-inverse)`
- `text-disabled` → `var(--text-color-disabled)`
- `text-disabled-inverse` → `var(--text-color-disabled-inverse)`

**Border Colors** - Only usable as borders (using `--border-color-*` prefix):
- `border-weak` → `var(--border-color-weak)`
- `border-strong` → `var(--border-color-strong)`
- `border-focus` → `var(--border-color-focus)`

**Multi-purpose Colors** - Usable everywhere (background, text, border) using `--color-*` prefix:

**Data Visualization Colors:**
- `bg-dataviz-red`, `text-dataviz-red`, `border-dataviz-red` → `var(--color-dataviz-red)`
- `bg-dataviz-orange`, `text-dataviz-orange`, `border-dataviz-orange` → `var(--color-dataviz-orange)`
- `bg-dataviz-yellow`, `text-dataviz-yellow`, `border-dataviz-yellow` → `var(--color-dataviz-yellow)`
- `bg-dataviz-green`, `text-dataviz-green`, `border-dataviz-green` → `var(--color-dataviz-green)`
- `bg-dataviz-blue`, `text-dataviz-blue`, `border-dataviz-blue` → `var(--color-dataviz-blue)`
- `bg-dataviz-purple`, `text-dataviz-purple`, `border-dataviz-purple` → `var(--color-dataviz-purple)`

**Utility Colors with Intensity Variants:**
Each utility color (success, warning, destructive) has 4 intensity levels with hover states:

**Intensity Levels:**
- **Strong**: Darkest variant, used for high contrast text on light backgrounds
- **Base**: Standard variant, used for primary actions and important elements
- **Weak**: Light variant, used for subtle backgrounds and secondary elements
- **Light**: Lightest variant, used for very subtle backgrounds and tertiary elements

**Usage Guidelines:**
- **Buttons**: Use `-base` variants for primary actions
- **Backgrounds**: Use `-light` or `-weak` for subtle backgrounds
- **Text**: Use `-strong` for high contrast text on light backgrounds
- **Borders**: Use `-base` or `-weak` depending on emphasis needed

**Success Colors:**
- `bg-success-strong`, `text-success-strong`, `border-success-strong` → `var(--color-success-strong)`
- `bg-success-strong-hover`, `text-success-strong-hover`, `border-success-strong-hover` → `var(--color-success-strong-hover)`
- `bg-success-base`, `text-success-base`, `border-success-base` → `var(--color-success-base)`
- `bg-success-base-hover`, `text-success-base-hover`, `border-success-base-hover` → `var(--color-success-base-hover)`
- `bg-success-weak`, `text-success-weak`, `border-success-weak` → `var(--color-success-weak)`
- `bg-success-weak-hover`, `text-success-weak-hover`, `border-success-weak-hover` → `var(--color-success-weak-hover)`
- `bg-success-light`, `text-success-light`, `border-success-light` → `var(--color-success-light)`
- `bg-success-light-hover`, `text-success-light-hover`, `border-success-light-hover` → `var(--color-success-light-hover)`

**Warning Colors:**
- `bg-warning-strong`, `text-warning-strong`, `border-warning-strong` → `var(--color-warning-strong)`
- `bg-warning-strong-hover`, `text-warning-strong-hover`, `border-warning-strong-hover` → `var(--color-warning-strong-hover)`
- `bg-warning-base`, `text-warning-base`, `border-warning-base` → `var(--color-warning-base)`
- `bg-warning-base-hover`, `text-warning-base-hover`, `border-warning-base-hover` → `var(--color-warning-base-hover)`
- `bg-warning-weak`, `text-warning-weak`, `border-warning-weak` → `var(--color-warning-weak)`
- `bg-warning-weak-hover`, `text-warning-weak-hover`, `border-warning-weak-hover` → `var(--color-warning-weak-hover)`
- `bg-warning-light`, `text-warning-light`, `border-warning-light` → `var(--color-warning-light)`
- `bg-warning-light-hover`, `text-warning-light-hover`, `border-warning-light-hover` → `var(--color-warning-light-hover)`

**Destructive Colors:**
- `bg-destructive-strong`, `text-destructive-strong`, `border-destructive-strong` → `var(--color-destructive-strong)`
- `bg-destructive-strong-hover`, `text-destructive-strong-hover`, `border-destructive-strong-hover` → `var(--color-destructive-strong-hover)`
- `bg-destructive-base`, `text-destructive-base`, `border-destructive-base` → `var(--color-destructive-base)`
- `bg-destructive-base-hover`, `text-destructive-base-hover`, `border-destructive-base-hover` → `var(--color-destructive-base-hover)`
- `bg-destructive-weak`, `text-destructive-weak`, `border-destructive-weak` → `var(--color-destructive-weak)`
- `bg-destructive-weak-hover`, `text-destructive-weak-hover`, `border-destructive-weak-hover` → `var(--color-destructive-weak-hover)`
- `bg-destructive-light`, `text-destructive-light`, `border-destructive-light` → `var(--color-destructive-light)`
- `bg-destructive-light-hover`, `text-destructive-light-hover`, `border-destructive-light-hover` → `var(--color-destructive-light-hover)`

#### Spacing Scale
- `p-4`, `m-4` → `var(--spacing-4)` (4px)
- `p-8`, `m-8` → `var(--spacing-8)` (8px)
- `p-16`, `m-16` → `var(--spacing-16)` (16px)
- `p-24`, `m-24` → `var(--spacing-24)` (24px)
- `p-32`, `m-32` → `var(--spacing-32)` (32px)
- `p-48`, `m-48` → `var(--spacing-48)` (48px)

#### Border Radius Scale
- `rounded-none` → `var(--radius-none)` (0px)
- `rounded-2xs` → `var(--radius-2xs)` (2px)
- `rounded-xs` → `var(--radius-xs)` (4px)
- `rounded-sm` → `var(--radius-sm)` (6px)
- `rounded-md` → `var(--radius-md)` (8px)
- `rounded-lg` → `var(--radius-lg)` (12px)
- `rounded-xl` → `var(--radius-xl)` (16px)
- `rounded-2xl` → `var(--radius-2xl)` (24px)
- `rounded-round` → `var(--radius-round)` (50%)

### Usage Examples

**✅ DO: Use scoped theme variables**
```tsx
// Background colors (only usable as backgrounds)
<div className="bg-page">Page background</div>
<div className="bg-container">Container background</div>
<div className="bg-brand hover:bg-brand-hover">Brand button</div>

// Text colors (only usable as text/icons)
<span className="text-primary">Primary text</span>
<span className="text-secondary">Secondary text</span>
<Icon className="text-tertiary">...</Icon>

// Border colors (only usable as borders)
<div className="border border-weak">Weak border</div>
<div className="border border-focus">Focus border</div>

// Multi-purpose colors (usable everywhere)
<div className="bg-dataviz-green text-dataviz-green border-dataviz-green">
  Success indicator
</div>

// Utility colors with intensity variants for status indicators
<div className="bg-success-base text-white border-success-base">
  Success message
</div>
<div className="bg-warning-base text-white border-warning-base">
  Warning message
</div>
<div className="bg-destructive-base text-white border-destructive-base">
  Error message
</div>

// Interactive utility buttons with hover states
<button className="bg-success-base hover:bg-success-base-hover text-white">
  Success Action
</button>
<button className="bg-warning-base hover:bg-warning-base-hover text-white">
  Warning Action
</button>
<button className="bg-destructive-base hover:bg-destructive-base-hover text-white">
  Destructive Action
</button>

// Different intensity variants for different use cases
<div className="bg-success-light text-success-strong">Light success background</div>
<div className="bg-warning-weak text-warning-strong">Weak warning background</div>
<div className="bg-destructive-strong text-white">Strong destructive background</div>

// Spacing
<div className="p-16 m-24">Consistent spacing</div>

// Border radius
<button className="rounded-md">Medium radius</button>
```

**❌ DON'T: Mix scoped variables incorrectly**
```tsx
// Avoid using background colors as text
<span className="text-page">Wrong - page is background-only</span>

// Avoid using text colors as backgrounds
<div className="bg-primary">Wrong - primary is text-only</div>

// Avoid using border colors as backgrounds
<div className="bg-weak">Wrong - weak is border-only</div>
```

### Interactive Element Conventions

**🎯 Hover States**: All interactive elements automatically apply hover colors using variables ending with `-hover`:

- **Brand Elements**: `--background-brand` → `--background-brand-hover`
- **Control Elements**: `--background-controls` → `--background-controls-hover`
- **Container Elements**: `--background-container` → `--background-container-hover`
- **Flat Elements**: `--background-flat` → `--background-flat-hover`

**🎯 Disabled States**: All components must use appropriate disabled state styling based on their background color:

**Rule**: 
- If UI element has a background color set to `--background-color-controls` (white), then the disabled state should use `--background-color-disabled` for background and `--text-color-disabled` for content.
- If UI element has a background color set to `--background-color-brand` (orange), then the disabled state should use `--background-color-disabled-inverse` for background and `--text-color-disabled-inverse` for content.

**Implementation Pattern**:
```tsx
/* For components with white/controls background */
"bg-controls disabled:bg-disabled disabled:text-disabled"
/* or */
"bg-white disabled:bg-disabled disabled:text-disabled"

/* For components with brand/orange background */
"bg-brand disabled:bg-disabled-inverse disabled:text-disabled-inverse"
```

**Available Disabled Variables**:
```css
--background-color-disabled                   /* Disabled state for white/controls backgrounds */
--background-color-disabled-inverse           /* Disabled state for brand/orange backgrounds */
--text-color-disabled                         /* Disabled content for white/controls backgrounds */
--text-color-disabled-inverse                 /* Disabled content for brand/orange backgrounds */
```

**Available Hover Variables**:
```css
--background-color-brand-hover                /* Brand color hover */
--background-color-controls-hover             /* Input/form control hover */
--background-color-container-hover            /* Container background hover */
--background-color-flat-hover                 /* Flat surface hover */
--background-color-disabled                   /* Disabled state background */
```

**Implementation**: Components use CSS classes with hover pseudo-selectors and smooth transitions:
```css
.interactive-input:hover { background-color: var(--background-color-controls-hover); }
.interactive-card:hover { background-color: var(--background-color-container-hover); }
.figma-button:hover { background-color: var(--background-color-brand-hover); }
```

**Transition Behavior**: All interactive elements include `transition: background-color 0.2s ease` for smooth hover animations.

**Usage Examples**:
```tsx
// Buttons automatically use brand hover states
<Button variant="default">Primary Button</Button>

// Input fields automatically use control hover states
<Input interactive={true} />

// Cards with interactive prop use container hover states
<Card interactive={true}>Interactive Card</Card>
```

This ensures consistent hover behavior across all interactive elements with smooth transitions.

### Usage

```tsx
import { designTokens } from '@/lib/design-tokens';

// Use design tokens in components
<div style={{ color: designTokens.colors.primary }}>
  Primary colored text
</div>
```

### Layout Components

```tsx
import { Container, Stack } from '@/components/layout';

<Container maxWidth="lg" padding="md">
  <Stack direction="column" gap="lg">
    <h1>Title</h1>
    <p>Content</p>
  </Stack>
</Container>
```

### Available Pages

```tsx
// Home page - Design system showcase
// Route: http://localhost:3000/
import { Home } from '@/pages/Home';

// Tools page - Tool management interface
// Route: http://localhost:3000/tools
import { Tools } from '@/pages/Tools';
```

## 🔗 Figma MCP Integration

### Prerequisites

1. **Install Bun runtime**:
   ```bash
   curl -fsSL https://bun.sh/install | bash
   ```

2. **Install the MCP package**:
   ```bash
   npx cursor-talk-to-figma-mcp
   ```

### MCP Server Configuration

Add this configuration to your Cursor MCP settings:

```json
{
  "name": "figma-mcp",
  "type": "command",
  "command": "bunx cursor-talk-to-figma-mcp"
}
```

### Setup Steps

1. **Run the setup**:
   ```bash
   bun setup
   ```

2. **Start the WebSocket server**:
   ```bash
   bun socket
   ```

3. **Install the Figma plugin** from the community page

### MCP Tools Available

- `#get_image`: Get visual representation of Figma designs
- `#get_code`: Extract implementation details from Figma elements  
- `#get_variable_map`: Map Figma design tokens to code variables

### Using MCP Integration

```tsx
import { 
  processFigmaVariables, 
  mapFigmaComponentToShadcn,
  generateComponentCode 
} from '@/lib/mcp-integration';

// Process Figma variables to CSS
const cssTokens = processFigmaVariables(figmaVariables);

// Map Figma components to shadcn/ui
const componentMapping = mapFigmaComponentToShadcn(figmaNode);

// Generate React component code
const componentCode = generateComponentCode(componentMapping);
```

## 🛠 Development Workflow

### 1. Design in Figma
- Create designs using Figma variables for colors, spacing, typography
- Use component variants for different states
- Apply consistent naming conventions

### 2. Extract with MCP
- Select designs in Figma
- Use Cursor's composer with MCP tools
- Extract design data using `#get_image`, `#get_code`, `#get_variable_map`

### 3. Map to Design System
- Use the MCP integration utilities to map Figma variables to CSS custom properties
- Generate shadcn/ui component implementations
- Apply design tokens consistently

### 4. Implement Components
- Use the generated code as a starting point
- Refine with proper TypeScript types
- Follow the established patterns

## 📦 Available Components

### UI Components (shadcn/ui + Radix UI)

#### Interactive Components (with automatic hover states)
- **Button**: Multiple variants (primary, outlined, ghost, link, success, warning, destructive) with appropriate hover states
- **Input**: Form input with validation states (default, success, warning, destructive) and controls hover (`interactive={true}` by default)
- **Textarea**: Multi-line input with validation states (default, success, warning, destructive) and controls hover (`interactive={true}` by default)
- **Select**: Dropdown with validation states (default, success, warning, destructive) and controls hover (`interactive={true}` by default)
- **Checkbox**: Form checkbox with validation states (default, success, warning, destructive)
- **Card**: Container with optional interactive hover (`interactive={false}` by default)

#### Non-interactive Components
- **Label**: Form labels with validation states (default, success, warning, destructive)
- **Icon**: Material Symbols Sharp icons with validation states (default, success, warning, destructive)

#### When to Use Radix Primitives Directly

Since shadcn/ui components are built on Radix UI primitives, you can import Radix components directly when you need:

- **Custom styling** without shadcn/ui's design system
- **Minimal overhead** (no additional styling layers)
- **Specific Radix features** not exposed by shadcn/ui
- **Custom composition** of multiple Radix primitives

**Example:**
```tsx
// Use shadcn/ui for consistent design system styling
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'

// Use Radix directly for custom implementations
import * as SelectPrimitive from '@radix-ui/react-select'
import * as CheckboxPrimitive from '@radix-ui/react-checkbox'

// Custom select with Radix primitives
<SelectPrimitive.Root>
  <SelectPrimitive.Trigger className="custom-trigger">
    <SelectPrimitive.Value />
  </SelectPrimitive.Trigger>
  <SelectPrimitive.Content className="custom-content">
    <SelectPrimitive.Item value="option1">Option 1</SelectPrimitive.Item>
  </SelectPrimitive.Content>
</SelectPrimitive.Root>
```

### Layout Components
- **Container**: Responsive container with max-width and padding
- **Stack**: Flexible layout component for vertical/horizontal stacking

### Usage Examples

```tsx
// Button variants with auto-hover
<Button variant="primary">Save</Button>
<Button variant="outline">Cancel</Button>
<Button variant="ghost">Ghost Button</Button>
<Button variant="success">Success Action</Button>
<Button variant="warning">Warning Action</Button>
<Button variant="destructive">Delete</Button>
```

// Form components with validation states
<Input variant="default" placeholder="Normal input" />
<Input variant="success" placeholder="Valid input" />
<Input variant="warning" placeholder="Warning input" />
<Input variant="destructive" placeholder="Error input" />

<Select variant="success">
  <SelectTrigger>
    <SelectValue placeholder="Success state" />
  </SelectTrigger>
</Select>

<Textarea variant="warning" placeholder="Warning textarea" />

// Checkbox with utility colors
<Checkbox variant="default" />
<Checkbox variant="success" />
<Checkbox variant="warning" />
<Checkbox variant="destructive" />

// Labels with utility colors
<Label variant="default">Default Label</Label>
<Label variant="success">Success Label</Label>
<Label variant="warning">Warning Label</Label>
<Label variant="destructive">Error Label</Label>

// Icons with utility colors
<Icon variant="default">...</Icon>
<Icon variant="success">...</Icon>
<Icon variant="warning">...</Icon>
<Icon variant="destructive">...</Icon>

// Other interactive components
<Card interactive onClick={() => {}}>Clickable card</Card>

// Disable hover if needed
<Input interactive={false} placeholder="No hover" />
```

### Compositions
*Ready for your complex components*

## 🔧 Utilities

### Design Token Utilities
- `getTokenValue()`: Get CSS custom property values
- `mapFigmaVariableToCSS()`: Convert Figma variable names to CSS properties
- `applyTokens()`: Apply design tokens to styles
- `processFigmaColor()`: Process Figma color objects

### MCP Integration Utilities
- `processFigmaVariables()`: Convert Figma variables to CSS
- `mapFigmaComponentToShadcn()`: Map Figma components to shadcn/ui
- `generateComponentCode()`: Generate React component code
- `extractDesignTokens()`: Extract tokens from MCP responses

## 🌙 Dark Mode Support

The design system includes comprehensive dark mode support:

```css
:root {
  --primary: oklch(0.208 0.042 265.755);
  /* Light mode tokens */
}

.dark {
  --primary: oklch(0.929 0.013 255.508);
  /* Dark mode tokens */
}
```

## 📱 Responsive Design

The design system is built with responsive design in mind:

- Mobile-first approach
- Responsive spacing and typography
- Flexible layout components
- Container max-widths for different breakpoints

## 🚀 Getting Started

1. **Navigate to the design-system directory**:
   ```bash
   cd design-system
   ```

2. **Start the development server**:
   ```bash
   npm run dev
   ```
   This will start the Vite dev server at `http://localhost:3000`

3. **Start Storybook** (for component documentation):
   ```bash
   npm run storybook
   ```
   This will start Storybook at `http://localhost:6006`

4. **Set up MCP integration** (see MCP section above)

5. **Start building** with the design system components

## 🤝 Contributing

When adding new components:

1. Follow the established TypeScript patterns
2. Use the design token system consistently
3. **Apply hover states using `-hover` variables for all interactive elements**
4. Include `interactive?` prop for components that can be non-interactive
5. Include proper Figma mapping support
6. Add to the appropriate barrel exports
7. **Use predefined typography classes instead of utility classes**
8. **Never override default component styling with utility classes or inline styles**
9. **Never create a new component without explicit permission**
10. **Always compose with existing shadcn/ui primitives for accessibility**

### Typography Usage Guidelines

**✅ DO: Use predefined typography classes**
```tsx
// Use predefined label classes for table headers, form labels, etc.
<span className="label-2xs-medium">CATEGORY</span>

// Use UI classes for interface text (buttons, navigation, etc.)
<span className="ui-sm-medium">Button Text</span>

// Use body classes for readable content
<p className="body-sm-regular">This is readable body text with proper line height.</p>
```

**❌ DON'T: Recreate typography with utility classes**
```tsx
// Avoid this - creates inconsistent spacing and hard to maintain
<span className="text-xs font-medium text-[var(--tertiary)] uppercase tracking-[0.24px] leading-none">
  CATEGORY
</span>
```

**Available Typography Classes:**
- **Labels** (uppercase): `.label-3xs-medium` (11px), `.label-2xs-medium` (12px)
- **UI Text** (tight line height): `.ui-2xs-regular`, `.ui-2xs-medium`, `.ui-xs-medium`, `.ui-sm-regular`, `.ui-sm-medium`, etc.
- **Body Text** (readable line height): `.body-2xs-regular`, `.body-xs-regular`, `.body-sm-regular`, etc.
- **Display Text**: `.display-lg` (18px, semibold)

### Component Styling Guidelines

**✅ DO: Use Tailwind utilities in component.tsx, CSS only for animations**
```tsx
// ✅ CORRECT: All styling defined in component.tsx using Tailwind utilities
const buttonVariants = cva(
  "inline-flex items-center justify-center bg-brand text-primary rounded-2xs px-4 py-2",
  {
    variants: {
      variant: {
        primary: "bg-brand hover:bg-brand-hover",
        outline: "bg-controls border border-weak hover:bg-controls-hover",
      }
    }
  }
)

// ✅ CORRECT: CSS file only for animations when Tailwind utilities can't provide granular control
// button.css
@keyframes button-press {
  0% { transform: scale(1); }
  50% { transform: scale(0.98); }
  100% { transform: scale(1); }
}

.button-press {
  animation: button-press 0.1s ease-out;
}
```

**✅ DO: Respect component defaults and use variants/props**
```tsx
// Use component variants as designed
<Button variant="primary">Save</Button>
<Button variant="outline">Cancel</Button>

// Use typography classes as intended
<span className="label-2xs-medium">HEADER</span>

// Use component props for customization
<Card interactive={true} onClick={handleClick}>
  Interactive Card
</Card>
```

**❌ DON'T: Override default styling with utilities or inline styles**
```tsx
// Never override component colors, fonts, or spacing
<Button className="bg-red-500 text-white font-bold px-8" variant="primary">
  Broken Button
</Button>

// Don't override typography class properties
<span className="label-2xs-medium text-red-500 font-bold text-lg">
  Broken Header
</span>

// Don't use inline styles to override component defaults
<Card style={{ backgroundColor: 'red', padding: '20px' }}>
  Broken Card
</Card>

// Don't mix utility classes with design system classes
<div className="bg-blue-500 p-4 label-2xs-medium">
  Inconsistent styling
</div>
```

**Why this matters:**
- Maintains visual consistency across the application
- Ensures components work properly in light/dark mode
- Prevents breaking changes when design tokens are updated
- Keeps the design system predictable and maintainable
- Preserves accessibility features built into components

**If you need different styling:**
- Create a new component variant
- Add new props to existing components
- Create a new typography class in `src/lib/globals.css`
- Use composition instead of override

### Button Icon Usage Guidelines

**✅ DO: Use the proper button API with iconLeft and iconRight props**
```tsx
// ✅ CORRECT: Use iconLeft prop for left icons
<Button iconLeft="check">
  Save
</Button>

// ✅ CORRECT: Use iconRight prop for right icons
<Button iconRight="arrow_forward">
  Continue
</Button>

// ✅ CORRECT: Use both props for icons on both sides
<Button iconLeft="settings" iconRight="chevron_right">
  Configure
</Button>

// ✅ CORRECT: Icon-only buttons with aria-label
<Button size="icon" aria-label="Settings">
  <Icon>settings</Icon>
</Button>
```

**❌ DON'T: Place Icon components as children in buttons**
```tsx
// ❌ WRONG: Don't place Icon components as children
<Button>
  <Icon>check</Icon>
  Save
</Button>

// ❌ WRONG: This breaks padding rules and icon detection
<Button>
  Save
  <Icon>arrow_forward</Icon>
</Button>

// ❌ WRONG: Don't mix Icon children with iconLeft/iconRight props
<Button iconLeft="check">
  <Icon>arrow_forward</Icon>
  Save
</Button>
```

**Why this matters:**
- **Proper padding**: Button component applies correct padding based on icon presence
- **Icon detection**: Component knows when icons are present and applies appropriate sizing
- **Consistent spacing**: 4px gap between icon and text is automatically applied
- **Accessibility**: Proper ARIA attributes and screen reader support
- **Design system compliance**: Follows established button patterns

**Button Icon API:**
- `iconLeft`: String (icon name) for left icon
- `iconRight`: String (icon name) for right icon
- `size="icon"`: For icon-only buttons
- `aria-label`: Required for icon-only buttons

### Icon + Label Padding Principle

**🎯 Asymmetric Padding for Icon + Label Combinations**: When UI elements contain both an icon and label, use asymmetric padding to maintain optical balance:

**Rule**: Use larger padding when text is next to the edge, smaller padding when icon is next to the edge.

**Examples**:
- **Text next to edge**: 16px padding
- **Icon next to edge**: 12px padding
- **Text + Icon combination**: 16px on text side, 12px on icon side

**Implementation Pattern**:
```tsx
// Button with icon + label
<Button className="pl-4 pr-3"> {/* 16px left, 12px right */}
  <Icon>...</Icon>
  Label
</Button>

// Button with label + icon (icon on right)
<Button className="pl-4 pr-3"> {/* 16px left, 12px right */}
  Label
  <Icon>...</Icon>
</Button>

// Button with icon only
<Button className="p-3"> {/* 12px all around */}
  <Icon>...</Icon>
</Button>

// Button with label only
<Button className="px-4"> {/* 16px left and right */}
  Label
</Button>
```

**Scale Examples**:
- **Large scale**: 16px text edge, 12px icon edge
- **Medium scale**: 12px text edge, 8px icon edge  
- **Small scale**: 8px text edge, 6px icon edge
- **Tiny scale**: 6px text edge, 4px icon edge

**Why this matters**:
- Maintains visual balance between text and icon
- Prevents optical crowding when elements are adjacent
- Creates consistent visual rhythm across the interface
- Applies to buttons, inputs, cards, navigation items, and any UI element with icon + label combinations

### Component Creation Guidelines

**✅ DO: Use Tailwind utilities in component.tsx, CSS only for animations**
- **All styling is defined in component.tsx using our Tailwind utilities**
- **component.css is used only for animations when we can't cover it using our utilities since sometimes we need more granular control**
- **This pattern ensures consistency with our design system tokens and makes components easier to maintain**

**✅ DO: Always check and reuse existing components**
```tsx
// First, check what exists in src/components
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { ToolsTable } from '@/components/tools/ToolsTable'

// Compose existing components
const MyFeature = () => (
  <Card>
    <ToolsTable data={data} />
    <Button onClick={handleSave}>Save</Button>
  </Card>
)
```

**✅ DO: Compose with shadcn/ui primitives or Radix UI for new components**
```tsx
// When building composite components, use shadcn/ui as foundation
import { Dialog, DialogContent, DialogHeader } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'

const EditToolModal = ({ tool, onSave }) => (
  <Dialog>
    <DialogContent>
      <DialogHeader>Edit Tool</DialogHeader>
      <Input defaultValue={tool.name} />
      <Button onClick={onSave}>Save Changes</Button>
    </DialogContent>
  </Dialog>
)

// Or use Radix primitives directly for custom implementations
import * as DialogPrimitive from '@radix-ui/react-dialog'
import * as SelectPrimitive from '@radix-ui/react-select'

const CustomModal = ({ children }) => (
  <DialogPrimitive.Root>
    <DialogPrimitive.Trigger>Open</DialogPrimitive.Trigger>
    <DialogPrimitive.Portal>
      <DialogPrimitive.Overlay className="custom-overlay" />
      <DialogPrimitive.Content className="custom-content">
        {children}
      </DialogPrimitive.Content>
    </DialogPrimitive.Portal>
  </DialogPrimitive.Root>
)
```

**❌ DON'T: Create components without checking existing ones**
```tsx
// Never do this without first checking src/components
const MyButton = ({ children, onClick }) => (
  <button className="px-4 py-2 bg-blue-500 text-white" onClick={onClick}>
    {children}
  </button>
)

// Never create custom markup without using shadcn/ui primitives or Radix UI
const MyModal = ({ children }) => (
  <div className="fixed inset-0 bg-black bg-opacity-50">
    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
      {children}
    </div>
  </div>
)
```

**❌ DON'T: Proceed without permission**
```tsx
// If the component you need doesn't exist, STOP and ask:
// "I need a DatePicker component but it doesn't exist in src/components. 
//  Should I create a new DatePicker component?"

// Don't just create it and move on
```

**Required Process:**
1. **Search existing components** in `src/components` first
2. **Check if shadcn/ui has a primitive** that can be styled/composed
3. **Check if Radix UI has a primitive** that can be used directly
3. **If neither exists**: STOP and ask "Should I create a new [ComponentName] component?"
4. **Wait for explicit permission** before creating new components
5. **When approved**: Always build on shadcn/ui primitives or Radix UI for accessibility

**Why this matters:**
- **Prevents duplication**: Avoids multiple components doing the same thing
- **Maintains consistency**: Reuses established patterns and styling
- **Preserves accessibility**: Inherits ARIA semantics, keyboard navigation, screen reader support
- **Reduces bundle size**: Fewer duplicate components means smaller builds
- **Easier maintenance**: Changes to one component benefit the entire system

**Currently Available Components:**
```
📁 src/components/
├── 🎨 ui/ (shadcn/ui + Radix UI primitives)
│   ├── button.tsx          // Primary, outline, ghost, success, warning, destructive variants
│   ├── card.tsx            // Interactive cards with hover states
│   ├── checkbox.tsx        // Custom styled with validation states (uses Radix CheckboxPrimitive)
│   ├── icon.tsx            // Centralized icon system with validation states
│   ├── input.tsx           // Form inputs with validation states
│   ├── label.tsx           // Form labels with validation states (uses Radix LabelPrimitive)
│   ├── select.tsx          // Dropdown selections with validation states (uses Radix SelectPrimitive)
│   └── textarea.tsx        // Multi-line text inputs with validation states
├── 🔧 tools/
│   ├── ToolCard.tsx        // Individual tool card (grid view)
│   └── ToolsTable.tsx      // Data table with sorting/filtering
└── 📐 layout/
    ├── Container.tsx       // Content containers
    ├── Navigation.tsx      // Main app navigation
    ├── NavigationLayout.tsx // Navigation wrapper
    ├── PageHeader.tsx      // Page headers with actions
    └── Stack.tsx           // Vertical/horizontal spacing
```

**Before creating anything new, check if you can:**
1. Use an existing component as-is
2. Extend an existing component with new props
3. Compose multiple existing components
4. Use a shadcn/ui primitive and style it
5. Use a Radix UI primitive directly

### Interactive Component Checklist
- [ ] Has `interactive?` prop (default `true` for inputs, `false` for containers)
- [ ] Uses appropriate hover class (`.interactive-input`, `.interactive-card`, etc.)
- [ ] Hover state uses corresponding `-hover` design token
- [ ] Includes cursor pointer for clickable elements
- [ ] Documents interactive behavior in component comments
- [ ] **Uses predefined typography classes instead of utility classes**
- [ ] **Does not override default component styling with utilities or inline styles**
- [ ] **Checked existing components in `src/components` before creating new ones**
- [ ] **Built on shadcn/ui primitives or Radix UI for accessibility and keyboard support**
- [ ] **Received explicit permission before creating any new component**

## 📚 Learn More

- [shadcn/ui Documentation](https://ui.shadcn.com)
- [Radix UI Documentation](https://www.radix-ui.com/)
- [Tailwind CSS v4 Documentation](https://tailwindcss.com/docs)
- [Vite Documentation](https://vitejs.dev/)
- [React Documentation](https://react.dev/)
- [Figma API Documentation](https://www.figma.com/developers/api)
