(self.webpackChunkdesign_system=self.webpackChunkdesign_system||[]).push([[142],{"./node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map(function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content}).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/noSourceMaps.js":module=>{"use strict";module.exports=function(i){return i[1]}},"./src/app/components/ui/badge/ds-badge.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* Base badge styles */\n.badge {\n  display: inline-flex;\n  align-items: center;\n  height: 24px;\n  border-radius: 6px;\n  font-size: var(--font-size-xs); /* 0.75rem / 12px */\n  font-weight: 500;\n  line-height: 1.2;\n  font-family: 'Brockmann', system-ui, -apple-system, sans-serif;\n  white-space: nowrap;\n  box-sizing: border-box;\n  gap: 4px;\n}\n\n/* Badge content */\n.badge__content {\n  display: flex;\n  align-items: center;\n}\n\n/* Badge icon */\n.badge__icon {\n  flex-shrink: 0;\n}\n\n/* Badge indicator */\n.badge__indicator {\n  flex-shrink: 0;\n}\n\n/* Content type specific padding */\n\n/* Text only badges */\n.badge--text {\n  padding: 0 8px;\n}\n\n/* Icon + text badges */\n.badge--icon-text {\n  padding: 0 8px 0 6px;\n}\n\n/* Indicator + text badges (always white background, black text) */\n.badge--indicator-text {\n  padding: 0 8px;\n  background-color: white;\n  color: black;\n  border: 1px solid var(--border-color-default);\n}\n\n/* Color variants for text and icon-text types */\n\n/* Default variant */\n.badge--default {\n  background-color: white;\n  color: black;\n  border: 1px solid var(--border-color-default);\n}\n\n.badge--default .badge__icon {\n  color: black;\n}\n\n/* Brand variant */\n.badge--brand {\n  background-color: var(--background-color-interactive-brand);\n  color: white;\n}\n\n.badge--brand .badge__icon {\n  color: white;\n}\n\n/* Success variant */\n.badge--success {\n  background-color: var(--color-success-weak);\n  color: var(--color-success-strong);\n}\n\n.badge--success .badge__icon {\n  color: var(--color-success-strong);\n}\n\n/* Warning variant */\n.badge--warning {\n  background-color: var(--color-warning-weak);\n  color: var(--color-warning-strong);\n}\n\n.badge--warning .badge__icon {\n  color: var(--color-warning-strong);\n}\n\n/* Destructive variant */\n.badge--destructive {\n  background-color: var(--color-destructive-weak);\n  color: var(--color-destructive-strong);\n}\n\n.badge--destructive .badge__icon {\n  color: var(--color-destructive-strong);\n}\n\n/* Blue variant */\n.badge--blue {\n  background-color: var(--color-blue-weak);\n  color: var(--color-blue-strong);\n}\n\n.badge--blue .badge__icon {\n  color: var(--color-blue-strong);\n}\n\n/* Light Purple variant */\n.badge--light-purple {\n  background-color: var(--color-light-purple-weak);\n  color: var(--color-light-purple-strong);\n}\n\n.badge--light-purple .badge__icon {\n  color: var(--color-light-purple-strong);\n}\n\n/* Pink variant */\n.badge--pink {\n  background-color: var(--color-pink-weak);\n  color: var(--color-pink-strong);\n}\n\n.badge--pink .badge__icon {\n  color: var(--color-pink-strong);\n}\n\n/* Salmon Orange variant */\n.badge--salmon-orange {\n  background-color: var(--color-salmon-orange-weak);\n  color: var(--color-salmon-orange-strong);\n}\n\n.badge--salmon-orange .badge__icon {\n  color: var(--color-salmon-orange-strong);\n}\n\n/* Orange variant */\n.badge--orange {\n  background-color: var(--color-orange-weak);\n  color: var(--color-orange-strong);\n}\n\n.badge--orange .badge__icon {\n  color: var(--color-orange-strong);\n}\n\n/* Lime Green variant */\n.badge--lime-green {\n  background-color: var(--color-lime-green-weak);\n  color: var(--color-lime-green-strong);\n}\n\n.badge--lime-green .badge__icon {\n  color: var(--color-lime-green-strong);\n}\n\n/* Grey variant */\n.badge--grey {\n  background-color: var(--color-grey-weak);\n  color: var(--color-grey-strong);\n}\n\n.badge--grey .badge__icon {\n  color: var(--color-grey-strong);\n}\n\n/* Indicator variant always has white background and black text */\n.badge--indicator-variant {\n  background-color: white;\n  color: black;\n  border: 1px solid var(--border-color-default);\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ui/badge/ds-badge.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllColorVariants:()=>AllColorVariants,ContentTypeComparison:()=>ContentTypeComparison,Default:()=>Default,IconTextBrand:()=>IconTextBrand,IconTextDefault:()=>IconTextDefault,IconTextDestructive:()=>IconTextDestructive,IconTextSuccess:()=>IconTextSuccess,IconTextWarning:()=>IconTextWarning,IndicatorTextBlue:()=>IndicatorTextBlue,IndicatorTextBrand:()=>IndicatorTextBrand,IndicatorTextDefault:()=>IndicatorTextDefault,IndicatorTextDestructive:()=>IndicatorTextDestructive,IndicatorTextGrey:()=>IndicatorTextGrey,IndicatorTextLightPurple:()=>IndicatorTextLightPurple,IndicatorTextLimeGreen:()=>IndicatorTextLimeGreen,IndicatorTextOrange:()=>IndicatorTextOrange,IndicatorTextPink:()=>IndicatorTextPink,IndicatorTextSalmonOrange:()=>IndicatorTextSalmonOrange,IndicatorTextSuccess:()=>IndicatorTextSuccess,IndicatorTextWarning:()=>IndicatorTextWarning,TextBlue:()=>TextBlue,TextBrand:()=>TextBrand,TextDefault:()=>TextDefault,TextDestructive:()=>TextDestructive,TextGrey:()=>TextGrey,TextLightPurple:()=>TextLightPurple,TextLimeGreen:()=>TextLimeGreen,TextOrange:()=>TextOrange,TextPink:()=>TextPink,TextSalmonOrange:()=>TextSalmonOrange,TextSuccess:()=>TextSuccess,TextWarning:()=>TextWarning,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Primitives/Badge",component:__webpack_require__("./src/app/components/ui/badge/ds-badge.ts").W,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{variant:{control:"select",options:["default","brand","success","warning","destructive","blue","light-purple","pink","salmon-orange","orange","lime-green","grey"]},contentType:{control:"select",options:["text","icon-text","indicator-text"]},content:{control:"text"},leadingIcon:{control:"text"},indicatorShape:{control:"select",options:["circle","square","diamond","triangle","pentagon"]}}},Default={args:{content:"Badge",contentType:"text",variant:"default"}},TextDefault={args:{content:"Default",contentType:"text",variant:"default"}},TextBrand={args:{content:"Brand",contentType:"text",variant:"brand"}},TextSuccess={args:{content:"Success",contentType:"text",variant:"success"}},TextWarning={args:{content:"Warning",contentType:"text",variant:"warning"}},TextDestructive={args:{content:"Error",contentType:"text",variant:"destructive"}},TextBlue={args:{content:"Blue",contentType:"text",variant:"blue"}},TextLightPurple={args:{content:"Light Purple",contentType:"text",variant:"light-purple"}},TextPink={args:{content:"Pink",contentType:"text",variant:"pink"}},TextSalmonOrange={args:{content:"Salmon Orange",contentType:"text",variant:"salmon-orange"}},TextOrange={args:{content:"Orange",contentType:"text",variant:"orange"}},TextLimeGreen={args:{content:"Lime Green",contentType:"text",variant:"lime-green"}},TextGrey={args:{content:"Grey",contentType:"text",variant:"grey"}},IconTextDefault={args:{content:"Feature",contentType:"icon-text",leadingIcon:"remixStarLine",variant:"default"}},IconTextBrand={args:{content:"New Feature",contentType:"icon-text",leadingIcon:"remixStarFill",variant:"brand"}},IconTextSuccess={args:{content:"Verified",contentType:"icon-text",leadingIcon:"remixCheckboxCircleFill",variant:"success"}},IconTextWarning={args:{content:"Attention",contentType:"icon-text",leadingIcon:"remixAlertFill",variant:"warning"}},IconTextDestructive={args:{content:"Critical",contentType:"icon-text",leadingIcon:"remixErrorWarningFill",variant:"destructive"}},IndicatorTextDefault={args:{content:"Default",contentType:"indicator-text",variant:"default",indicatorShape:"circle"}},IndicatorTextBrand={args:{content:"In Progress",contentType:"indicator-text",variant:"brand",indicatorShape:"circle"}},IndicatorTextSuccess={args:{content:"Completed",contentType:"indicator-text",variant:"success",indicatorShape:"circle"}},IndicatorTextWarning={args:{content:"Pending",contentType:"indicator-text",variant:"warning",indicatorShape:"triangle"}},IndicatorTextDestructive={args:{content:"Failed",contentType:"indicator-text",variant:"destructive",indicatorShape:"square"}},IndicatorTextBlue={args:{content:"Info",contentType:"indicator-text",variant:"blue",indicatorShape:"circle"}},IndicatorTextLightPurple={args:{content:"Special",contentType:"indicator-text",variant:"light-purple",indicatorShape:"diamond"}},IndicatorTextPink={args:{content:"Accent",contentType:"indicator-text",variant:"pink",indicatorShape:"circle"}},IndicatorTextSalmonOrange={args:{content:"Warm",contentType:"indicator-text",variant:"salmon-orange",indicatorShape:"circle"}},IndicatorTextOrange={args:{content:"Alert",contentType:"indicator-text",variant:"orange",indicatorShape:"triangle"}},IndicatorTextLimeGreen={args:{content:"Fresh",contentType:"indicator-text",variant:"lime-green",indicatorShape:"circle"}},IndicatorTextGrey={args:{content:"Neutral",contentType:"indicator-text",variant:"grey",indicatorShape:"circle"}},ContentTypeComparison={render:()=>({template:'\n      <div style="display: flex; flex-direction: column; gap: 16px; align-items: flex-start;">\n        <div>\n          <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600;">Text Only</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ds-badge content="Default" contentType="text" variant="default"></ds-badge>\n            <ds-badge content="Brand" contentType="text" variant="brand"></ds-badge>\n            <ds-badge content="Success" contentType="text" variant="success"></ds-badge>\n            <ds-badge content="Warning" contentType="text" variant="warning"></ds-badge>\n            <ds-badge content="Destructive" contentType="text" variant="destructive"></ds-badge>\n            <ds-badge content="Blue" contentType="text" variant="blue"></ds-badge>\n            <ds-badge content="Light Purple" contentType="text" variant="light-purple"></ds-badge>\n            <ds-badge content="Pink" contentType="text" variant="pink"></ds-badge>\n            <ds-badge content="Salmon Orange" contentType="text" variant="salmon-orange"></ds-badge>\n            <ds-badge content="Orange" contentType="text" variant="orange"></ds-badge>\n            <ds-badge content="Lime Green" contentType="text" variant="lime-green"></ds-badge>\n            <ds-badge content="Grey" contentType="text" variant="grey"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600;">Icon + Text</h3>\n          <div style="display: flex; gap: 8px;">\n            <ds-badge content="Feature" contentType="icon-text" leadingIcon="remixStarLine" variant="default"></ds-badge>\n            <ds-badge content="Premium" contentType="icon-text" leadingIcon="remixStarFill" variant="brand"></ds-badge>\n            <ds-badge content="Verified" contentType="icon-text" leadingIcon="remixCheckboxCircleFill" variant="success"></ds-badge>\n            <ds-badge content="Alert" contentType="icon-text" leadingIcon="remixAlertFill" variant="warning"></ds-badge>\n            <ds-badge content="Error" contentType="icon-text" leadingIcon="remixErrorWarningFill" variant="destructive"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600;">Indicator + Text (Always white background)</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ds-badge content="Default" contentType="indicator-text" variant="default" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Brand" contentType="indicator-text" variant="brand" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Success" contentType="indicator-text" variant="success" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Warning" contentType="indicator-text" variant="warning" indicatorShape="triangle"></ds-badge>\n            <ds-badge content="Destructive" contentType="indicator-text" variant="destructive" indicatorShape="square"></ds-badge>\n            <ds-badge content="Blue" contentType="indicator-text" variant="blue" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Light Purple" contentType="indicator-text" variant="light-purple" indicatorShape="diamond"></ds-badge>\n            <ds-badge content="Pink" contentType="indicator-text" variant="pink" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Salmon Orange" contentType="indicator-text" variant="salmon-orange" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Orange" contentType="indicator-text" variant="orange" indicatorShape="triangle"></ds-badge>\n            <ds-badge content="Lime Green" contentType="indicator-text" variant="lime-green" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Grey" contentType="indicator-text" variant="grey" indicatorShape="circle"></ds-badge>\n          </div>\n        </div>\n      </div>\n    '})},AllColorVariants={render:()=>({template:'\n      <div style="display: flex; flex-direction: column; gap: 16px; align-items: flex-start;">\n        <h3 style="margin: 0; font-size: 16px; font-weight: 600;">All Badge Color Variants</h3>\n        <div style="display: flex; flex-wrap: wrap; gap: 8px; max-width: 600px;">\n          <ds-badge content="Default" variant="default"></ds-badge>\n          <ds-badge content="Brand" variant="brand"></ds-badge>\n          <ds-badge content="Success" variant="success"></ds-badge>\n          <ds-badge content="Warning" variant="warning"></ds-badge>\n          <ds-badge content="Destructive" variant="destructive"></ds-badge>\n          <ds-badge content="Blue" variant="blue"></ds-badge>\n          <ds-badge content="Light Purple" variant="light-purple"></ds-badge>\n          <ds-badge content="Pink" variant="pink"></ds-badge>\n          <ds-badge content="Salmon Orange" variant="salmon-orange"></ds-badge>\n          <ds-badge content="Orange" variant="orange"></ds-badge>\n          <ds-badge content="Lime Green" variant="lime-green"></ds-badge>\n          <ds-badge content="Grey" variant="grey"></ds-badge>\n        </div>\n      </div>\n    '})},__namedExportsOrder=["Default","TextDefault","TextBrand","TextSuccess","TextWarning","TextDestructive","TextBlue","TextLightPurple","TextPink","TextSalmonOrange","TextOrange","TextLimeGreen","TextGrey","IconTextDefault","IconTextBrand","IconTextSuccess","IconTextWarning","IconTextDestructive","IndicatorTextDefault","IndicatorTextBrand","IndicatorTextSuccess","IndicatorTextWarning","IndicatorTextDestructive","IndicatorTextBlue","IndicatorTextLightPurple","IndicatorTextPink","IndicatorTextSalmonOrange","IndicatorTextOrange","IndicatorTextLimeGreen","IndicatorTextGrey","ContentTypeComparison","AllColorVariants"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Badge',\n    contentType: 'text',\n    variant: 'default'\n  }\n}",...Default.parameters?.docs?.source}}},TextDefault.parameters={...TextDefault.parameters,docs:{...TextDefault.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Default',\n    contentType: 'text',\n    variant: 'default'\n  }\n}",...TextDefault.parameters?.docs?.source}}},TextBrand.parameters={...TextBrand.parameters,docs:{...TextBrand.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Brand',\n    contentType: 'text',\n    variant: 'brand'\n  }\n}",...TextBrand.parameters?.docs?.source}}},TextSuccess.parameters={...TextSuccess.parameters,docs:{...TextSuccess.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Success',\n    contentType: 'text',\n    variant: 'success'\n  }\n}",...TextSuccess.parameters?.docs?.source}}},TextWarning.parameters={...TextWarning.parameters,docs:{...TextWarning.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Warning',\n    contentType: 'text',\n    variant: 'warning'\n  }\n}",...TextWarning.parameters?.docs?.source}}},TextDestructive.parameters={...TextDestructive.parameters,docs:{...TextDestructive.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Error',\n    contentType: 'text',\n    variant: 'destructive'\n  }\n}",...TextDestructive.parameters?.docs?.source}}},TextBlue.parameters={...TextBlue.parameters,docs:{...TextBlue.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Blue',\n    contentType: 'text',\n    variant: 'blue'\n  }\n}",...TextBlue.parameters?.docs?.source}}},TextLightPurple.parameters={...TextLightPurple.parameters,docs:{...TextLightPurple.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Light Purple',\n    contentType: 'text',\n    variant: 'light-purple'\n  }\n}",...TextLightPurple.parameters?.docs?.source}}},TextPink.parameters={...TextPink.parameters,docs:{...TextPink.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Pink',\n    contentType: 'text',\n    variant: 'pink'\n  }\n}",...TextPink.parameters?.docs?.source}}},TextSalmonOrange.parameters={...TextSalmonOrange.parameters,docs:{...TextSalmonOrange.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Salmon Orange',\n    contentType: 'text',\n    variant: 'salmon-orange'\n  }\n}",...TextSalmonOrange.parameters?.docs?.source}}},TextOrange.parameters={...TextOrange.parameters,docs:{...TextOrange.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Orange',\n    contentType: 'text',\n    variant: 'orange'\n  }\n}",...TextOrange.parameters?.docs?.source}}},TextLimeGreen.parameters={...TextLimeGreen.parameters,docs:{...TextLimeGreen.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Lime Green',\n    contentType: 'text',\n    variant: 'lime-green'\n  }\n}",...TextLimeGreen.parameters?.docs?.source}}},TextGrey.parameters={...TextGrey.parameters,docs:{...TextGrey.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Grey',\n    contentType: 'text',\n    variant: 'grey'\n  }\n}",...TextGrey.parameters?.docs?.source}}},IconTextDefault.parameters={...IconTextDefault.parameters,docs:{...IconTextDefault.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Feature',\n    contentType: 'icon-text',\n    leadingIcon: 'remixStarLine',\n    variant: 'default'\n  }\n}",...IconTextDefault.parameters?.docs?.source}}},IconTextBrand.parameters={...IconTextBrand.parameters,docs:{...IconTextBrand.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'New Feature',\n    contentType: 'icon-text',\n    leadingIcon: 'remixStarFill',\n    variant: 'brand'\n  }\n}",...IconTextBrand.parameters?.docs?.source}}},IconTextSuccess.parameters={...IconTextSuccess.parameters,docs:{...IconTextSuccess.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Verified',\n    contentType: 'icon-text',\n    leadingIcon: 'remixCheckboxCircleFill',\n    variant: 'success'\n  }\n}",...IconTextSuccess.parameters?.docs?.source}}},IconTextWarning.parameters={...IconTextWarning.parameters,docs:{...IconTextWarning.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Attention',\n    contentType: 'icon-text',\n    leadingIcon: 'remixAlertFill',\n    variant: 'warning'\n  }\n}",...IconTextWarning.parameters?.docs?.source}}},IconTextDestructive.parameters={...IconTextDestructive.parameters,docs:{...IconTextDestructive.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Critical',\n    contentType: 'icon-text',\n    leadingIcon: 'remixErrorWarningFill',\n    variant: 'destructive'\n  }\n}",...IconTextDestructive.parameters?.docs?.source}}},IndicatorTextDefault.parameters={...IndicatorTextDefault.parameters,docs:{...IndicatorTextDefault.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Default',\n    contentType: 'indicator-text',\n    variant: 'default',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextDefault.parameters?.docs?.source}}},IndicatorTextBrand.parameters={...IndicatorTextBrand.parameters,docs:{...IndicatorTextBrand.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'In Progress',\n    contentType: 'indicator-text',\n    variant: 'brand',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextBrand.parameters?.docs?.source}}},IndicatorTextSuccess.parameters={...IndicatorTextSuccess.parameters,docs:{...IndicatorTextSuccess.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Completed',\n    contentType: 'indicator-text',\n    variant: 'success',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextSuccess.parameters?.docs?.source}}},IndicatorTextWarning.parameters={...IndicatorTextWarning.parameters,docs:{...IndicatorTextWarning.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Pending',\n    contentType: 'indicator-text',\n    variant: 'warning',\n    indicatorShape: 'triangle'\n  }\n}",...IndicatorTextWarning.parameters?.docs?.source}}},IndicatorTextDestructive.parameters={...IndicatorTextDestructive.parameters,docs:{...IndicatorTextDestructive.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Failed',\n    contentType: 'indicator-text',\n    variant: 'destructive',\n    indicatorShape: 'square'\n  }\n}",...IndicatorTextDestructive.parameters?.docs?.source}}},IndicatorTextBlue.parameters={...IndicatorTextBlue.parameters,docs:{...IndicatorTextBlue.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Info',\n    contentType: 'indicator-text',\n    variant: 'blue',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextBlue.parameters?.docs?.source}}},IndicatorTextLightPurple.parameters={...IndicatorTextLightPurple.parameters,docs:{...IndicatorTextLightPurple.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Special',\n    contentType: 'indicator-text',\n    variant: 'light-purple',\n    indicatorShape: 'diamond'\n  }\n}",...IndicatorTextLightPurple.parameters?.docs?.source}}},IndicatorTextPink.parameters={...IndicatorTextPink.parameters,docs:{...IndicatorTextPink.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Accent',\n    contentType: 'indicator-text',\n    variant: 'pink',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextPink.parameters?.docs?.source}}},IndicatorTextSalmonOrange.parameters={...IndicatorTextSalmonOrange.parameters,docs:{...IndicatorTextSalmonOrange.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Warm',\n    contentType: 'indicator-text',\n    variant: 'salmon-orange',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextSalmonOrange.parameters?.docs?.source}}},IndicatorTextOrange.parameters={...IndicatorTextOrange.parameters,docs:{...IndicatorTextOrange.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Alert',\n    contentType: 'indicator-text',\n    variant: 'orange',\n    indicatorShape: 'triangle'\n  }\n}",...IndicatorTextOrange.parameters?.docs?.source}}},IndicatorTextLimeGreen.parameters={...IndicatorTextLimeGreen.parameters,docs:{...IndicatorTextLimeGreen.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Fresh',\n    contentType: 'indicator-text',\n    variant: 'lime-green',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextLimeGreen.parameters?.docs?.source}}},IndicatorTextGrey.parameters={...IndicatorTextGrey.parameters,docs:{...IndicatorTextGrey.parameters?.docs,source:{originalSource:"{\n  args: {\n    content: 'Neutral',\n    contentType: 'indicator-text',\n    variant: 'grey',\n    indicatorShape: 'circle'\n  }\n}",...IndicatorTextGrey.parameters?.docs?.source}}},ContentTypeComparison.parameters={...ContentTypeComparison.parameters,docs:{...ContentTypeComparison.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 16px; align-items: flex-start;">\n        <div>\n          <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600;">Text Only</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ds-badge content="Default" contentType="text" variant="default"></ds-badge>\n            <ds-badge content="Brand" contentType="text" variant="brand"></ds-badge>\n            <ds-badge content="Success" contentType="text" variant="success"></ds-badge>\n            <ds-badge content="Warning" contentType="text" variant="warning"></ds-badge>\n            <ds-badge content="Destructive" contentType="text" variant="destructive"></ds-badge>\n            <ds-badge content="Blue" contentType="text" variant="blue"></ds-badge>\n            <ds-badge content="Light Purple" contentType="text" variant="light-purple"></ds-badge>\n            <ds-badge content="Pink" contentType="text" variant="pink"></ds-badge>\n            <ds-badge content="Salmon Orange" contentType="text" variant="salmon-orange"></ds-badge>\n            <ds-badge content="Orange" contentType="text" variant="orange"></ds-badge>\n            <ds-badge content="Lime Green" contentType="text" variant="lime-green"></ds-badge>\n            <ds-badge content="Grey" contentType="text" variant="grey"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600;">Icon + Text</h3>\n          <div style="display: flex; gap: 8px;">\n            <ds-badge content="Feature" contentType="icon-text" leadingIcon="remixStarLine" variant="default"></ds-badge>\n            <ds-badge content="Premium" contentType="icon-text" leadingIcon="remixStarFill" variant="brand"></ds-badge>\n            <ds-badge content="Verified" contentType="icon-text" leadingIcon="remixCheckboxCircleFill" variant="success"></ds-badge>\n            <ds-badge content="Alert" contentType="icon-text" leadingIcon="remixAlertFill" variant="warning"></ds-badge>\n            <ds-badge content="Error" contentType="icon-text" leadingIcon="remixErrorWarningFill" variant="destructive"></ds-badge>\n          </div>\n        </div>\n        \n        <div>\n          <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600;">Indicator + Text (Always white background)</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ds-badge content="Default" contentType="indicator-text" variant="default" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Brand" contentType="indicator-text" variant="brand" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Success" contentType="indicator-text" variant="success" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Warning" contentType="indicator-text" variant="warning" indicatorShape="triangle"></ds-badge>\n            <ds-badge content="Destructive" contentType="indicator-text" variant="destructive" indicatorShape="square"></ds-badge>\n            <ds-badge content="Blue" contentType="indicator-text" variant="blue" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Light Purple" contentType="indicator-text" variant="light-purple" indicatorShape="diamond"></ds-badge>\n            <ds-badge content="Pink" contentType="indicator-text" variant="pink" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Salmon Orange" contentType="indicator-text" variant="salmon-orange" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Orange" contentType="indicator-text" variant="orange" indicatorShape="triangle"></ds-badge>\n            <ds-badge content="Lime Green" contentType="indicator-text" variant="lime-green" indicatorShape="circle"></ds-badge>\n            <ds-badge content="Grey" contentType="indicator-text" variant="grey" indicatorShape="circle"></ds-badge>\n          </div>\n        </div>\n      </div>\n    `\n  })\n}',...ContentTypeComparison.parameters?.docs?.source}}},AllColorVariants.parameters={...AllColorVariants.parameters,docs:{...AllColorVariants.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 16px; align-items: flex-start;">\n        <h3 style="margin: 0; font-size: 16px; font-weight: 600;">All Badge Color Variants</h3>\n        <div style="display: flex; flex-wrap: wrap; gap: 8px; max-width: 600px;">\n          <ds-badge content="Default" variant="default"></ds-badge>\n          <ds-badge content="Brand" variant="brand"></ds-badge>\n          <ds-badge content="Success" variant="success"></ds-badge>\n          <ds-badge content="Warning" variant="warning"></ds-badge>\n          <ds-badge content="Destructive" variant="destructive"></ds-badge>\n          <ds-badge content="Blue" variant="blue"></ds-badge>\n          <ds-badge content="Light Purple" variant="light-purple"></ds-badge>\n          <ds-badge content="Pink" variant="pink"></ds-badge>\n          <ds-badge content="Salmon Orange" variant="salmon-orange"></ds-badge>\n          <ds-badge content="Orange" variant="orange"></ds-badge>\n          <ds-badge content="Lime Green" variant="lime-green"></ds-badge>\n          <ds-badge content="Grey" variant="grey"></ds-badge>\n        </div>\n      </div>\n    `\n  })\n}',...AllColorVariants.parameters?.docs?.source}}}},"./src/app/components/ui/badge/ds-badge.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W:()=>DsBadgeComponent});var tslib__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_ds_badge_css_ngResource__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/components/ui/badge/ds-badge.css?ngResource"),_ds_badge_css_ngResource__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_ds_badge_css_ngResource__WEBPACK_IMPORTED_MODULE_0__),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/core/fesm2022/resource.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/core/fesm2022/debug_node.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module.mjs"),_icon_ds_icon__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/app/components/ui/icon/ds-icon.ts"),_shape_indicator_ds_shape_indicator__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/app/components/ui/shape-indicator/ds-shape-indicator.ts");let DsBadgeComponent=class DsBadgeComponent{variant=(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.input)("default");contentType=(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.input)("text");content=(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.input)();leadingIcon=(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.input)();indicatorShape=(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.input)("circle");badgeClasses=(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.EW)(()=>{const classes=["badge"];return classes.push(`badge--${this.contentType()}`),"indicator-text"===this.contentType()?classes.push("badge--indicator-variant"):classes.push(`badge--${this.variant()}`),classes.join(" ")});static propDecorators={variant:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_5__.pde,args:[{isSignal:!0,alias:"variant",required:!1,transform:void 0}]}],contentType:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_5__.pde,args:[{isSignal:!0,alias:"contentType",required:!1,transform:void 0}]}],content:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_5__.pde,args:[{isSignal:!0,alias:"content",required:!1,transform:void 0}]}],leadingIcon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_5__.pde,args:[{isSignal:!0,alias:"leadingIcon",required:!1,transform:void 0}]}],indicatorShape:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_5__.pde,args:[{isSignal:!0,alias:"indicatorShape",required:!1,transform:void 0}]}]}};DsBadgeComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_6__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.uAl)({selector:"ds-badge",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_7__.MD,_icon_ds_icon__WEBPACK_IMPORTED_MODULE_1__.m,_shape_indicator_ds_shape_indicator__WEBPACK_IMPORTED_MODULE_2__.z],encapsulation:_angular_core__WEBPACK_IMPORTED_MODULE_5__.gXe.ShadowDom,template:'\n    <span [class]="badgeClasses()">\n      @switch (contentType()) {\n        @case (\'text\') {\n          <span class="badge__content">\n            @if (content()) {\n              {{ content() }}\n            } @else {\n              <ng-content></ng-content>\n            }\n          </span>\n        }\n        \n        @case (\'icon-text\') {\n          <ds-icon \n            [name]="leadingIcon()!" \n            size="12px"\n            class="badge__icon"\n          />\n          <span class="badge__content">\n            @if (content()) {\n              {{ content() }}\n            } @else {\n              <ng-content></ng-content>\n            }\n          </span>\n        }\n        \n        @case (\'indicator-text\') {\n          <ds-shape-indicator\n            [shape]="indicatorShape()"\n            [variant]="variant()"\n            class="badge__indicator"\n          />\n          <span class="badge__content">\n            @if (content()) {\n              {{ content() }}\n            } @else {\n              <ng-content></ng-content>\n            }\n          </span>\n        }\n      }\n    </span>\n  ',styles:[_ds_badge_css_ngResource__WEBPACK_IMPORTED_MODULE_0___default()]})],DsBadgeComponent)},"./src/app/components/ui/icon/ds-icon.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"\n/* Icon component styles with Shadow DOM encapsulation */\n\n:host {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  font-size: 0;\n}\n\n/* Base icon styles */\n.icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Ensure ng-icon is properly aligned within container */\nng-icon {\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n}\n\n/* Size variants (pixel-based) */\n.icon--12 { width: 12px; height: 12px; }\n.icon--14 { width: 14px; height: 14px; }\n.icon--16 { width: 16px; height: 16px; }\n.icon--18 { width: 18px; height: 18px; }\n.icon--20 { width: 20px; height: 20px; }\n.icon--22 { width: 22px; height: 22px; }\n.icon--24 { width: 24px; height: 24px; }\n.icon--32 { width: 32px; height: 32px; }\n\n/* Colors are handled directly via ng-icon color property */\n\n/* Interactive states */\n.icon--interactive {\n  cursor: pointer;\n  transition: color 200ms ease;\n}\n\n.icon--interactive:hover {\n  opacity: 0.8;\n}\n\n.icon--interactive:active {\n  opacity: 0.6;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ui/icon/ds-icon.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{m:()=>DsIconComponent});var tslib__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_ds_icon_css_ngResource__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/components/ui/icon/ds-icon.css?ngResource"),_ds_icon_css_ngResource__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_ds_icon_css_ngResource__WEBPACK_IMPORTED_MODULE_0__),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/resource.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2022/debug_node.mjs"),_ng_icons_core__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@ng-icons/core/fesm2022/ng-icons-core.mjs");let DsIconComponent=class DsIconComponent{name=_angular_core__WEBPACK_IMPORTED_MODULE_1__.input.required();size=(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.input)("20px");color=(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.input)();interactive=(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.input)(!1);iconClasses=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.EW)(()=>{const classes=["icon"],sizeValue=this.size();if(this.isPredefinedSize(sizeValue)){const numeric=parseInt(sizeValue,10);classes.push(`icon--${numeric}`)}return this.interactive()&&classes.push("icon--interactive"),classes.join(" ")});computedSize=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.EW)(()=>{const sizeValue=this.size();return this.isPredefinedSize(sizeValue),sizeValue});computedColor=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.EW)(()=>{const colorValue=this.color();if(colorValue){if(this.isPredefinedColor(colorValue)){return{primary:"var(--text-color-default-primary)",secondary:"var(--text-color-default-secondary)",tertiary:"var(--text-color-default-tertiary)",brand:"var(--text-color-brand)",success:"var(--color-success-base)",warning:"var(--color-warning-base)",destructive:"var(--color-destructive-base)"}[colorValue]}return colorValue}});isPredefinedSize(size){return["12px","14px","16px","18px","20px","22px","24px","32px"].includes(size)}isPredefinedColor(color){return["primary","secondary","tertiary","brand","success","warning","destructive"].includes(color)}static propDecorators={name:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"name",required:!0,transform:void 0}]}],size:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"size",required:!1,transform:void 0}]}],color:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"color",required:!1,transform:void 0}]}],interactive:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"interactive",required:!1,transform:void 0}]}]}};DsIconComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_4__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.uAl)({selector:"ds-icon",standalone:!0,imports:[_ng_icons_core__WEBPACK_IMPORTED_MODULE_5__.$e],encapsulation:_angular_core__WEBPACK_IMPORTED_MODULE_3__.gXe.Emulated,template:'\n    <ng-icon \n      [name]="name()" \n      [size]="computedSize()"\n      [color]="computedColor()"\n      [class]="iconClasses()"\n    ></ng-icon>\n  ',styles:[_ds_icon_css_ngResource__WEBPACK_IMPORTED_MODULE_0___default()]})],DsIconComponent)},"./src/app/components/ui/shape-indicator/ds-shape-indicator.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* Base shape indicator styles */\n.shape-indicator {\n  display: inline-flex;\n  align-items: center;\n  gap: 6px;\n  font-family: 'Brockmann', system-ui, -apple-system, sans-serif;\n}\n\n/* Shape indicator label */\n.shape-indicator__label {\n  font-size: var(--font-size-xs); /* 12px */\n  font-weight: 400;\n  line-height: 1.2;\n  white-space: nowrap;\n}\n\n/* Color variants for text */\n.shape-indicator--default .shape-indicator__label {\n  color: var(--text-color-default-primary);\n}\n\n.shape-indicator--brand .shape-indicator__label {\n  color: var(--text-color-brand);\n}\n\n.shape-indicator--success .shape-indicator__label {\n  color: var(--color-success-base);\n}\n\n.shape-indicator--warning .shape-indicator__label {\n  color: var(--color-warning-base);\n}\n\n.shape-indicator--destructive .shape-indicator__label {\n  color: var(--color-destructive-base);\n}\n\n.shape-indicator--blue .shape-indicator__label {\n  color: var(--color-blue-base);\n}\n\n.shape-indicator--light-purple .shape-indicator__label {\n  color: var(--color-light-purple-base);\n}\n\n.shape-indicator--pink .shape-indicator__label {\n  color: var(--color-pink-base);\n}\n\n.shape-indicator--salmon-orange .shape-indicator__label {\n  color: var(--color-salmon-orange-base);\n}\n\n.shape-indicator--orange .shape-indicator__label {\n  color: var(--color-orange-base);\n}\n\n.shape-indicator--lime-green .shape-indicator__label {\n  color: var(--color-lime-green-base);\n}\n\n.shape-indicator--grey .shape-indicator__label {\n  color: var(--color-grey-base);\n}\n\n/* SVG styling */\nsvg {\n  flex-shrink: 0;\n  display: block;\n  width: 8px;\n  height: 8px;\n}\n\n/* Ensure shapes are centered within their viewBox */\nsvg path {\n  vector-effect: non-scaling-stroke;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ui/shape-indicator/ds-shape-indicator.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{z:()=>DsShapeIndicatorComponent});var tslib__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_ds_shape_indicator_css_ngResource__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/app/components/ui/shape-indicator/ds-shape-indicator.css?ngResource"),_ds_shape_indicator_css_ngResource__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_ds_shape_indicator_css_ngResource__WEBPACK_IMPORTED_MODULE_0__),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/resource.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2022/debug_node.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module.mjs");let DsShapeIndicatorComponent=class DsShapeIndicatorComponent{shape=(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.input)("circle");variant=(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.input)("default");label=(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.input)();hasContent=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.EW)(()=>!1);containerClasses=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.EW)(()=>{const classes=["shape-indicator"];return classes.push(`shape-indicator--${this.variant()}`),classes.join(" ")});currentColor=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.EW)(()=>({default:"var(--background-color-interactive-default)",brand:"var(--background-color-interactive-brand)",success:"var(--color-success-base)",warning:"var(--color-warning-base)",destructive:"var(--color-destructive-base)",blue:"var(--color-blue-base)","light-purple":"var(--color-light-purple-base)",pink:"var(--color-pink-base)","salmon-orange":"var(--color-salmon-orange-base)",orange:"var(--color-orange-base)","lime-green":"var(--color-lime-green-base)",grey:"var(--color-grey-base)"}[this.variant()]));static propDecorators={shape:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"shape",required:!1,transform:void 0}]}],variant:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"variant",required:!1,transform:void 0}]}],label:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_3__.pde,args:[{isSignal:!0,alias:"label",required:!1,transform:void 0}]}]}};DsShapeIndicatorComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_4__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.uAl)({selector:"ds-shape-indicator",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_5__.MD],encapsulation:_angular_core__WEBPACK_IMPORTED_MODULE_3__.gXe.ShadowDom,template:'\n    <div [class]="containerClasses()">\n      <svg width="8" height="8" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n        @switch (shape()) {\n          @case (\'circle\') {\n            \x3c!-- Circle: centered in 16x16 --\x3e\n            <path d="M0.887207 8C0.887207 3.85786 4.24507 0.5 8.38721 0.5C12.5293 0.5 15.8872 3.85786 15.8872 8C15.8872 12.1421 12.5293 15.5 8.38721 15.5C4.24507 15.5 0.887207 12.1421 0.887207 8Z" [attr.fill]="currentColor()" />\n          }\n          @case (\'square\') {\n            \x3c!-- Square: centered in 16x16 --\x3e\n            <path d="M0.887207 5.5C0.887207 2.73858 3.12578 0.5 5.88721 0.5H10.8872C13.6486 0.5 15.8872 2.73858 15.8872 5.5V10.5C15.8872 13.2614 13.6486 15.5 10.8872 15.5H5.88721C3.12578 15.5 0.887207 13.2614 0.887207 10.5V5.5Z" [attr.fill]="currentColor()" />\n          }\n          @case (\'diamond\') {\n            \x3c!-- Diamond: adjusted to fit 16x16 from original 17x16 --\x3e\n            <path d="M0.85777 10.3431C-0.436314 9.04906 -0.436314 6.95094 0.85777 5.65685L5.54406 0.970563C6.83814 -0.323521 8.93627 -0.323521 10.2304 0.970563L14.9166 5.65685C16.2107 6.95094 16.2107 9.04906 14.9166 10.3431L10.2304 15.0294C8.93627 16.3235 6.83814 16.3235 5.54406 15.0294L0.85777 10.3431Z" [attr.fill]="currentColor()" />\n          }\n          @case (\'triangle\') {\n            \x3c!-- Triangle: adjusted to fit 16x16 from original 17x16 --\x3e\n            <path d="M6.33574 1.4375C7.02528 0.1875 8.74913 0.1875 9.43867 1.4375L15.6445 12.6875C16.3341 13.9375 15.4721 15.5 14.0931 15.5H1.68135C0.302277 15.5 -0.559647 13.9375 0.129892 12.6875L6.33574 1.4375Z" [attr.fill]="currentColor()" />\n          }\n          @case (\'pentagon\') {\n            \x3c!-- Pentagon: adjusted to fit 16x16 from original 17x17 --\x3e\n            <path d="M6.59136 0.436532C7.36405 -0.145511 8.41036 -0.145511 9.18306 0.436533L14.9783 4.80186C15.751 5.3839 16.0743 6.4156 15.7792 7.35737L13.5656 14.4206C13.2704 15.3624 12.424 16 11.4688 16H4.30556C3.35046 16 2.50398 15.3624 2.20884 14.4206L-0.00474 7.35736C-0.299884 6.4156 0.023444 5.3839 0.796144 4.80186L6.59136 0.436532Z" [attr.fill]="currentColor()" />\n          }\n        }\n      </svg>\n      \n      @if (label()) {\n        <span class="shape-indicator__label">{{ label() }}</span>\n      } @else if (hasContent()) {\n        <span class="shape-indicator__label">\n          <ng-content></ng-content>\n        </span>\n      }\n    </div>\n  ',styles:[_ds_shape_indicator_css_ngResource__WEBPACK_IMPORTED_MODULE_0___default()]})],DsShapeIndicatorComponent)}}]);